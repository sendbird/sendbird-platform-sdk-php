<?php
/**
 * MessagesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sendbird\ApiException;
use Sendbird\Configuration;
use Sendbird\HeaderSelector;
use Sendbird\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addExtraDataToMessage
     *
     * Add extra data to a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  \Sendbird\Model\AddExtraDataToMessageData $add_extra_data_to_message_data add_extra_data_to_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\AddExtraDataToMessageResponse
     */
    public function addExtraDataToMessage($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data = null)
    {
        list($response) = $this->addExtraDataToMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data);
        return $response;
    }

    /**
     * Operation addExtraDataToMessageWithHttpInfo
     *
     * Add extra data to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddExtraDataToMessageData $add_extra_data_to_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\AddExtraDataToMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addExtraDataToMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data = null)
    {
        $request = $this->addExtraDataToMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\AddExtraDataToMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\AddExtraDataToMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\AddExtraDataToMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\AddExtraDataToMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addExtraDataToMessageAsync
     *
     * Add extra data to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddExtraDataToMessageData $add_extra_data_to_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExtraDataToMessageAsync($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data = null)
    {
        return $this->addExtraDataToMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addExtraDataToMessageAsyncWithHttpInfo
     *
     * Add extra data to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddExtraDataToMessageData $add_extra_data_to_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExtraDataToMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data = null)
    {
        $returnType = '\Sendbird\Model\AddExtraDataToMessageResponse';
        $request = $this->addExtraDataToMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addExtraDataToMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddExtraDataToMessageData $add_extra_data_to_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addExtraDataToMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_extra_data_to_message_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling addExtraDataToMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling addExtraDataToMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling addExtraDataToMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling addExtraDataToMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_extra_data_to_message_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_extra_data_to_message_data));
            } else {
                $httpBody = $add_extra_data_to_message_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addReactionToAMessage
     *
     * Add a reaction to a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  \Sendbird\Model\AddReactionToAMessageData $add_reaction_to_a_message_data add_reaction_to_a_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\AddReactionToAMessageResponse
     */
    public function addReactionToAMessage($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data = null)
    {
        list($response) = $this->addReactionToAMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data);
        return $response;
    }

    /**
     * Operation addReactionToAMessageWithHttpInfo
     *
     * Add a reaction to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddReactionToAMessageData $add_reaction_to_a_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\AddReactionToAMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addReactionToAMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data = null)
    {
        $request = $this->addReactionToAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\AddReactionToAMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\AddReactionToAMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\AddReactionToAMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\AddReactionToAMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addReactionToAMessageAsync
     *
     * Add a reaction to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddReactionToAMessageData $add_reaction_to_a_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addReactionToAMessageAsync($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data = null)
    {
        return $this->addReactionToAMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addReactionToAMessageAsyncWithHttpInfo
     *
     * Add a reaction to a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddReactionToAMessageData $add_reaction_to_a_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addReactionToAMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data = null)
    {
        $returnType = '\Sendbird\Model\AddReactionToAMessageResponse';
        $request = $this->addReactionToAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addReactionToAMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\AddReactionToAMessageData $add_reaction_to_a_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addReactionToAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $add_reaction_to_a_message_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling addReactionToAMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling addReactionToAMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling addReactionToAMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling addReactionToAMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_reaction_to_a_message_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_reaction_to_a_message_data));
            } else {
                $httpBody = $add_reaction_to_a_message_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMessageById
     *
     * Delete a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteMessageById($api_token, $channel_type, $channel_url, $message_id)
    {
        list($response) = $this->deleteMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id);
        return $response;
    }

    /**
     * Operation deleteMessageByIdWithHttpInfo
     *
     * Delete a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
    {
        $request = $this->deleteMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMessageByIdAsync
     *
     * Delete a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id)
    {
        return $this->deleteMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMessageByIdAsyncWithHttpInfo
     *
     * Delete a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
    {
        $returnType = 'object';
        $request = $this->deleteMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling deleteMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling deleteMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling deleteMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling deleteMessageById'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcMarkAllMessagesAsDelivered
     *
     * Mark all messages as delivered
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsDeliveredData $gc_mark_all_messages_as_delivered_data gc_mark_all_messages_as_delivered_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse
     */
    public function gcMarkAllMessagesAsDelivered($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data = null)
    {
        list($response) = $this->gcMarkAllMessagesAsDeliveredWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data);
        return $response;
    }

    /**
     * Operation gcMarkAllMessagesAsDeliveredWithHttpInfo
     *
     * Mark all messages as delivered
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsDeliveredData $gc_mark_all_messages_as_delivered_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcMarkAllMessagesAsDeliveredWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data = null)
    {
        $request = $this->gcMarkAllMessagesAsDeliveredRequest($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcMarkAllMessagesAsDeliveredAsync
     *
     * Mark all messages as delivered
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsDeliveredData $gc_mark_all_messages_as_delivered_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMarkAllMessagesAsDeliveredAsync($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data = null)
    {
        return $this->gcMarkAllMessagesAsDeliveredAsyncWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcMarkAllMessagesAsDeliveredAsyncWithHttpInfo
     *
     * Mark all messages as delivered
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsDeliveredData $gc_mark_all_messages_as_delivered_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMarkAllMessagesAsDeliveredAsyncWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data = null)
    {
        $returnType = '\Sendbird\Model\GcMarkAllMessagesAsDeliveredResponse';
        $request = $this->gcMarkAllMessagesAsDeliveredRequest($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcMarkAllMessagesAsDelivered'
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsDeliveredData $gc_mark_all_messages_as_delivered_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcMarkAllMessagesAsDeliveredRequest($api_token, $channel_url, $gc_mark_all_messages_as_delivered_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling gcMarkAllMessagesAsDelivered'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcMarkAllMessagesAsDelivered'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/messages/mark_as_delivered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_mark_all_messages_as_delivered_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_mark_all_messages_as_delivered_data));
            } else {
                $httpBody = $gc_mark_all_messages_as_delivered_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcMarkAllMessagesAsRead
     *
     * Mark all messages as read
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsReadData $gc_mark_all_messages_as_read_data gc_mark_all_messages_as_read_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function gcMarkAllMessagesAsRead($api_token, $channel_url, $gc_mark_all_messages_as_read_data = null)
    {
        list($response) = $this->gcMarkAllMessagesAsReadWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_read_data);
        return $response;
    }

    /**
     * Operation gcMarkAllMessagesAsReadWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsReadData $gc_mark_all_messages_as_read_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcMarkAllMessagesAsReadWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_read_data = null)
    {
        $request = $this->gcMarkAllMessagesAsReadRequest($api_token, $channel_url, $gc_mark_all_messages_as_read_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcMarkAllMessagesAsReadAsync
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsReadData $gc_mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMarkAllMessagesAsReadAsync($api_token, $channel_url, $gc_mark_all_messages_as_read_data = null)
    {
        return $this->gcMarkAllMessagesAsReadAsyncWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_read_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcMarkAllMessagesAsReadAsyncWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsReadData $gc_mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMarkAllMessagesAsReadAsyncWithHttpInfo($api_token, $channel_url, $gc_mark_all_messages_as_read_data = null)
    {
        $returnType = 'object';
        $request = $this->gcMarkAllMessagesAsReadRequest($api_token, $channel_url, $gc_mark_all_messages_as_read_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcMarkAllMessagesAsRead'
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\GcMarkAllMessagesAsReadData $gc_mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcMarkAllMessagesAsReadRequest($api_token, $channel_url, $gc_mark_all_messages_as_read_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling gcMarkAllMessagesAsRead'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcMarkAllMessagesAsRead'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/messages/mark_as_read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_mark_all_messages_as_read_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_mark_all_messages_as_read_data));
            } else {
                $httpBody = $gc_mark_all_messages_as_read_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcViewNumberOfEachMembersUnreadMessages
     *
     * View number of each member&#39;s unread messages
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $user_ids user_ids (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse
     */
    public function gcViewNumberOfEachMembersUnreadMessages($api_token, $channel_url, $user_ids = null)
    {
        list($response) = $this->gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo($api_token, $channel_url, $user_ids);
        return $response;
    }

    /**
     * Operation gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo
     *
     * View number of each member&#39;s unread messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  string $user_ids (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo($api_token, $channel_url, $user_ids = null)
    {
        $request = $this->gcViewNumberOfEachMembersUnreadMessagesRequest($api_token, $channel_url, $user_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcViewNumberOfEachMembersUnreadMessagesAsync
     *
     * View number of each member&#39;s unread messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  string $user_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewNumberOfEachMembersUnreadMessagesAsync($api_token, $channel_url, $user_ids = null)
    {
        return $this->gcViewNumberOfEachMembersUnreadMessagesAsyncWithHttpInfo($api_token, $channel_url, $user_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcViewNumberOfEachMembersUnreadMessagesAsyncWithHttpInfo
     *
     * View number of each member&#39;s unread messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  string $user_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewNumberOfEachMembersUnreadMessagesAsyncWithHttpInfo($api_token, $channel_url, $user_ids = null)
    {
        $returnType = '\Sendbird\Model\GcViewNumberOfEachMembersUnreadMessagesResponse';
        $request = $this->gcViewNumberOfEachMembersUnreadMessagesRequest($api_token, $channel_url, $user_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcViewNumberOfEachMembersUnreadMessages'
     *
     * @param  string $api_token (required)
     * @param  string $channel_url (required)
     * @param  string $user_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcViewNumberOfEachMembersUnreadMessagesRequest($api_token, $channel_url, $user_ids = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling gcViewNumberOfEachMembersUnreadMessages'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcViewNumberOfEachMembersUnreadMessages'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/messages/unread_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMessages
     *
     * List messages
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  int $message_ts message_ts (optional)
     * @param  int $message_id message_id (optional)
     * @param  int $prev_limit prev_limit (optional)
     * @param  int $next_limit next_limit (optional)
     * @param  bool $include include (optional)
     * @param  bool $reverse reverse (optional)
     * @param  string $sender_id sender_id (optional)
     * @param  string $sender_ids sender_ids (optional)
     * @param  string $operator_filter operator_filter (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $message_type message_type (optional)
     * @param  bool $including_removed including_removed (optional)
     * @param  bool $include_reactions include_reactions (optional)
     * @param  bool $with_sorted_meta_array with_sorted_meta_array (optional)
     * @param  bool $show_subchannel_messages_only show_subchannel_messages_only (optional)
     * @param  string $user_id user_id (optional)
     * @param  string $custom_type custom_type (optional)
     * @param  bool $with_meta_array with_meta_array (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListMessagesResponse
     */
    public function listMessages($api_token, $channel_type, $channel_url, $message_ts = null, $message_id = null, $prev_limit = null, $next_limit = null, $include = null, $reverse = null, $sender_id = null, $sender_ids = null, $operator_filter = null, $custom_types = null, $message_type = null, $including_removed = null, $include_reactions = null, $with_sorted_meta_array = null, $show_subchannel_messages_only = null, $user_id = null, $custom_type = null, $with_meta_array = null)
    {
        list($response) = $this->listMessagesWithHttpInfo($api_token, $channel_type, $channel_url, $message_ts, $message_id, $prev_limit, $next_limit, $include, $reverse, $sender_id, $sender_ids, $operator_filter, $custom_types, $message_type, $including_removed, $include_reactions, $with_sorted_meta_array, $show_subchannel_messages_only, $user_id, $custom_type, $with_meta_array);
        return $response;
    }

    /**
     * Operation listMessagesWithHttpInfo
     *
     * List messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  int $message_ts (optional)
     * @param  int $message_id (optional)
     * @param  int $prev_limit (optional)
     * @param  int $next_limit (optional)
     * @param  bool $include (optional)
     * @param  bool $reverse (optional)
     * @param  string $sender_id (optional)
     * @param  string $sender_ids (optional)
     * @param  string $operator_filter (optional)
     * @param  string $custom_types (optional)
     * @param  string $message_type (optional)
     * @param  bool $including_removed (optional)
     * @param  bool $include_reactions (optional)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $show_subchannel_messages_only (optional)
     * @param  string $user_id (optional)
     * @param  string $custom_type (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListMessagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMessagesWithHttpInfo($api_token, $channel_type, $channel_url, $message_ts = null, $message_id = null, $prev_limit = null, $next_limit = null, $include = null, $reverse = null, $sender_id = null, $sender_ids = null, $operator_filter = null, $custom_types = null, $message_type = null, $including_removed = null, $include_reactions = null, $with_sorted_meta_array = null, $show_subchannel_messages_only = null, $user_id = null, $custom_type = null, $with_meta_array = null)
    {
        $request = $this->listMessagesRequest($api_token, $channel_type, $channel_url, $message_ts, $message_id, $prev_limit, $next_limit, $include, $reverse, $sender_id, $sender_ids, $operator_filter, $custom_types, $message_type, $including_removed, $include_reactions, $with_sorted_meta_array, $show_subchannel_messages_only, $user_id, $custom_type, $with_meta_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListMessagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListMessagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListMessagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListMessagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMessagesAsync
     *
     * List messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  int $message_ts (optional)
     * @param  int $message_id (optional)
     * @param  int $prev_limit (optional)
     * @param  int $next_limit (optional)
     * @param  bool $include (optional)
     * @param  bool $reverse (optional)
     * @param  string $sender_id (optional)
     * @param  string $sender_ids (optional)
     * @param  string $operator_filter (optional)
     * @param  string $custom_types (optional)
     * @param  string $message_type (optional)
     * @param  bool $including_removed (optional)
     * @param  bool $include_reactions (optional)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $show_subchannel_messages_only (optional)
     * @param  string $user_id (optional)
     * @param  string $custom_type (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMessagesAsync($api_token, $channel_type, $channel_url, $message_ts = null, $message_id = null, $prev_limit = null, $next_limit = null, $include = null, $reverse = null, $sender_id = null, $sender_ids = null, $operator_filter = null, $custom_types = null, $message_type = null, $including_removed = null, $include_reactions = null, $with_sorted_meta_array = null, $show_subchannel_messages_only = null, $user_id = null, $custom_type = null, $with_meta_array = null)
    {
        return $this->listMessagesAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_ts, $message_id, $prev_limit, $next_limit, $include, $reverse, $sender_id, $sender_ids, $operator_filter, $custom_types, $message_type, $including_removed, $include_reactions, $with_sorted_meta_array, $show_subchannel_messages_only, $user_id, $custom_type, $with_meta_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMessagesAsyncWithHttpInfo
     *
     * List messages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  int $message_ts (optional)
     * @param  int $message_id (optional)
     * @param  int $prev_limit (optional)
     * @param  int $next_limit (optional)
     * @param  bool $include (optional)
     * @param  bool $reverse (optional)
     * @param  string $sender_id (optional)
     * @param  string $sender_ids (optional)
     * @param  string $operator_filter (optional)
     * @param  string $custom_types (optional)
     * @param  string $message_type (optional)
     * @param  bool $including_removed (optional)
     * @param  bool $include_reactions (optional)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $show_subchannel_messages_only (optional)
     * @param  string $user_id (optional)
     * @param  string $custom_type (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMessagesAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_ts = null, $message_id = null, $prev_limit = null, $next_limit = null, $include = null, $reverse = null, $sender_id = null, $sender_ids = null, $operator_filter = null, $custom_types = null, $message_type = null, $including_removed = null, $include_reactions = null, $with_sorted_meta_array = null, $show_subchannel_messages_only = null, $user_id = null, $custom_type = null, $with_meta_array = null)
    {
        $returnType = '\Sendbird\Model\ListMessagesResponse';
        $request = $this->listMessagesRequest($api_token, $channel_type, $channel_url, $message_ts, $message_id, $prev_limit, $next_limit, $include, $reverse, $sender_id, $sender_ids, $operator_filter, $custom_types, $message_type, $including_removed, $include_reactions, $with_sorted_meta_array, $show_subchannel_messages_only, $user_id, $custom_type, $with_meta_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMessages'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  int $message_ts (optional)
     * @param  int $message_id (optional)
     * @param  int $prev_limit (optional)
     * @param  int $next_limit (optional)
     * @param  bool $include (optional)
     * @param  bool $reverse (optional)
     * @param  string $sender_id (optional)
     * @param  string $sender_ids (optional)
     * @param  string $operator_filter (optional)
     * @param  string $custom_types (optional)
     * @param  string $message_type (optional)
     * @param  bool $including_removed (optional)
     * @param  bool $include_reactions (optional)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $show_subchannel_messages_only (optional)
     * @param  string $user_id (optional)
     * @param  string $custom_type (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMessagesRequest($api_token, $channel_type, $channel_url, $message_ts = null, $message_id = null, $prev_limit = null, $next_limit = null, $include = null, $reverse = null, $sender_id = null, $sender_ids = null, $operator_filter = null, $custom_types = null, $message_type = null, $including_removed = null, $include_reactions = null, $with_sorted_meta_array = null, $show_subchannel_messages_only = null, $user_id = null, $custom_type = null, $with_meta_array = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listMessages'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling listMessages'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling listMessages'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($message_ts !== null) {
            if('form' === 'form' && is_array($message_ts)) {
                foreach($message_ts as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['message_ts'] = $message_ts;
            }
        }
        // query params
        if ($message_id !== null) {
            if('form' === 'form' && is_array($message_id)) {
                foreach($message_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['message_id'] = $message_id;
            }
        }
        // query params
        if ($prev_limit !== null) {
            if('form' === 'form' && is_array($prev_limit)) {
                foreach($prev_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['prev_limit'] = $prev_limit;
            }
        }
        // query params
        if ($next_limit !== null) {
            if('form' === 'form' && is_array($next_limit)) {
                foreach($next_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['next_limit'] = $next_limit;
            }
        }
        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }
        // query params
        if ($reverse !== null) {
            if('form' === 'form' && is_array($reverse)) {
                foreach($reverse as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['reverse'] = $reverse;
            }
        }
        // query params
        if ($sender_id !== null) {
            if('form' === 'form' && is_array($sender_id)) {
                foreach($sender_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sender_id'] = $sender_id;
            }
        }
        // query params
        if ($sender_ids !== null) {
            if('form' === 'form' && is_array($sender_ids)) {
                foreach($sender_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sender_ids'] = $sender_ids;
            }
        }
        // query params
        if ($operator_filter !== null) {
            if('form' === 'form' && is_array($operator_filter)) {
                foreach($operator_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operator_filter'] = $operator_filter;
            }
        }
        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($message_type !== null) {
            if('form' === 'form' && is_array($message_type)) {
                foreach($message_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['message_type'] = $message_type;
            }
        }
        // query params
        if ($including_removed !== null) {
            if('form' === 'form' && is_array($including_removed)) {
                foreach($including_removed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['including_removed'] = $including_removed;
            }
        }
        // query params
        if ($include_reactions !== null) {
            if('form' === 'form' && is_array($include_reactions)) {
                foreach($include_reactions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_reactions'] = $include_reactions;
            }
        }
        // query params
        if ($with_sorted_meta_array !== null) {
            if('form' === 'form' && is_array($with_sorted_meta_array)) {
                foreach($with_sorted_meta_array as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_sorted_meta_array'] = $with_sorted_meta_array;
            }
        }
        // query params
        if ($show_subchannel_messages_only !== null) {
            if('form' === 'form' && is_array($show_subchannel_messages_only)) {
                foreach($show_subchannel_messages_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_subchannel_messages_only'] = $show_subchannel_messages_only;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }
        // query params
        if ($custom_type !== null) {
            if('form' === 'form' && is_array($custom_type)) {
                foreach($custom_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type'] = $custom_type;
            }
        }
        // query params
        if ($with_meta_array !== null) {
            if('form' === 'form' && is_array($with_meta_array)) {
                foreach($with_meta_array as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_meta_array'] = $with_meta_array;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReactionsOfMessage
     *
     * List reactions of a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  bool $list_users list_users (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListReactionsOfMessageResponse
     */
    public function listReactionsOfMessage($api_token, $channel_type, $channel_url, $message_id, $list_users = null)
    {
        list($response) = $this->listReactionsOfMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $list_users);
        return $response;
    }

    /**
     * Operation listReactionsOfMessageWithHttpInfo
     *
     * List reactions of a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $list_users (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListReactionsOfMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReactionsOfMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $list_users = null)
    {
        $request = $this->listReactionsOfMessageRequest($api_token, $channel_type, $channel_url, $message_id, $list_users);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListReactionsOfMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListReactionsOfMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListReactionsOfMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListReactionsOfMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listReactionsOfMessageAsync
     *
     * List reactions of a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $list_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReactionsOfMessageAsync($api_token, $channel_type, $channel_url, $message_id, $list_users = null)
    {
        return $this->listReactionsOfMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $list_users)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReactionsOfMessageAsyncWithHttpInfo
     *
     * List reactions of a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $list_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReactionsOfMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $list_users = null)
    {
        $returnType = '\Sendbird\Model\ListReactionsOfMessageResponse';
        $request = $this->listReactionsOfMessageRequest($api_token, $channel_type, $channel_url, $message_id, $list_users);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReactionsOfMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $list_users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReactionsOfMessageRequest($api_token, $channel_type, $channel_url, $message_id, $list_users = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listReactionsOfMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling listReactionsOfMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling listReactionsOfMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling listReactionsOfMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($list_users !== null) {
            if('form' === 'form' && is_array($list_users)) {
                foreach($list_users as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['list_users'] = $list_users;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeExtraDataFromMessage
     *
     * Remove extra data from a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  string[] $keys keys (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function removeExtraDataFromMessage($api_token, $channel_type, $channel_url, $message_id, $keys = null)
    {
        list($response) = $this->removeExtraDataFromMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $keys);
        return $response;
    }

    /**
     * Operation removeExtraDataFromMessageWithHttpInfo
     *
     * Remove extra data from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string[] $keys (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeExtraDataFromMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $keys = null)
    {
        $request = $this->removeExtraDataFromMessageRequest($api_token, $channel_type, $channel_url, $message_id, $keys);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeExtraDataFromMessageAsync
     *
     * Remove extra data from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string[] $keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeExtraDataFromMessageAsync($api_token, $channel_type, $channel_url, $message_id, $keys = null)
    {
        return $this->removeExtraDataFromMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $keys)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeExtraDataFromMessageAsyncWithHttpInfo
     *
     * Remove extra data from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string[] $keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeExtraDataFromMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $keys = null)
    {
        $returnType = 'object';
        $request = $this->removeExtraDataFromMessageRequest($api_token, $channel_type, $channel_url, $message_id, $keys);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeExtraDataFromMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string[] $keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeExtraDataFromMessageRequest($api_token, $channel_type, $channel_url, $message_id, $keys = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling removeExtraDataFromMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling removeExtraDataFromMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling removeExtraDataFromMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling removeExtraDataFromMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keys !== null) {
            if('form' === 'form' && is_array($keys)) {
                foreach($keys as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keys'] = $keys;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeReactionFromAMessage
     *
     * Remove a reaction from a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  string $user_id user_id (optional)
     * @param  string $reaction reaction (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\RemoveReactionFromAMessageResponse
     */
    public function removeReactionFromAMessage($api_token, $channel_type, $channel_url, $message_id, $user_id = null, $reaction = null)
    {
        list($response) = $this->removeReactionFromAMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $user_id, $reaction);
        return $response;
    }

    /**
     * Operation removeReactionFromAMessageWithHttpInfo
     *
     * Remove a reaction from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $user_id (optional)
     * @param  string $reaction (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\RemoveReactionFromAMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeReactionFromAMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $user_id = null, $reaction = null)
    {
        $request = $this->removeReactionFromAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $user_id, $reaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\RemoveReactionFromAMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\RemoveReactionFromAMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\RemoveReactionFromAMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\RemoveReactionFromAMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeReactionFromAMessageAsync
     *
     * Remove a reaction from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $user_id (optional)
     * @param  string $reaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeReactionFromAMessageAsync($api_token, $channel_type, $channel_url, $message_id, $user_id = null, $reaction = null)
    {
        return $this->removeReactionFromAMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $user_id, $reaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeReactionFromAMessageAsyncWithHttpInfo
     *
     * Remove a reaction from a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $user_id (optional)
     * @param  string $reaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeReactionFromAMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $user_id = null, $reaction = null)
    {
        $returnType = '\Sendbird\Model\RemoveReactionFromAMessageResponse';
        $request = $this->removeReactionFromAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $user_id, $reaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeReactionFromAMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $user_id (optional)
     * @param  string $reaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeReactionFromAMessageRequest($api_token, $channel_type, $channel_url, $message_id, $user_id = null, $reaction = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling removeReactionFromAMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling removeReactionFromAMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling removeReactionFromAMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling removeReactionFromAMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }
        // query params
        if ($reaction !== null) {
            if('form' === 'form' && is_array($reaction)) {
                foreach($reaction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['reaction'] = $reaction;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMessage
     *
     * Send a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\SendMessageData $send_message_data send_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdMessageResponse
     */
    public function sendMessage($api_token, $channel_type, $channel_url, $send_message_data = null)
    {
        list($response) = $this->sendMessageWithHttpInfo($api_token, $channel_type, $channel_url, $send_message_data);
        return $response;
    }

    /**
     * Operation sendMessageWithHttpInfo
     *
     * Send a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\SendMessageData $send_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMessageWithHttpInfo($api_token, $channel_type, $channel_url, $send_message_data = null)
    {
        $request = $this->sendMessageRequest($api_token, $channel_type, $channel_url, $send_message_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendMessageAsync
     *
     * Send a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\SendMessageData $send_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAsync($api_token, $channel_type, $channel_url, $send_message_data = null)
    {
        return $this->sendMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $send_message_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMessageAsyncWithHttpInfo
     *
     * Send a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\SendMessageData $send_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $send_message_data = null)
    {
        $returnType = '\Sendbird\Model\SendBirdMessageResponse';
        $request = $this->sendMessageRequest($api_token, $channel_type, $channel_url, $send_message_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\SendMessageData $send_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendMessageRequest($api_token, $channel_type, $channel_url, $send_message_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling sendMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling sendMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling sendMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($send_message_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($send_message_data));
            } else {
                $httpBody = $send_message_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translateMessageIntoOtherLanguages
     *
     * Translate a message into other languages
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdMessageResponse
     */
    public function translateMessageIntoOtherLanguages($api_token, $channel_type, $channel_url, $message_id, $body = null)
    {
        list($response) = $this->translateMessageIntoOtherLanguagesWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $body);
        return $response;
    }

    /**
     * Operation translateMessageIntoOtherLanguagesWithHttpInfo
     *
     * Translate a message into other languages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  object $body (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function translateMessageIntoOtherLanguagesWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $body = null)
    {
        $request = $this->translateMessageIntoOtherLanguagesRequest($api_token, $channel_type, $channel_url, $message_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translateMessageIntoOtherLanguagesAsync
     *
     * Translate a message into other languages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateMessageIntoOtherLanguagesAsync($api_token, $channel_type, $channel_url, $message_id, $body = null)
    {
        return $this->translateMessageIntoOtherLanguagesAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateMessageIntoOtherLanguagesAsyncWithHttpInfo
     *
     * Translate a message into other languages
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateMessageIntoOtherLanguagesAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $body = null)
    {
        $returnType = '\Sendbird\Model\SendBirdMessageResponse';
        $request = $this->translateMessageIntoOtherLanguagesRequest($api_token, $channel_type, $channel_url, $message_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateMessageIntoOtherLanguages'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function translateMessageIntoOtherLanguagesRequest($api_token, $channel_type, $channel_url, $message_id, $body = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling translateMessageIntoOtherLanguages'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling translateMessageIntoOtherLanguages'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling translateMessageIntoOtherLanguages'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling translateMessageIntoOtherLanguages'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/translation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExtraDataInMessage
     *
     * Update extra data in a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  \Sendbird\Model\UpdateExtraDataInMessageData $update_extra_data_in_message_data update_extra_data_in_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\UpdateExtraDataInMessageResponse
     */
    public function updateExtraDataInMessage($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data = null)
    {
        list($response) = $this->updateExtraDataInMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data);
        return $response;
    }

    /**
     * Operation updateExtraDataInMessageWithHttpInfo
     *
     * Update extra data in a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateExtraDataInMessageData $update_extra_data_in_message_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\UpdateExtraDataInMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExtraDataInMessageWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data = null)
    {
        $request = $this->updateExtraDataInMessageRequest($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\UpdateExtraDataInMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\UpdateExtraDataInMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\UpdateExtraDataInMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\UpdateExtraDataInMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExtraDataInMessageAsync
     *
     * Update extra data in a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateExtraDataInMessageData $update_extra_data_in_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExtraDataInMessageAsync($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data = null)
    {
        return $this->updateExtraDataInMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExtraDataInMessageAsyncWithHttpInfo
     *
     * Update extra data in a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateExtraDataInMessageData $update_extra_data_in_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExtraDataInMessageAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data = null)
    {
        $returnType = '\Sendbird\Model\UpdateExtraDataInMessageResponse';
        $request = $this->updateExtraDataInMessageRequest($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExtraDataInMessage'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateExtraDataInMessageData $update_extra_data_in_message_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExtraDataInMessageRequest($api_token, $channel_type, $channel_url, $message_id, $update_extra_data_in_message_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updateExtraDataInMessage'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling updateExtraDataInMessage'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updateExtraDataInMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling updateExtraDataInMessage'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_extra_data_in_message_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_extra_data_in_message_data));
            } else {
                $httpBody = $update_extra_data_in_message_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMessageById
     *
     * Update a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  \Sendbird\Model\UpdateMessageByIdData $update_message_by_id_data update_message_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdMessageResponse
     */
    public function updateMessageById($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data = null)
    {
        list($response) = $this->updateMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data);
        return $response;
    }

    /**
     * Operation updateMessageByIdWithHttpInfo
     *
     * Update a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateMessageByIdData $update_message_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data = null)
    {
        $request = $this->updateMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMessageByIdAsync
     *
     * Update a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateMessageByIdData $update_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data = null)
    {
        return $this->updateMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMessageByIdAsyncWithHttpInfo
     *
     * Update a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateMessageByIdData $update_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data = null)
    {
        $returnType = '\Sendbird\Model\SendBirdMessageResponse';
        $request = $this->updateMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\UpdateMessageByIdData $update_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $update_message_by_id_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updateMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling updateMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updateMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling updateMessageById'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_message_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_message_by_id_data));
            } else {
                $httpBody = $update_message_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewMessageById
     *
     * View a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  bool $with_sorted_meta_array with_sorted_meta_array (optional)
     * @param  bool $with_meta_array with_meta_array (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdMessageResponse
     */
    public function viewMessageById($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array = null, $with_meta_array = null)
    {
        list($response) = $this->viewMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array, $with_meta_array);
        return $response;
    }

    /**
     * Operation viewMessageByIdWithHttpInfo
     *
     * View a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array = null, $with_meta_array = null)
    {
        $request = $this->viewMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array, $with_meta_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewMessageByIdAsync
     *
     * View a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array = null, $with_meta_array = null)
    {
        return $this->viewMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array, $with_meta_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewMessageByIdAsyncWithHttpInfo
     *
     * View a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array = null, $with_meta_array = null)
    {
        $returnType = '\Sendbird\Model\SendBirdMessageResponse';
        $request = $this->viewMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array, $with_meta_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  bool $with_sorted_meta_array (optional)
     * @param  bool $with_meta_array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $with_sorted_meta_array = null, $with_meta_array = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling viewMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling viewMessageById'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with_sorted_meta_array !== null) {
            if('form' === 'form' && is_array($with_sorted_meta_array)) {
                foreach($with_sorted_meta_array as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_sorted_meta_array'] = $with_sorted_meta_array;
            }
        }
        // query params
        if ($with_meta_array !== null) {
            if('form' === 'form' && is_array($with_meta_array)) {
                foreach($with_meta_array as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_meta_array'] = $with_meta_array;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewTotalNumberOfMessagesInChannel
     *
     * View total number of messages in a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse
     */
    public function viewTotalNumberOfMessagesInChannel($api_token, $channel_type, $channel_url)
    {
        list($response) = $this->viewTotalNumberOfMessagesInChannelWithHttpInfo($api_token, $channel_type, $channel_url);
        return $response;
    }

    /**
     * Operation viewTotalNumberOfMessagesInChannelWithHttpInfo
     *
     * View total number of messages in a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewTotalNumberOfMessagesInChannelWithHttpInfo($api_token, $channel_type, $channel_url)
    {
        $request = $this->viewTotalNumberOfMessagesInChannelRequest($api_token, $channel_type, $channel_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewTotalNumberOfMessagesInChannelAsync
     *
     * View total number of messages in a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTotalNumberOfMessagesInChannelAsync($api_token, $channel_type, $channel_url)
    {
        return $this->viewTotalNumberOfMessagesInChannelAsyncWithHttpInfo($api_token, $channel_type, $channel_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewTotalNumberOfMessagesInChannelAsyncWithHttpInfo
     *
     * View total number of messages in a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTotalNumberOfMessagesInChannelAsyncWithHttpInfo($api_token, $channel_type, $channel_url)
    {
        $returnType = '\Sendbird\Model\ViewTotalNumberOfMessagesInChannelResponse';
        $request = $this->viewTotalNumberOfMessagesInChannelRequest($api_token, $channel_type, $channel_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewTotalNumberOfMessagesInChannel'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewTotalNumberOfMessagesInChannelRequest($api_token, $channel_type, $channel_url)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewTotalNumberOfMessagesInChannel'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling viewTotalNumberOfMessagesInChannel'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewTotalNumberOfMessagesInChannel'
            );
        }

        $resourcePath = '/v3/{channel_type}/{channel_url}/messages/total_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
