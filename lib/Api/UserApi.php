<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sendbird\ApiException;
use Sendbird\Configuration;
use Sendbird\HeaderSelector;
use Sendbird\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addRegistrationOrDeviceToken
     *
     * Add a registration or device token
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     * @param  \Sendbird\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data add_registration_or_device_token_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\AddRegistrationOrDeviceTokenResponse
     */
    public function addRegistrationOrDeviceToken($api_token, $user_id, $token_type, $add_registration_or_device_token_data = null)
    {
        list($response) = $this->addRegistrationOrDeviceTokenWithHttpInfo($api_token, $user_id, $token_type, $add_registration_or_device_token_data);
        return $response;
    }

    /**
     * Operation addRegistrationOrDeviceTokenWithHttpInfo
     *
     * Add a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  \Sendbird\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\AddRegistrationOrDeviceTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRegistrationOrDeviceTokenWithHttpInfo($api_token, $user_id, $token_type, $add_registration_or_device_token_data = null)
    {
        $request = $this->addRegistrationOrDeviceTokenRequest($api_token, $user_id, $token_type, $add_registration_or_device_token_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\AddRegistrationOrDeviceTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\AddRegistrationOrDeviceTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\AddRegistrationOrDeviceTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\AddRegistrationOrDeviceTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\AddRegistrationOrDeviceTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addRegistrationOrDeviceTokenAsync
     *
     * Add a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  \Sendbird\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRegistrationOrDeviceTokenAsync($api_token, $user_id, $token_type, $add_registration_or_device_token_data = null)
    {
        return $this->addRegistrationOrDeviceTokenAsyncWithHttpInfo($api_token, $user_id, $token_type, $add_registration_or_device_token_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRegistrationOrDeviceTokenAsyncWithHttpInfo
     *
     * Add a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  \Sendbird\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRegistrationOrDeviceTokenAsyncWithHttpInfo($api_token, $user_id, $token_type, $add_registration_or_device_token_data = null)
    {
        $returnType = '\Sendbird\Model\AddRegistrationOrDeviceTokenResponse';
        $request = $this->addRegistrationOrDeviceTokenRequest($api_token, $user_id, $token_type, $add_registration_or_device_token_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRegistrationOrDeviceToken'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  \Sendbird\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRegistrationOrDeviceTokenRequest($api_token, $user_id, $token_type, $add_registration_or_device_token_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling addRegistrationOrDeviceToken'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling addRegistrationOrDeviceToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling addRegistrationOrDeviceToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_registration_or_device_token_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_registration_or_device_token_data));
            } else {
                $httpBody = $add_registration_or_device_token_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation choosePushNotificationContentTemplate
     *
     * Choose a push notification content template
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ChoosePushNotificationContentTemplateResponse
     */
    public function choosePushNotificationContentTemplate($api_token, $user_id, $body = null)
    {
        list($response) = $this->choosePushNotificationContentTemplateWithHttpInfo($api_token, $user_id, $body);
        return $response;
    }

    /**
     * Operation choosePushNotificationContentTemplateWithHttpInfo
     *
     * Choose a push notification content template
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  object $body (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ChoosePushNotificationContentTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function choosePushNotificationContentTemplateWithHttpInfo($api_token, $user_id, $body = null)
    {
        $request = $this->choosePushNotificationContentTemplateRequest($api_token, $user_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ChoosePushNotificationContentTemplateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ChoosePushNotificationContentTemplateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ChoosePushNotificationContentTemplateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ChoosePushNotificationContentTemplateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ChoosePushNotificationContentTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation choosePushNotificationContentTemplateAsync
     *
     * Choose a push notification content template
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function choosePushNotificationContentTemplateAsync($api_token, $user_id, $body = null)
    {
        return $this->choosePushNotificationContentTemplateAsyncWithHttpInfo($api_token, $user_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation choosePushNotificationContentTemplateAsyncWithHttpInfo
     *
     * Choose a push notification content template
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function choosePushNotificationContentTemplateAsyncWithHttpInfo($api_token, $user_id, $body = null)
    {
        $returnType = '\Sendbird\Model\ChoosePushNotificationContentTemplateResponse';
        $request = $this->choosePushNotificationContentTemplateRequest($api_token, $user_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'choosePushNotificationContentTemplate'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function choosePushNotificationContentTemplateRequest($api_token, $user_id, $body = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling choosePushNotificationContentTemplate'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling choosePushNotificationContentTemplate'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUser
     *
     * Create a user
     *
     * @param  string $api_token api_token (required)
     * @param  \Sendbird\Model\CreateUserData $create_user_data create_user_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdUser
     */
    public function createUser($api_token, $create_user_data = null)
    {
        list($response) = $this->createUserWithHttpInfo($api_token, $create_user_data);
        return $response;
    }

    /**
     * Operation createUserWithHttpInfo
     *
     * Create a user
     *
     * @param  string $api_token (required)
     * @param  \Sendbird\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserWithHttpInfo($api_token, $create_user_data = null)
    {
        $request = $this->createUserRequest($api_token, $create_user_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\SendBirdUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserAsync
     *
     * Create a user
     *
     * @param  string $api_token (required)
     * @param  \Sendbird\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsync($api_token, $create_user_data = null)
    {
        return $this->createUserAsyncWithHttpInfo($api_token, $create_user_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserAsyncWithHttpInfo
     *
     * Create a user
     *
     * @param  string $api_token (required)
     * @param  \Sendbird\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsyncWithHttpInfo($api_token, $create_user_data = null)
    {
        $returnType = '\Sendbird\Model\SendBirdUser';
        $request = $this->createUserRequest($api_token, $create_user_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUser'
     *
     * @param  string $api_token (required)
     * @param  \Sendbird\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserRequest($api_token, $create_user_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling createUser'
            );
        }

        $resourcePath = '/v3/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_user_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_user_data));
            } else {
                $httpBody = $create_user_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUserById
     *
     * Delete a user
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteUserById($api_token, $user_id)
    {
        list($response) = $this->deleteUserByIdWithHttpInfo($api_token, $user_id);
        return $response;
    }

    /**
     * Operation deleteUserByIdWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserByIdWithHttpInfo($api_token, $user_id)
    {
        $request = $this->deleteUserByIdRequest($api_token, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUserByIdAsync
     *
     * Delete a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsync($api_token, $user_id)
    {
        return $this->deleteUserByIdAsyncWithHttpInfo($api_token, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserByIdAsyncWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsyncWithHttpInfo($api_token, $user_id)
    {
        $returnType = 'object';
        $request = $this->deleteUserByIdRequest($api_token, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUserById'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUserByIdRequest($api_token, $user_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling deleteUserById'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling deleteUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaveMyGroupChannels
     *
     * Leave my group channels
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data leave_my_group_channels_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function leaveMyGroupChannels($api_token, $user_id, $leave_my_group_channels_data = null)
    {
        list($response) = $this->leaveMyGroupChannelsWithHttpInfo($api_token, $user_id, $leave_my_group_channels_data);
        return $response;
    }

    /**
     * Operation leaveMyGroupChannelsWithHttpInfo
     *
     * Leave my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveMyGroupChannelsWithHttpInfo($api_token, $user_id, $leave_my_group_channels_data = null)
    {
        $request = $this->leaveMyGroupChannelsRequest($api_token, $user_id, $leave_my_group_channels_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leaveMyGroupChannelsAsync
     *
     * Leave my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveMyGroupChannelsAsync($api_token, $user_id, $leave_my_group_channels_data = null)
    {
        return $this->leaveMyGroupChannelsAsyncWithHttpInfo($api_token, $user_id, $leave_my_group_channels_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaveMyGroupChannelsAsyncWithHttpInfo
     *
     * Leave my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveMyGroupChannelsAsyncWithHttpInfo($api_token, $user_id, $leave_my_group_channels_data = null)
    {
        $returnType = 'object';
        $request = $this->leaveMyGroupChannelsRequest($api_token, $user_id, $leave_my_group_channels_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaveMyGroupChannels'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaveMyGroupChannelsRequest($api_token, $user_id, $leave_my_group_channels_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling leaveMyGroupChannels'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling leaveMyGroupChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/my_group_channels/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($leave_my_group_channels_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($leave_my_group_channels_data));
            } else {
                $httpBody = $leave_my_group_channels_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMyGroupChannels
     *
     * List my group channels
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $distinct_mode distinct_mode (optional)
     * @param  string $public_mode public_mode (optional)
     * @param  string $super_mode super_mode (optional)
     * @param  string $hidden_mode hidden_mode (optional)
     * @param  string $member_state_filter member_state_filter (optional)
     * @param  string $unread_filter unread_filter (optional)
     * @param  int $created_after created_after (optional)
     * @param  int $created_before created_before (optional)
     * @param  bool $show_empty show_empty (optional)
     * @param  bool $show_frozen show_frozen (optional)
     * @param  bool $show_member show_member (optional)
     * @param  bool $show_delivery_receipt show_delivery_receipt (optional)
     * @param  bool $show_read_receipt show_read_receipt (optional)
     * @param  string $order order (optional)
     * @param  string $metadata_order_key metadata_order_key (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $custom_type_startswith custom_type_startswith (optional)
     * @param  string $channel_urls channel_urls (optional)
     * @param  string $name name (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_startswith name_startswith (optional)
     * @param  string $members_exactly_in members_exactly_in (optional)
     * @param  string $members_include_in members_include_in (optional)
     * @param  string $query_type query_type (optional)
     * @param  string $members_nickname members_nickname (optional)
     * @param  string $members_nickname_contains members_nickname_contains (optional)
     * @param  string $search_query search_query (optional)
     * @param  string $search_fields search_fields (optional)
     * @param  string $metadata_key metadata_key (optional)
     * @param  string $metadata_values metadata_values (optional)
     * @param  string $metadata_value_startswith metadata_value_startswith (optional)
     * @param  string $metacounter_key metacounter_key (optional)
     * @param  string $metacounter_values metacounter_values (optional)
     * @param  string $metacounter_value_gt metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte metacounter_value_lte (optional)
     * @param  string $custom_type custom_type (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListMyGroupChannelsResponse
     */
    public function listMyGroupChannels($api_token, $user_id, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        list($response) = $this->listMyGroupChannelsWithHttpInfo($api_token, $user_id, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);
        return $response;
    }

    /**
     * Operation listMyGroupChannelsWithHttpInfo
     *
     * List my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListMyGroupChannelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMyGroupChannelsWithHttpInfo($api_token, $user_id, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        $request = $this->listMyGroupChannelsRequest($api_token, $user_id, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListMyGroupChannelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListMyGroupChannelsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListMyGroupChannelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListMyGroupChannelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListMyGroupChannelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMyGroupChannelsAsync
     *
     * List my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMyGroupChannelsAsync($api_token, $user_id, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        return $this->listMyGroupChannelsAsyncWithHttpInfo($api_token, $user_id, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMyGroupChannelsAsyncWithHttpInfo
     *
     * List my group channels
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMyGroupChannelsAsyncWithHttpInfo($api_token, $user_id, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        $returnType = '\Sendbird\Model\ListMyGroupChannelsResponse';
        $request = $this->listMyGroupChannelsRequest($api_token, $user_id, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMyGroupChannels'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMyGroupChannelsRequest($api_token, $user_id, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listMyGroupChannels'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listMyGroupChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/my_group_channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distinct_mode,
            'distinct_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $public_mode,
            'public_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $super_mode,
            'super_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hidden_mode,
            'hidden_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $member_state_filter,
            'member_state_filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unread_filter,
            'unread_filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'created_after', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'created_before', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_empty,
            'show_empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_frozen,
            'show_frozen', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_member,
            'show_member', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_delivery_receipt,
            'show_delivery_receipt', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_read_receipt,
            'show_read_receipt', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata_order_key,
            'metadata_order_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_types,
            'custom_types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_type_startswith,
            'custom_type_startswith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_urls,
            'channel_urls', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_contains,
            'name_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_startswith,
            'name_startswith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $members_exactly_in,
            'members_exactly_in', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $members_include_in,
            'members_include_in', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query_type,
            'query_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $members_nickname,
            'members_nickname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $members_nickname_contains,
            'members_nickname_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_query,
            'search_query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_fields,
            'search_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata_key,
            'metadata_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata_values,
            'metadata_values', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata_value_startswith,
            'metadata_value_startswith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_key,
            'metacounter_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_values,
            'metacounter_values', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_value_gt,
            'metacounter_value_gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_value_gte,
            'metacounter_value_gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_value_lt,
            'metacounter_value_lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metacounter_value_lte,
            'metacounter_value_lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_type,
            'custom_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRegistrationOrDeviceTokens
     *
     * List registration or device tokens
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListRegistrationOrDeviceTokensResponse
     */
    public function listRegistrationOrDeviceTokens($api_token, $user_id, $token_type)
    {
        list($response) = $this->listRegistrationOrDeviceTokensWithHttpInfo($api_token, $user_id, $token_type);
        return $response;
    }

    /**
     * Operation listRegistrationOrDeviceTokensWithHttpInfo
     *
     * List registration or device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListRegistrationOrDeviceTokensResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRegistrationOrDeviceTokensWithHttpInfo($api_token, $user_id, $token_type)
    {
        $request = $this->listRegistrationOrDeviceTokensRequest($api_token, $user_id, $token_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListRegistrationOrDeviceTokensResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListRegistrationOrDeviceTokensResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListRegistrationOrDeviceTokensResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListRegistrationOrDeviceTokensResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListRegistrationOrDeviceTokensResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRegistrationOrDeviceTokensAsync
     *
     * List registration or device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRegistrationOrDeviceTokensAsync($api_token, $user_id, $token_type)
    {
        return $this->listRegistrationOrDeviceTokensAsyncWithHttpInfo($api_token, $user_id, $token_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRegistrationOrDeviceTokensAsyncWithHttpInfo
     *
     * List registration or device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRegistrationOrDeviceTokensAsyncWithHttpInfo($api_token, $user_id, $token_type)
    {
        $returnType = '\Sendbird\Model\ListRegistrationOrDeviceTokensResponse';
        $request = $this->listRegistrationOrDeviceTokensRequest($api_token, $user_id, $token_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRegistrationOrDeviceTokens'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRegistrationOrDeviceTokensRequest($api_token, $user_id, $token_type)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listRegistrationOrDeviceTokens'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listRegistrationOrDeviceTokens'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling listRegistrationOrDeviceTokens'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listUsers
     *
     * List users
     *
     * @param  string $api_token api_token (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $active_mode active_mode (optional)
     * @param  bool $show_bot show_bot (optional)
     * @param  string $user_ids user_ids (optional)
     * @param  string $nickname nickname (optional)
     * @param  string $nickname_startswith nickname_startswith (optional)
     * @param  string $metadatakey metadatakey (optional)
     * @param  string $metadatavalues_in metadatavalues_in (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListUsersResponse
     */
    public function listUsers($api_token, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        list($response) = $this->listUsersWithHttpInfo($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);
        return $response;
    }

    /**
     * Operation listUsersWithHttpInfo
     *
     * List users
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listUsersWithHttpInfo($api_token, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $request = $this->listUsersRequest($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListUsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListUsersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListUsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListUsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listUsersAsync
     *
     * List users
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsync($api_token, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        return $this->listUsersAsyncWithHttpInfo($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listUsersAsyncWithHttpInfo
     *
     * List users
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsyncWithHttpInfo($api_token, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $returnType = '\Sendbird\Model\ListUsersResponse';
        $request = $this->listUsersRequest($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listUsers'
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listUsersRequest($api_token, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listUsers'
            );
        }

        $resourcePath = '/v3/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active_mode,
            'active_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_bot,
            'show_bot', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_ids,
            'user_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nickname,
            'nickname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nickname_startswith,
            'nickname_startswith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadatakey,
            'metadatakey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadatavalues_in,
            'metadatavalues_in', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markAllMessagesAsRead
     *
     * Mark all messages as read
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data mark_all_messages_as_read_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function markAllMessagesAsRead($api_token, $user_id, $mark_all_messages_as_read_data = null)
    {
        list($response) = $this->markAllMessagesAsReadWithHttpInfo($api_token, $user_id, $mark_all_messages_as_read_data);
        return $response;
    }

    /**
     * Operation markAllMessagesAsReadWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function markAllMessagesAsReadWithHttpInfo($api_token, $user_id, $mark_all_messages_as_read_data = null)
    {
        $request = $this->markAllMessagesAsReadRequest($api_token, $user_id, $mark_all_messages_as_read_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markAllMessagesAsReadAsync
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markAllMessagesAsReadAsync($api_token, $user_id, $mark_all_messages_as_read_data = null)
    {
        return $this->markAllMessagesAsReadAsyncWithHttpInfo($api_token, $user_id, $mark_all_messages_as_read_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markAllMessagesAsReadAsyncWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markAllMessagesAsReadAsyncWithHttpInfo($api_token, $user_id, $mark_all_messages_as_read_data = null)
    {
        $returnType = 'object';
        $request = $this->markAllMessagesAsReadRequest($api_token, $user_id, $mark_all_messages_as_read_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markAllMessagesAsRead'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markAllMessagesAsReadRequest($api_token, $user_id, $mark_all_messages_as_read_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling markAllMessagesAsRead'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling markAllMessagesAsRead'
            );
        }

        $resourcePath = '/v3/users/{user_id}/mark_as_read_all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mark_all_messages_as_read_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mark_all_messages_as_read_data));
            } else {
                $httpBody = $mark_all_messages_as_read_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypes
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypes($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        list($response) = $this->registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data);
        return $response;
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        $request = $this->registerAsOperatorToChannelsWithCustomChannelTypesRequest($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesAsync
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesAsync($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        return $this->registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        $returnType = 'object';
        $request = $this->registerAsOperatorToChannelsWithCustomChannelTypesRequest($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerAsOperatorToChannelsWithCustomChannelTypes'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesRequest($api_token, $user_id, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling registerAsOperatorToChannelsWithCustomChannelTypes'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling registerAsOperatorToChannelsWithCustomChannelTypes'
            );
        }

        $resourcePath = '/v3/users/{user_id}/operating_channel_custom_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_as_operator_to_channels_with_custom_channel_types_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_as_operator_to_channels_with_custom_channel_types_data));
            } else {
                $httpBody = $register_as_operator_to_channels_with_custom_channel_types_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceToken
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse
     */
    public function removeRegistrationOrDeviceToken($api_token, $user_id)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenWithHttpInfo($api_token, $user_id);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenWithHttpInfo
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenWithHttpInfo($api_token, $user_id)
    {
        $request = $this->removeRegistrationOrDeviceTokenRequest($api_token, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenAsync
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenAsync($api_token, $user_id)
    {
        return $this->removeRegistrationOrDeviceTokenAsyncWithHttpInfo($api_token, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenAsyncWithHttpInfo($api_token, $user_id)
    {
        $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenResponse';
        $request = $this->removeRegistrationOrDeviceTokenRequest($api_token, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceToken'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenRequest($api_token, $user_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling removeRegistrationOrDeviceToken'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling removeRegistrationOrDeviceToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByToken
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse
     */
    public function removeRegistrationOrDeviceTokenByToken($api_token, $user_id, $token_type, $token)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenByTokenWithHttpInfo($api_token, $user_id, $token_type, $token);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenWithHttpInfo
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenByTokenWithHttpInfo($api_token, $user_id, $token_type, $token)
    {
        $request = $this->removeRegistrationOrDeviceTokenByTokenRequest($api_token, $user_id, $token_type, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenAsync
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenByTokenAsync($api_token, $user_id, $token_type, $token)
    {
        return $this->removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($api_token, $user_id, $token_type, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($api_token, $user_id, $token_type, $token)
    {
        $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenByTokenResponse';
        $request = $this->removeRegistrationOrDeviceTokenByTokenRequest($api_token, $user_id, $token_type, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceTokenByToken'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenByTokenRequest($api_token, $user_id, $token_type, $token)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling removeRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling removeRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling removeRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeRegistrationOrDeviceTokenByToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByToken
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $api_token api_token (required)
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByToken($api_token, $token_type, $token)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo($api_token, $token_type, $token);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo($api_token, $token_type, $token)
    {
        $request = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($api_token, $token_type, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenAsync
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenAsync($api_token, $token_type, $token)
    {
        return $this->removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo($api_token, $token_type, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo($api_token, $token_type, $token)
    {
        $returnType = '\Sendbird\Model\RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse';
        $request = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($api_token, $token_type, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceTokenFromOwnerByToken'
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($api_token, $token_type, $token)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling removeRegistrationOrDeviceTokenFromOwnerByToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling removeRegistrationOrDeviceTokenFromOwnerByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeRegistrationOrDeviceTokenFromOwnerByToken'
            );
        }

        $resourcePath = '/v3/push/device_tokens/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetPushPreferences
     *
     * Reset push preferences
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ResetPushPreferencesResponse
     */
    public function resetPushPreferences($api_token, $user_id)
    {
        list($response) = $this->resetPushPreferencesWithHttpInfo($api_token, $user_id);
        return $response;
    }

    /**
     * Operation resetPushPreferencesWithHttpInfo
     *
     * Reset push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ResetPushPreferencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetPushPreferencesWithHttpInfo($api_token, $user_id)
    {
        $request = $this->resetPushPreferencesRequest($api_token, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ResetPushPreferencesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ResetPushPreferencesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ResetPushPreferencesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ResetPushPreferencesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ResetPushPreferencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetPushPreferencesAsync
     *
     * Reset push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetPushPreferencesAsync($api_token, $user_id)
    {
        return $this->resetPushPreferencesAsyncWithHttpInfo($api_token, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetPushPreferencesAsyncWithHttpInfo
     *
     * Reset push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetPushPreferencesAsyncWithHttpInfo($api_token, $user_id)
    {
        $returnType = '\Sendbird\Model\ResetPushPreferencesResponse';
        $request = $this->resetPushPreferencesRequest($api_token, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetPushPreferences'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetPushPreferencesRequest($api_token, $user_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling resetPushPreferences'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling resetPushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChannelInvitationPreference
     *
     * Update channel invitation preference
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data update_channel_invitation_preference_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\UpdateChannelInvitationPreferenceResponse
     */
    public function updateChannelInvitationPreference($api_token, $user_id, $update_channel_invitation_preference_data = null)
    {
        list($response) = $this->updateChannelInvitationPreferenceWithHttpInfo($api_token, $user_id, $update_channel_invitation_preference_data);
        return $response;
    }

    /**
     * Operation updateChannelInvitationPreferenceWithHttpInfo
     *
     * Update channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\UpdateChannelInvitationPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelInvitationPreferenceWithHttpInfo($api_token, $user_id, $update_channel_invitation_preference_data = null)
    {
        $request = $this->updateChannelInvitationPreferenceRequest($api_token, $user_id, $update_channel_invitation_preference_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\UpdateChannelInvitationPreferenceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\UpdateChannelInvitationPreferenceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\UpdateChannelInvitationPreferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\UpdateChannelInvitationPreferenceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\UpdateChannelInvitationPreferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChannelInvitationPreferenceAsync
     *
     * Update channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelInvitationPreferenceAsync($api_token, $user_id, $update_channel_invitation_preference_data = null)
    {
        return $this->updateChannelInvitationPreferenceAsyncWithHttpInfo($api_token, $user_id, $update_channel_invitation_preference_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChannelInvitationPreferenceAsyncWithHttpInfo
     *
     * Update channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelInvitationPreferenceAsyncWithHttpInfo($api_token, $user_id, $update_channel_invitation_preference_data = null)
    {
        $returnType = '\Sendbird\Model\UpdateChannelInvitationPreferenceResponse';
        $request = $this->updateChannelInvitationPreferenceRequest($api_token, $user_id, $update_channel_invitation_preference_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChannelInvitationPreference'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateChannelInvitationPreferenceRequest($api_token, $user_id, $update_channel_invitation_preference_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updateChannelInvitationPreference'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateChannelInvitationPreference'
            );
        }

        $resourcePath = '/v3/users/{user_id}/channel_invitation_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_channel_invitation_preference_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_channel_invitation_preference_data));
            } else {
                $httpBody = $update_channel_invitation_preference_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrl
     *
     * Update count preference of a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse
     */
    public function updateCountPreferenceOfChannelByUrl($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data = null)
    {
        list($response) = $this->updateCountPreferenceOfChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data);
        return $response;
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlWithHttpInfo
     *
     * Update count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCountPreferenceOfChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data = null)
    {
        $request = $this->updateCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlAsync
     *
     * Update count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCountPreferenceOfChannelByUrlAsync($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data = null)
    {
        return $this->updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo
     *
     * Update count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data = null)
    {
        $returnType = '\Sendbird\Model\UpdateCountPreferenceOfChannelByUrlResponse';
        $request = $this->updateCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCountPreferenceOfChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url, $update_count_preference_of_channel_by_url_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updateCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updateCountPreferenceOfChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/count_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_count_preference_of_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_count_preference_of_channel_by_url_data));
            } else {
                $httpBody = $update_count_preference_of_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePushPreferences
     *
     * Update push preferences
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesData $update_push_preferences_data update_push_preferences_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\UpdatePushPreferencesResponse
     */
    public function updatePushPreferences($api_token, $user_id, $update_push_preferences_data = null)
    {
        list($response) = $this->updatePushPreferencesWithHttpInfo($api_token, $user_id, $update_push_preferences_data);
        return $response;
    }

    /**
     * Operation updatePushPreferencesWithHttpInfo
     *
     * Update push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\UpdatePushPreferencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePushPreferencesWithHttpInfo($api_token, $user_id, $update_push_preferences_data = null)
    {
        $request = $this->updatePushPreferencesRequest($api_token, $user_id, $update_push_preferences_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\UpdatePushPreferencesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\UpdatePushPreferencesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\UpdatePushPreferencesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\UpdatePushPreferencesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\UpdatePushPreferencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePushPreferencesAsync
     *
     * Update push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesAsync($api_token, $user_id, $update_push_preferences_data = null)
    {
        return $this->updatePushPreferencesAsyncWithHttpInfo($api_token, $user_id, $update_push_preferences_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePushPreferencesAsyncWithHttpInfo
     *
     * Update push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesAsyncWithHttpInfo($api_token, $user_id, $update_push_preferences_data = null)
    {
        $returnType = '\Sendbird\Model\UpdatePushPreferencesResponse';
        $request = $this->updatePushPreferencesRequest($api_token, $user_id, $update_push_preferences_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePushPreferences'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePushPreferencesRequest($api_token, $user_id, $update_push_preferences_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updatePushPreferences'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updatePushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_push_preferences_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_push_preferences_data));
            } else {
                $httpBody = $update_push_preferences_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePushPreferencesForChannelByUrl
     *
     * Update push preferences for a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse
     */
    public function updatePushPreferencesForChannelByUrl($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data = null)
    {
        list($response) = $this->updatePushPreferencesForChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data);
        return $response;
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlWithHttpInfo
     *
     * Update push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePushPreferencesForChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data = null)
    {
        $request = $this->updatePushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlAsync
     *
     * Update push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesForChannelByUrlAsync($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data = null)
    {
        return $this->updatePushPreferencesForChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlAsyncWithHttpInfo
     *
     * Update push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesForChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data = null)
    {
        $returnType = '\Sendbird\Model\UpdatePushPreferencesForChannelByUrlResponse';
        $request = $this->updatePushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePushPreferencesForChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url, $update_push_preferences_for_channel_by_url_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updatePushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updatePushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updatePushPreferencesForChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_push_preferences_for_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_push_preferences_for_channel_by_url_data));
            } else {
                $httpBody = $update_push_preferences_for_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUserById
     *
     * Update a user
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  \Sendbird\Model\UpdateUserByIdData $update_user_by_id_data update_user_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdUser
     */
    public function updateUserById($api_token, $user_id, $update_user_by_id_data = null)
    {
        list($response) = $this->updateUserByIdWithHttpInfo($api_token, $user_id, $update_user_by_id_data);
        return $response;
    }

    /**
     * Operation updateUserByIdWithHttpInfo
     *
     * Update a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserByIdWithHttpInfo($api_token, $user_id, $update_user_by_id_data = null)
    {
        $request = $this->updateUserByIdRequest($api_token, $user_id, $update_user_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\SendBirdUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserByIdAsync
     *
     * Update a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserByIdAsync($api_token, $user_id, $update_user_by_id_data = null)
    {
        return $this->updateUserByIdAsyncWithHttpInfo($api_token, $user_id, $update_user_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserByIdAsyncWithHttpInfo
     *
     * Update a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserByIdAsyncWithHttpInfo($api_token, $user_id, $update_user_by_id_data = null)
    {
        $returnType = '\Sendbird\Model\SendBirdUser';
        $request = $this->updateUserByIdRequest($api_token, $user_id, $update_user_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUserById'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  \Sendbird\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserByIdRequest($api_token, $user_id, $update_user_by_id_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling updateUserById'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_user_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_user_by_id_data));
            } else {
                $httpBody = $update_user_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewChannelInvitationPreference
     *
     * View channel invitation preference
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewChannelInvitationPreferenceResponse
     */
    public function viewChannelInvitationPreference($api_token, $user_id)
    {
        list($response) = $this->viewChannelInvitationPreferenceWithHttpInfo($api_token, $user_id);
        return $response;
    }

    /**
     * Operation viewChannelInvitationPreferenceWithHttpInfo
     *
     * View channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewChannelInvitationPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewChannelInvitationPreferenceWithHttpInfo($api_token, $user_id)
    {
        $request = $this->viewChannelInvitationPreferenceRequest($api_token, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewChannelInvitationPreferenceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewChannelInvitationPreferenceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewChannelInvitationPreferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewChannelInvitationPreferenceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewChannelInvitationPreferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewChannelInvitationPreferenceAsync
     *
     * View channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewChannelInvitationPreferenceAsync($api_token, $user_id)
    {
        return $this->viewChannelInvitationPreferenceAsyncWithHttpInfo($api_token, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewChannelInvitationPreferenceAsyncWithHttpInfo
     *
     * View channel invitation preference
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewChannelInvitationPreferenceAsyncWithHttpInfo($api_token, $user_id)
    {
        $returnType = '\Sendbird\Model\ViewChannelInvitationPreferenceResponse';
        $request = $this->viewChannelInvitationPreferenceRequest($api_token, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewChannelInvitationPreference'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewChannelInvitationPreferenceRequest($api_token, $user_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewChannelInvitationPreference'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewChannelInvitationPreference'
            );
        }

        $resourcePath = '/v3/users/{user_id}/channel_invitation_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrl
     *
     * View count preference of a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse
     */
    public function viewCountPreferenceOfChannelByUrl($api_token, $user_id, $channel_url)
    {
        list($response) = $this->viewCountPreferenceOfChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url);
        return $response;
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlWithHttpInfo
     *
     * View count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewCountPreferenceOfChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url)
    {
        $request = $this->viewCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlAsync
     *
     * View count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCountPreferenceOfChannelByUrlAsync($api_token, $user_id, $channel_url)
    {
        return $this->viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo
     *
     * View count preference of a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url)
    {
        $returnType = '\Sendbird\Model\ViewCountPreferenceOfChannelByUrlResponse';
        $request = $this->viewCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewCountPreferenceOfChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewCountPreferenceOfChannelByUrlRequest($api_token, $user_id, $channel_url)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewCountPreferenceOfChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/count_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatus
     *
     * View number of channels by join status
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $state state (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse
     */
    public function viewNumberOfChannelsByJoinStatus($api_token, $user_id, $state = null)
    {
        list($response) = $this->viewNumberOfChannelsByJoinStatusWithHttpInfo($api_token, $user_id, $state);
        return $response;
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusWithHttpInfo
     *
     * View number of channels by join status
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $state (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfChannelsByJoinStatusWithHttpInfo($api_token, $user_id, $state = null)
    {
        $request = $this->viewNumberOfChannelsByJoinStatusRequest($api_token, $user_id, $state);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusAsync
     *
     * View number of channels by join status
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsByJoinStatusAsync($api_token, $user_id, $state = null)
    {
        return $this->viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo($api_token, $user_id, $state)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo
     *
     * View number of channels by join status
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo($api_token, $user_id, $state = null)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfChannelsByJoinStatusResponse';
        $request = $this->viewNumberOfChannelsByJoinStatusRequest($api_token, $user_id, $state);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfChannelsByJoinStatus'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfChannelsByJoinStatusRequest($api_token, $user_id, $state = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfChannelsByJoinStatus'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfChannelsByJoinStatus'
            );
        }

        $resourcePath = '/v3/users/{user_id}/group_channel_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessages
     *
     * View number of channels with unread messages
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string[] $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse
     */
    public function viewNumberOfChannelsWithUnreadMessages($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewNumberOfChannelsWithUnreadMessagesWithHttpInfo($api_token, $user_id, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesWithHttpInfo
     *
     * View number of channels with unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfChannelsWithUnreadMessagesWithHttpInfo($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewNumberOfChannelsWithUnreadMessagesRequest($api_token, $user_id, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesAsync
     *
     * View number of channels with unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsWithUnreadMessagesAsync($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        return $this->viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo($api_token, $user_id, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo
     *
     * View number of channels with unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfChannelsWithUnreadMessagesResponse';
        $request = $this->viewNumberOfChannelsWithUnreadMessagesRequest($api_token, $user_id, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfChannelsWithUnreadMessages'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfChannelsWithUnreadMessagesRequest($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfChannelsWithUnreadMessages'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfChannelsWithUnreadMessages'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_channel_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_types,
            'custom_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $super_mode,
            'super_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfUnreadItems
     *
     * View number of unread items
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $custom_type custom_type (optional)
     * @param  string $item_keys item_keys (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfUnreadItemsResponse
     */
    public function viewNumberOfUnreadItems($api_token, $user_id, $custom_type = null, $item_keys = null)
    {
        list($response) = $this->viewNumberOfUnreadItemsWithHttpInfo($api_token, $user_id, $custom_type, $item_keys);
        return $response;
    }

    /**
     * Operation viewNumberOfUnreadItemsWithHttpInfo
     *
     * View number of unread items
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfUnreadItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfUnreadItemsWithHttpInfo($api_token, $user_id, $custom_type = null, $item_keys = null)
    {
        $request = $this->viewNumberOfUnreadItemsRequest($api_token, $user_id, $custom_type, $item_keys);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfUnreadItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfUnreadItemsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfUnreadItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfUnreadItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfUnreadItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfUnreadItemsAsync
     *
     * View number of unread items
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadItemsAsync($api_token, $user_id, $custom_type = null, $item_keys = null)
    {
        return $this->viewNumberOfUnreadItemsAsyncWithHttpInfo($api_token, $user_id, $custom_type, $item_keys)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfUnreadItemsAsyncWithHttpInfo
     *
     * View number of unread items
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadItemsAsyncWithHttpInfo($api_token, $user_id, $custom_type = null, $item_keys = null)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfUnreadItemsResponse';
        $request = $this->viewNumberOfUnreadItemsRequest($api_token, $user_id, $custom_type, $item_keys);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfUnreadItems'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfUnreadItemsRequest($api_token, $user_id, $custom_type = null, $item_keys = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfUnreadItems'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfUnreadItems'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_item_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_type,
            'custom_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_keys,
            'item_keys', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfUnreadMessages
     *
     * View number of unread messages
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfUnreadMessagesResponse
     */
    public function viewNumberOfUnreadMessages($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewNumberOfUnreadMessagesWithHttpInfo($api_token, $user_id, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewNumberOfUnreadMessagesWithHttpInfo
     *
     * View number of unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfUnreadMessagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfUnreadMessagesWithHttpInfo($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewNumberOfUnreadMessagesRequest($api_token, $user_id, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfUnreadMessagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfUnreadMessagesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfUnreadMessagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfUnreadMessagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfUnreadMessagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfUnreadMessagesAsync
     *
     * View number of unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadMessagesAsync($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        return $this->viewNumberOfUnreadMessagesAsyncWithHttpInfo($api_token, $user_id, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfUnreadMessagesAsyncWithHttpInfo
     *
     * View number of unread messages
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadMessagesAsyncWithHttpInfo($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfUnreadMessagesResponse';
        $request = $this->viewNumberOfUnreadMessagesRequest($api_token, $user_id, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfUnreadMessages'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfUnreadMessagesRequest($api_token, $user_id, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfUnreadMessages'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfUnreadMessages'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_message_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_types,
            'custom_types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $super_mode,
            'super_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewPushPreferences
     *
     * View push preferences
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewPushPreferencesResponse
     */
    public function viewPushPreferences($api_token, $user_id)
    {
        list($response) = $this->viewPushPreferencesWithHttpInfo($api_token, $user_id);
        return $response;
    }

    /**
     * Operation viewPushPreferencesWithHttpInfo
     *
     * View push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewPushPreferencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewPushPreferencesWithHttpInfo($api_token, $user_id)
    {
        $request = $this->viewPushPreferencesRequest($api_token, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewPushPreferencesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewPushPreferencesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewPushPreferencesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewPushPreferencesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewPushPreferencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewPushPreferencesAsync
     *
     * View push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesAsync($api_token, $user_id)
    {
        return $this->viewPushPreferencesAsyncWithHttpInfo($api_token, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewPushPreferencesAsyncWithHttpInfo
     *
     * View push preferences
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesAsyncWithHttpInfo($api_token, $user_id)
    {
        $returnType = '\Sendbird\Model\ViewPushPreferencesResponse';
        $request = $this->viewPushPreferencesRequest($api_token, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewPushPreferences'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewPushPreferencesRequest($api_token, $user_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewPushPreferences'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewPushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewPushPreferencesForChannelByUrl
     *
     * View push preferences for a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse
     */
    public function viewPushPreferencesForChannelByUrl($api_token, $user_id, $channel_url)
    {
        list($response) = $this->viewPushPreferencesForChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url);
        return $response;
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlWithHttpInfo
     *
     * View push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewPushPreferencesForChannelByUrlWithHttpInfo($api_token, $user_id, $channel_url)
    {
        $request = $this->viewPushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlAsync
     *
     * View push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesForChannelByUrlAsync($api_token, $user_id, $channel_url)
    {
        return $this->viewPushPreferencesForChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlAsyncWithHttpInfo
     *
     * View push preferences for a channel
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesForChannelByUrlAsyncWithHttpInfo($api_token, $user_id, $channel_url)
    {
        $returnType = '\Sendbird\Model\ViewPushPreferencesForChannelByUrlResponse';
        $request = $this->viewPushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewPushPreferencesForChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewPushPreferencesForChannelByUrlRequest($api_token, $user_id, $channel_url)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewPushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewPushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewPushPreferencesForChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewUserById
     *
     * View a user
     *
     * @param  string $api_token api_token (required)
     * @param  string $user_id user_id (required)
     * @param  bool $include_unread_count include_unread_count (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\SendBirdUser
     */
    public function viewUserById($api_token, $user_id, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewUserByIdWithHttpInfo($api_token, $user_id, $include_unread_count, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewUserByIdWithHttpInfo
     *
     * View a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewUserByIdWithHttpInfo($api_token, $user_id, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewUserByIdRequest($api_token, $user_id, $include_unread_count, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\SendBirdUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewUserByIdAsync
     *
     * View a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewUserByIdAsync($api_token, $user_id, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        return $this->viewUserByIdAsyncWithHttpInfo($api_token, $user_id, $include_unread_count, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewUserByIdAsyncWithHttpInfo
     *
     * View a user
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewUserByIdAsyncWithHttpInfo($api_token, $user_id, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        $returnType = '\Sendbird\Model\SendBirdUser';
        $request = $this->viewUserByIdRequest($api_token, $user_id, $include_unread_count, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewUserById'
     *
     * @param  string $api_token (required)
     * @param  string $user_id (required)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewUserByIdRequest($api_token, $user_id, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewUserById'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_unread_count,
            'include_unread_count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_types,
            'custom_types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $super_mode,
            'super_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByToken
     *
     * View who owns a registration or device token
     *
     * @param  string $api_token api_token (required)
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByToken($api_token, $token_type, $token)
    {
        list($response) = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo($api_token, $token_type, $token);
        return $response;
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo
     *
     * View who owns a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo($api_token, $token_type, $token)
    {
        $request = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($api_token, $token_type, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenAsync
     *
     * View who owns a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenAsync($api_token, $token_type, $token)
    {
        return $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($api_token, $token_type, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo
     *
     * View who owns a registration or device token
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($api_token, $token_type, $token)
    {
        $returnType = '\Sendbird\Model\ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner[]';
        $request = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($api_token, $token_type, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewWhoOwnsRegistrationOrDeviceTokenByToken'
     *
     * @param  string $api_token (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($api_token, $token_type, $token)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewWhoOwnsRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling viewWhoOwnsRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling viewWhoOwnsRegistrationOrDeviceTokenByToken'
            );
        }

        $resourcePath = '/v3/push/device_tokens/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
