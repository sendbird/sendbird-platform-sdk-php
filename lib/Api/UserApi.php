<?php
/**
 * UserApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addRegistrationOrDeviceToken
     *
     * Add a registration or device token
     *
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data add_registration_or_device_token_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20026
     */
    public function addRegistrationOrDeviceToken($user_id, $token_type, $api_token = null, $add_registration_or_device_token_data = null)
    {
        list($response) = $this->addRegistrationOrDeviceTokenWithHttpInfo($user_id, $token_type, $api_token, $add_registration_or_device_token_data);
        return $response;
    }

    /**
     * Operation addRegistrationOrDeviceTokenWithHttpInfo
     *
     * Add a registration or device token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRegistrationOrDeviceTokenWithHttpInfo($user_id, $token_type, $api_token = null, $add_registration_or_device_token_data = null)
    {
        $request = $this->addRegistrationOrDeviceTokenRequest($user_id, $token_type, $api_token, $add_registration_or_device_token_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20026' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20026', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20026';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20026',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addRegistrationOrDeviceTokenAsync
     *
     * Add a registration or device token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRegistrationOrDeviceTokenAsync($user_id, $token_type, $api_token = null, $add_registration_or_device_token_data = null)
    {
        return $this->addRegistrationOrDeviceTokenAsyncWithHttpInfo($user_id, $token_type, $api_token, $add_registration_or_device_token_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRegistrationOrDeviceTokenAsyncWithHttpInfo
     *
     * Add a registration or device token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRegistrationOrDeviceTokenAsyncWithHttpInfo($user_id, $token_type, $api_token = null, $add_registration_or_device_token_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20026';
        $request = $this->addRegistrationOrDeviceTokenRequest($user_id, $token_type, $api_token, $add_registration_or_device_token_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRegistrationOrDeviceToken'
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\AddRegistrationOrDeviceTokenData $add_registration_or_device_token_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRegistrationOrDeviceTokenRequest($user_id, $token_type, $api_token = null, $add_registration_or_device_token_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling addRegistrationOrDeviceToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling addRegistrationOrDeviceToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_registration_or_device_token_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_registration_or_device_token_data));
            } else {
                $httpBody = $add_registration_or_device_token_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation banFromChannelsWithCustomChannelTypes
     *
     * Ban from channels with custom channel types
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\BanFromChannelsWithCustomChannelTypesData $ban_from_channels_with_custom_channel_types_data ban_from_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function banFromChannelsWithCustomChannelTypes($user_id, $api_token = null, $ban_from_channels_with_custom_channel_types_data = null)
    {
        $this->banFromChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token, $ban_from_channels_with_custom_channel_types_data);
    }

    /**
     * Operation banFromChannelsWithCustomChannelTypesWithHttpInfo
     *
     * Ban from channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BanFromChannelsWithCustomChannelTypesData $ban_from_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function banFromChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token = null, $ban_from_channels_with_custom_channel_types_data = null)
    {
        $request = $this->banFromChannelsWithCustomChannelTypesRequest($user_id, $api_token, $ban_from_channels_with_custom_channel_types_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation banFromChannelsWithCustomChannelTypesAsync
     *
     * Ban from channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BanFromChannelsWithCustomChannelTypesData $ban_from_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function banFromChannelsWithCustomChannelTypesAsync($user_id, $api_token = null, $ban_from_channels_with_custom_channel_types_data = null)
    {
        return $this->banFromChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token, $ban_from_channels_with_custom_channel_types_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation banFromChannelsWithCustomChannelTypesAsyncWithHttpInfo
     *
     * Ban from channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BanFromChannelsWithCustomChannelTypesData $ban_from_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function banFromChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token = null, $ban_from_channels_with_custom_channel_types_data = null)
    {
        $returnType = '';
        $request = $this->banFromChannelsWithCustomChannelTypesRequest($user_id, $api_token, $ban_from_channels_with_custom_channel_types_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'banFromChannelsWithCustomChannelTypes'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BanFromChannelsWithCustomChannelTypesData $ban_from_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function banFromChannelsWithCustomChannelTypesRequest($user_id, $api_token = null, $ban_from_channels_with_custom_channel_types_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling banFromChannelsWithCustomChannelTypes'
            );
        }

        $resourcePath = '/v3/users/{user_id}/banned_channel_custom_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ban_from_channels_with_custom_channel_types_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ban_from_channels_with_custom_channel_types_data));
            } else {
                $httpBody = $ban_from_channels_with_custom_channel_types_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockUser
     *
     * Block a user
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\BlockUserData $block_user_data block_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function blockUser($user_id, $api_token = null, $block_user_data = null)
    {
        list($response) = $this->blockUserWithHttpInfo($user_id, $api_token, $block_user_data);
        return $response;
    }

    /**
     * Operation blockUserWithHttpInfo
     *
     * Block a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BlockUserData $block_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockUserWithHttpInfo($user_id, $api_token = null, $block_user_data = null)
    {
        $request = $this->blockUserRequest($user_id, $api_token, $block_user_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockUserAsync
     *
     * Block a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BlockUserData $block_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUserAsync($user_id, $api_token = null, $block_user_data = null)
    {
        return $this->blockUserAsyncWithHttpInfo($user_id, $api_token, $block_user_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockUserAsyncWithHttpInfo
     *
     * Block a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BlockUserData $block_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUserAsyncWithHttpInfo($user_id, $api_token = null, $block_user_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->blockUserRequest($user_id, $api_token, $block_user_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockUser'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\BlockUserData $block_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockUserRequest($user_id, $api_token = null, $block_user_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling blockUser'
            );
        }

        $resourcePath = '/v3/users/{user_id}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($block_user_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($block_user_data));
            } else {
                $httpBody = $block_user_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation choosePushNotificationContentTemplate
     *
     * Choose a push notification content template
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  object $body body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20030
     */
    public function choosePushNotificationContentTemplate($user_id, $api_token = null, $body = null)
    {
        list($response) = $this->choosePushNotificationContentTemplateWithHttpInfo($user_id, $api_token, $body);
        return $response;
    }

    /**
     * Operation choosePushNotificationContentTemplateWithHttpInfo
     *
     * Choose a push notification content template
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  object $body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20030, HTTP status code, HTTP response headers (array of strings)
     */
    public function choosePushNotificationContentTemplateWithHttpInfo($user_id, $api_token = null, $body = null)
    {
        $request = $this->choosePushNotificationContentTemplateRequest($user_id, $api_token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20030' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20030', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20030';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20030',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation choosePushNotificationContentTemplateAsync
     *
     * Choose a push notification content template
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function choosePushNotificationContentTemplateAsync($user_id, $api_token = null, $body = null)
    {
        return $this->choosePushNotificationContentTemplateAsyncWithHttpInfo($user_id, $api_token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation choosePushNotificationContentTemplateAsyncWithHttpInfo
     *
     * Choose a push notification content template
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function choosePushNotificationContentTemplateAsyncWithHttpInfo($user_id, $api_token = null, $body = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20030';
        $request = $this->choosePushNotificationContentTemplateRequest($user_id, $api_token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'choosePushNotificationContentTemplate'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function choosePushNotificationContentTemplateRequest($user_id, $api_token = null, $body = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling choosePushNotificationContentTemplate'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUser
     *
     * Create a user
     *
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\CreateUserData $create_user_data create_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function createUser($api_token = null, $create_user_data = null)
    {
        list($response) = $this->createUserWithHttpInfo($api_token, $create_user_data);
        return $response;
    }

    /**
     * Operation createUserWithHttpInfo
     *
     * Create a user
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserWithHttpInfo($api_token = null, $create_user_data = null)
    {
        $request = $this->createUserRequest($api_token, $create_user_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserAsync
     *
     * Create a user
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsync($api_token = null, $create_user_data = null)
    {
        return $this->createUserAsyncWithHttpInfo($api_token, $create_user_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserAsyncWithHttpInfo
     *
     * Create a user
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsyncWithHttpInfo($api_token = null, $create_user_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->createUserRequest($api_token, $create_user_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUser'
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\CreateUserData $create_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserRequest($api_token = null, $create_user_data = null)
    {

        $resourcePath = '/v3/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_user_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_user_data));
            } else {
                $httpBody = $create_user_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUserById
     *
     * Delete a user
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUserById($user_id, $api_token = null)
    {
        $this->deleteUserByIdWithHttpInfo($user_id, $api_token);
    }

    /**
     * Operation deleteUserByIdWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserByIdWithHttpInfo($user_id, $api_token = null)
    {
        $request = $this->deleteUserByIdRequest($user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUserByIdAsync
     *
     * Delete a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsync($user_id, $api_token = null)
    {
        return $this->deleteUserByIdAsyncWithHttpInfo($user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserByIdAsyncWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsyncWithHttpInfo($user_id, $api_token = null)
    {
        $returnType = '';
        $request = $this->deleteUserByIdRequest($user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUserById'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUserByIdRequest($user_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling deleteUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaveMyGroupChannels
     *
     * Leave my group channels
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data leave_my_group_channels_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leaveMyGroupChannels($user_id, $api_token = null, $leave_my_group_channels_data = null)
    {
        $this->leaveMyGroupChannelsWithHttpInfo($user_id, $api_token, $leave_my_group_channels_data);
    }

    /**
     * Operation leaveMyGroupChannelsWithHttpInfo
     *
     * Leave my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveMyGroupChannelsWithHttpInfo($user_id, $api_token = null, $leave_my_group_channels_data = null)
    {
        $request = $this->leaveMyGroupChannelsRequest($user_id, $api_token, $leave_my_group_channels_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leaveMyGroupChannelsAsync
     *
     * Leave my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveMyGroupChannelsAsync($user_id, $api_token = null, $leave_my_group_channels_data = null)
    {
        return $this->leaveMyGroupChannelsAsyncWithHttpInfo($user_id, $api_token, $leave_my_group_channels_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaveMyGroupChannelsAsyncWithHttpInfo
     *
     * Leave my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveMyGroupChannelsAsyncWithHttpInfo($user_id, $api_token = null, $leave_my_group_channels_data = null)
    {
        $returnType = '';
        $request = $this->leaveMyGroupChannelsRequest($user_id, $api_token, $leave_my_group_channels_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaveMyGroupChannels'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\LeaveMyGroupChannelsData $leave_my_group_channels_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaveMyGroupChannelsRequest($user_id, $api_token = null, $leave_my_group_channels_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling leaveMyGroupChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/my_group_channels/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($leave_my_group_channels_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($leave_my_group_channels_data));
            } else {
                $httpBody = $leave_my_group_channels_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listBannedChannels
     *
     * List banned channels
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20023
     */
    public function listBannedChannels($user_id, $api_token = null, $token = null, $limit = null)
    {
        list($response) = $this->listBannedChannelsWithHttpInfo($user_id, $api_token, $token, $limit);
        return $response;
    }

    /**
     * Operation listBannedChannelsWithHttpInfo
     *
     * List banned channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBannedChannelsWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null)
    {
        $request = $this->listBannedChannelsRequest($user_id, $api_token, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20023' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20023', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20023',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listBannedChannelsAsync
     *
     * List banned channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBannedChannelsAsync($user_id, $api_token = null, $token = null, $limit = null)
    {
        return $this->listBannedChannelsAsyncWithHttpInfo($user_id, $api_token, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listBannedChannelsAsyncWithHttpInfo
     *
     * List banned channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBannedChannelsAsyncWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
        $request = $this->listBannedChannelsRequest($user_id, $api_token, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listBannedChannels'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listBannedChannelsRequest($user_id, $api_token = null, $token = null, $limit = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listBannedChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/ban';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listBlockedUsers
     *
     * List blocked users
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $user_ids user_ids (optional)
     * @param  string $metadatakey metadatakey (optional)
     * @param  string $metadatavalues_in metadatavalues_in (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20017
     */
    public function listBlockedUsers($user_id, $api_token = null, $token = null, $limit = null, $user_ids = null, $metadatakey = null, $metadatavalues_in = null)
    {
        list($response) = $this->listBlockedUsersWithHttpInfo($user_id, $api_token, $token, $limit, $user_ids, $metadatakey, $metadatavalues_in);
        return $response;
    }

    /**
     * Operation listBlockedUsersWithHttpInfo
     *
     * List blocked users
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $user_ids (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBlockedUsersWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null, $user_ids = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $request = $this->listBlockedUsersRequest($user_id, $api_token, $token, $limit, $user_ids, $metadatakey, $metadatavalues_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20017' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20017', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listBlockedUsersAsync
     *
     * List blocked users
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $user_ids (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBlockedUsersAsync($user_id, $api_token = null, $token = null, $limit = null, $user_ids = null, $metadatakey = null, $metadatavalues_in = null)
    {
        return $this->listBlockedUsersAsyncWithHttpInfo($user_id, $api_token, $token, $limit, $user_ids, $metadatakey, $metadatavalues_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listBlockedUsersAsyncWithHttpInfo
     *
     * List blocked users
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $user_ids (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBlockedUsersAsyncWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null, $user_ids = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
        $request = $this->listBlockedUsersRequest($user_id, $api_token, $token, $limit, $user_ids, $metadatakey, $metadatavalues_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listBlockedUsers'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $user_ids (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listBlockedUsersRequest($user_id, $api_token = null, $token = null, $limit = null, $user_ids = null, $metadatakey = null, $metadatavalues_in = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listBlockedUsers'
            );
        }

        $resourcePath = '/v3/users/{user_id}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($metadatakey !== null) {
            if('form' === 'form' && is_array($metadatakey)) {
                foreach($metadatakey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadatakey'] = $metadatakey;
            }
        }
        // query params
        if ($metadatavalues_in !== null) {
            if('form' === 'form' && is_array($metadatavalues_in)) {
                foreach($metadatavalues_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadatavalues_in'] = $metadatavalues_in;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMutedChannels
     *
     * List muted channels
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20024
     */
    public function listMutedChannels($user_id, $api_token = null, $token = null, $limit = null)
    {
        list($response) = $this->listMutedChannelsWithHttpInfo($user_id, $api_token, $token, $limit);
        return $response;
    }

    /**
     * Operation listMutedChannelsWithHttpInfo
     *
     * List muted channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20024, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMutedChannelsWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null)
    {
        $request = $this->listMutedChannelsRequest($user_id, $api_token, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20024' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20024', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20024';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20024',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMutedChannelsAsync
     *
     * List muted channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMutedChannelsAsync($user_id, $api_token = null, $token = null, $limit = null)
    {
        return $this->listMutedChannelsAsyncWithHttpInfo($user_id, $api_token, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMutedChannelsAsyncWithHttpInfo
     *
     * List muted channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMutedChannelsAsyncWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20024';
        $request = $this->listMutedChannelsRequest($user_id, $api_token, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMutedChannels'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMutedChannelsRequest($user_id, $api_token = null, $token = null, $limit = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listMutedChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/mute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMyGroupChannels
     *
     * List my group channels
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $distinct_mode distinct_mode (optional)
     * @param  string $public_mode public_mode (optional)
     * @param  string $super_mode super_mode (optional)
     * @param  string $hidden_mode hidden_mode (optional)
     * @param  string $member_state_filter member_state_filter (optional)
     * @param  string $unread_filter unread_filter (optional)
     * @param  int $created_after created_after (optional)
     * @param  int $created_before created_before (optional)
     * @param  bool $show_empty show_empty (optional)
     * @param  bool $show_frozen show_frozen (optional)
     * @param  bool $show_member show_member (optional)
     * @param  bool $show_delivery_receipt show_delivery_receipt (optional)
     * @param  bool $show_read_receipt show_read_receipt (optional)
     * @param  string $order order (optional)
     * @param  string $metadata_order_key metadata_order_key (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $custom_type_startswith custom_type_startswith (optional)
     * @param  string $channel_urls channel_urls (optional)
     * @param  string $name name (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_startswith name_startswith (optional)
     * @param  string $members_exactly_in members_exactly_in (optional)
     * @param  string $members_include_in members_include_in (optional)
     * @param  string $query_type query_type (optional)
     * @param  string $members_nickname members_nickname (optional)
     * @param  string $members_nickname_contains members_nickname_contains (optional)
     * @param  string $search_query search_query (optional)
     * @param  string $search_fields search_fields (optional)
     * @param  string $metadata_key metadata_key (optional)
     * @param  string $metadata_values metadata_values (optional)
     * @param  string $metadata_value_startswith metadata_value_startswith (optional)
     * @param  string $metacounter_key metacounter_key (optional)
     * @param  string $metacounter_values metacounter_values (optional)
     * @param  string $metacounter_value_gt metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte metacounter_value_lte (optional)
     * @param  string $custom_type custom_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20018
     */
    public function listMyGroupChannels($user_id, $api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        list($response) = $this->listMyGroupChannelsWithHttpInfo($user_id, $api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);
        return $response;
    }

    /**
     * Operation listMyGroupChannelsWithHttpInfo
     *
     * List my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMyGroupChannelsWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        $request = $this->listMyGroupChannelsRequest($user_id, $api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20018' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20018', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20018';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMyGroupChannelsAsync
     *
     * List my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMyGroupChannelsAsync($user_id, $api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        return $this->listMyGroupChannelsAsyncWithHttpInfo($user_id, $api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMyGroupChannelsAsyncWithHttpInfo
     *
     * List my group channels
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMyGroupChannelsAsyncWithHttpInfo($user_id, $api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20018';
        $request = $this->listMyGroupChannelsRequest($user_id, $api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $hidden_mode, $member_state_filter, $unread_filter, $created_after, $created_before, $show_empty, $show_frozen, $show_member, $show_delivery_receipt, $show_read_receipt, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $search_query, $search_fields, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $custom_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMyGroupChannels'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  string $hidden_mode (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $unread_filter (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_frozen (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $search_query (optional)
     * @param  string $search_fields (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  string $custom_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMyGroupChannelsRequest($user_id, $api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $hidden_mode = null, $member_state_filter = null, $unread_filter = null, $created_after = null, $created_before = null, $show_empty = null, $show_frozen = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $search_query = null, $search_fields = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $custom_type = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listMyGroupChannels'
            );
        }

        $resourcePath = '/v3/users/{user_id}/my_group_channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($distinct_mode !== null) {
            if('form' === 'form' && is_array($distinct_mode)) {
                foreach($distinct_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['distinct_mode'] = $distinct_mode;
            }
        }
        // query params
        if ($public_mode !== null) {
            if('form' === 'form' && is_array($public_mode)) {
                foreach($public_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['public_mode'] = $public_mode;
            }
        }
        // query params
        if ($super_mode !== null) {
            if('form' === 'form' && is_array($super_mode)) {
                foreach($super_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['super_mode'] = $super_mode;
            }
        }
        // query params
        if ($hidden_mode !== null) {
            if('form' === 'form' && is_array($hidden_mode)) {
                foreach($hidden_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hidden_mode'] = $hidden_mode;
            }
        }
        // query params
        if ($member_state_filter !== null) {
            if('form' === 'form' && is_array($member_state_filter)) {
                foreach($member_state_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['member_state_filter'] = $member_state_filter;
            }
        }
        // query params
        if ($unread_filter !== null) {
            if('form' === 'form' && is_array($unread_filter)) {
                foreach($unread_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unread_filter'] = $unread_filter;
            }
        }
        // query params
        if ($created_after !== null) {
            if('form' === 'form' && is_array($created_after)) {
                foreach($created_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_after'] = $created_after;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_before'] = $created_before;
            }
        }
        // query params
        if ($show_empty !== null) {
            if('form' === 'form' && is_array($show_empty)) {
                foreach($show_empty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_empty'] = $show_empty;
            }
        }
        // query params
        if ($show_frozen !== null) {
            if('form' === 'form' && is_array($show_frozen)) {
                foreach($show_frozen as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_frozen'] = $show_frozen;
            }
        }
        // query params
        if ($show_member !== null) {
            if('form' === 'form' && is_array($show_member)) {
                foreach($show_member as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_member'] = $show_member;
            }
        }
        // query params
        if ($show_delivery_receipt !== null) {
            if('form' === 'form' && is_array($show_delivery_receipt)) {
                foreach($show_delivery_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_delivery_receipt'] = $show_delivery_receipt;
            }
        }
        // query params
        if ($show_read_receipt !== null) {
            if('form' === 'form' && is_array($show_read_receipt)) {
                foreach($show_read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_read_receipt'] = $show_read_receipt;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($metadata_order_key !== null) {
            if('form' === 'form' && is_array($metadata_order_key)) {
                foreach($metadata_order_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_order_key'] = $metadata_order_key;
            }
        }
        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($custom_type_startswith !== null) {
            if('form' === 'form' && is_array($custom_type_startswith)) {
                foreach($custom_type_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type_startswith'] = $custom_type_startswith;
            }
        }
        // query params
        if ($channel_urls !== null) {
            if('form' === 'form' && is_array($channel_urls)) {
                foreach($channel_urls as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_urls'] = $channel_urls;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_contains !== null) {
            if('form' === 'form' && is_array($name_contains)) {
                foreach($name_contains as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_contains'] = $name_contains;
            }
        }
        // query params
        if ($name_startswith !== null) {
            if('form' === 'form' && is_array($name_startswith)) {
                foreach($name_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_startswith'] = $name_startswith;
            }
        }
        // query params
        if ($members_exactly_in !== null) {
            if('form' === 'form' && is_array($members_exactly_in)) {
                foreach($members_exactly_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_exactly_in'] = $members_exactly_in;
            }
        }
        // query params
        if ($members_include_in !== null) {
            if('form' === 'form' && is_array($members_include_in)) {
                foreach($members_include_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_include_in'] = $members_include_in;
            }
        }
        // query params
        if ($query_type !== null) {
            if('form' === 'form' && is_array($query_type)) {
                foreach($query_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['query_type'] = $query_type;
            }
        }
        // query params
        if ($members_nickname !== null) {
            if('form' === 'form' && is_array($members_nickname)) {
                foreach($members_nickname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_nickname'] = $members_nickname;
            }
        }
        // query params
        if ($members_nickname_contains !== null) {
            if('form' === 'form' && is_array($members_nickname_contains)) {
                foreach($members_nickname_contains as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_nickname_contains'] = $members_nickname_contains;
            }
        }
        // query params
        if ($search_query !== null) {
            if('form' === 'form' && is_array($search_query)) {
                foreach($search_query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search_query'] = $search_query;
            }
        }
        // query params
        if ($search_fields !== null) {
            if('form' === 'form' && is_array($search_fields)) {
                foreach($search_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search_fields'] = $search_fields;
            }
        }
        // query params
        if ($metadata_key !== null) {
            if('form' === 'form' && is_array($metadata_key)) {
                foreach($metadata_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_key'] = $metadata_key;
            }
        }
        // query params
        if ($metadata_values !== null) {
            if('form' === 'form' && is_array($metadata_values)) {
                foreach($metadata_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_values'] = $metadata_values;
            }
        }
        // query params
        if ($metadata_value_startswith !== null) {
            if('form' === 'form' && is_array($metadata_value_startswith)) {
                foreach($metadata_value_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_value_startswith'] = $metadata_value_startswith;
            }
        }
        // query params
        if ($metacounter_key !== null) {
            if('form' === 'form' && is_array($metacounter_key)) {
                foreach($metacounter_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_key'] = $metacounter_key;
            }
        }
        // query params
        if ($metacounter_values !== null) {
            if('form' === 'form' && is_array($metacounter_values)) {
                foreach($metacounter_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_values'] = $metacounter_values;
            }
        }
        // query params
        if ($metacounter_value_gt !== null) {
            if('form' === 'form' && is_array($metacounter_value_gt)) {
                foreach($metacounter_value_gt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_gt'] = $metacounter_value_gt;
            }
        }
        // query params
        if ($metacounter_value_gte !== null) {
            if('form' === 'form' && is_array($metacounter_value_gte)) {
                foreach($metacounter_value_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_gte'] = $metacounter_value_gte;
            }
        }
        // query params
        if ($metacounter_value_lt !== null) {
            if('form' === 'form' && is_array($metacounter_value_lt)) {
                foreach($metacounter_value_lt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_lt'] = $metacounter_value_lt;
            }
        }
        // query params
        if ($metacounter_value_lte !== null) {
            if('form' === 'form' && is_array($metacounter_value_lte)) {
                foreach($metacounter_value_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_lte'] = $metacounter_value_lte;
            }
        }
        // query params
        if ($custom_type !== null) {
            if('form' === 'form' && is_array($custom_type)) {
                foreach($custom_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type'] = $custom_type;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRegistrationOrDeviceTokens
     *
     * List registration or device tokens
     *
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20025
     */
    public function listRegistrationOrDeviceTokens($user_id, $token_type, $api_token = null)
    {
        list($response) = $this->listRegistrationOrDeviceTokensWithHttpInfo($user_id, $token_type, $api_token);
        return $response;
    }

    /**
     * Operation listRegistrationOrDeviceTokensWithHttpInfo
     *
     * List registration or device tokens
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20025, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRegistrationOrDeviceTokensWithHttpInfo($user_id, $token_type, $api_token = null)
    {
        $request = $this->listRegistrationOrDeviceTokensRequest($user_id, $token_type, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20025' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20025', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20025';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20025',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRegistrationOrDeviceTokensAsync
     *
     * List registration or device tokens
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRegistrationOrDeviceTokensAsync($user_id, $token_type, $api_token = null)
    {
        return $this->listRegistrationOrDeviceTokensAsyncWithHttpInfo($user_id, $token_type, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRegistrationOrDeviceTokensAsyncWithHttpInfo
     *
     * List registration or device tokens
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRegistrationOrDeviceTokensAsyncWithHttpInfo($user_id, $token_type, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20025';
        $request = $this->listRegistrationOrDeviceTokensRequest($user_id, $token_type, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRegistrationOrDeviceTokens'
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRegistrationOrDeviceTokensRequest($user_id, $token_type, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listRegistrationOrDeviceTokens'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling listRegistrationOrDeviceTokens'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listUsers
     *
     * List users
     *
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $active_mode active_mode (optional)
     * @param  bool $show_bot show_bot (optional)
     * @param  string $user_ids user_ids (optional)
     * @param  string $nickname nickname (optional)
     * @param  string $nickname_startswith nickname_startswith (optional)
     * @param  string $metadatakey metadatakey (optional)
     * @param  string $metadatavalues_in metadatavalues_in (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20017
     */
    public function listUsers($api_token = null, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        list($response) = $this->listUsersWithHttpInfo($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);
        return $response;
    }

    /**
     * Operation listUsersWithHttpInfo
     *
     * List users
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function listUsersWithHttpInfo($api_token = null, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $request = $this->listUsersRequest($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20017' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20017', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listUsersAsync
     *
     * List users
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsync($api_token = null, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        return $this->listUsersAsyncWithHttpInfo($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listUsersAsyncWithHttpInfo
     *
     * List users
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsyncWithHttpInfo($api_token = null, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
        $request = $this->listUsersRequest($api_token, $token, $limit, $active_mode, $show_bot, $user_ids, $nickname, $nickname_startswith, $metadatakey, $metadatavalues_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listUsers'
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $active_mode (optional)
     * @param  bool $show_bot (optional)
     * @param  string $user_ids (optional)
     * @param  string $nickname (optional)
     * @param  string $nickname_startswith (optional)
     * @param  string $metadatakey (optional)
     * @param  string $metadatavalues_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listUsersRequest($api_token = null, $token = null, $limit = null, $active_mode = null, $show_bot = null, $user_ids = null, $nickname = null, $nickname_startswith = null, $metadatakey = null, $metadatavalues_in = null)
    {

        $resourcePath = '/v3/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($active_mode !== null) {
            if('form' === 'form' && is_array($active_mode)) {
                foreach($active_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active_mode'] = $active_mode;
            }
        }
        // query params
        if ($show_bot !== null) {
            if('form' === 'form' && is_array($show_bot)) {
                foreach($show_bot as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_bot'] = $show_bot;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($nickname !== null) {
            if('form' === 'form' && is_array($nickname)) {
                foreach($nickname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nickname'] = $nickname;
            }
        }
        // query params
        if ($nickname_startswith !== null) {
            if('form' === 'form' && is_array($nickname_startswith)) {
                foreach($nickname_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nickname_startswith'] = $nickname_startswith;
            }
        }
        // query params
        if ($metadatakey !== null) {
            if('form' === 'form' && is_array($metadatakey)) {
                foreach($metadatakey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadatakey'] = $metadatakey;
            }
        }
        // query params
        if ($metadatavalues_in !== null) {
            if('form' === 'form' && is_array($metadatavalues_in)) {
                foreach($metadatavalues_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadatavalues_in'] = $metadatavalues_in;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markAllMessagesAsRead
     *
     * Mark all messages as read
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data mark_all_messages_as_read_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function markAllMessagesAsRead($user_id, $api_token = null, $mark_all_messages_as_read_data = null)
    {
        $this->markAllMessagesAsReadWithHttpInfo($user_id, $api_token, $mark_all_messages_as_read_data);
    }

    /**
     * Operation markAllMessagesAsReadWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function markAllMessagesAsReadWithHttpInfo($user_id, $api_token = null, $mark_all_messages_as_read_data = null)
    {
        $request = $this->markAllMessagesAsReadRequest($user_id, $api_token, $mark_all_messages_as_read_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation markAllMessagesAsReadAsync
     *
     * Mark all messages as read
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markAllMessagesAsReadAsync($user_id, $api_token = null, $mark_all_messages_as_read_data = null)
    {
        return $this->markAllMessagesAsReadAsyncWithHttpInfo($user_id, $api_token, $mark_all_messages_as_read_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markAllMessagesAsReadAsyncWithHttpInfo
     *
     * Mark all messages as read
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markAllMessagesAsReadAsyncWithHttpInfo($user_id, $api_token = null, $mark_all_messages_as_read_data = null)
    {
        $returnType = '';
        $request = $this->markAllMessagesAsReadRequest($user_id, $api_token, $mark_all_messages_as_read_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markAllMessagesAsRead'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MarkAllMessagesAsReadData $mark_all_messages_as_read_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markAllMessagesAsReadRequest($user_id, $api_token = null, $mark_all_messages_as_read_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling markAllMessagesAsRead'
            );
        }

        $resourcePath = '/v3/users/{user_id}/mark_as_read_all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mark_all_messages_as_read_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mark_all_messages_as_read_data));
            } else {
                $httpBody = $mark_all_messages_as_read_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation muteInChannelsWithCustomChannelTypes
     *
     * Mute in channels with custom channel types
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\MuteInChannelsWithCustomChannelTypesData $mute_in_channels_with_custom_channel_types_data mute_in_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function muteInChannelsWithCustomChannelTypes($user_id, $api_token = null, $mute_in_channels_with_custom_channel_types_data = null)
    {
        $this->muteInChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token, $mute_in_channels_with_custom_channel_types_data);
    }

    /**
     * Operation muteInChannelsWithCustomChannelTypesWithHttpInfo
     *
     * Mute in channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MuteInChannelsWithCustomChannelTypesData $mute_in_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function muteInChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token = null, $mute_in_channels_with_custom_channel_types_data = null)
    {
        $request = $this->muteInChannelsWithCustomChannelTypesRequest($user_id, $api_token, $mute_in_channels_with_custom_channel_types_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation muteInChannelsWithCustomChannelTypesAsync
     *
     * Mute in channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MuteInChannelsWithCustomChannelTypesData $mute_in_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function muteInChannelsWithCustomChannelTypesAsync($user_id, $api_token = null, $mute_in_channels_with_custom_channel_types_data = null)
    {
        return $this->muteInChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token, $mute_in_channels_with_custom_channel_types_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation muteInChannelsWithCustomChannelTypesAsyncWithHttpInfo
     *
     * Mute in channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MuteInChannelsWithCustomChannelTypesData $mute_in_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function muteInChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token = null, $mute_in_channels_with_custom_channel_types_data = null)
    {
        $returnType = '';
        $request = $this->muteInChannelsWithCustomChannelTypesRequest($user_id, $api_token, $mute_in_channels_with_custom_channel_types_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'muteInChannelsWithCustomChannelTypes'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\MuteInChannelsWithCustomChannelTypesData $mute_in_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function muteInChannelsWithCustomChannelTypesRequest($user_id, $api_token = null, $mute_in_channels_with_custom_channel_types_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling muteInChannelsWithCustomChannelTypes'
            );
        }

        $resourcePath = '/v3/users/{user_id}/muted_channel_custom_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mute_in_channels_with_custom_channel_types_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mute_in_channels_with_custom_channel_types_data));
            } else {
                $httpBody = $mute_in_channels_with_custom_channel_types_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypes
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypes($user_id, $api_token = null, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        $this->registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token, $register_as_operator_to_channels_with_custom_channel_types_data);
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo($user_id, $api_token = null, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        $request = $this->registerAsOperatorToChannelsWithCustomChannelTypesRequest($user_id, $api_token, $register_as_operator_to_channels_with_custom_channel_types_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesAsync
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesAsync($user_id, $api_token = null, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        return $this->registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token, $register_as_operator_to_channels_with_custom_channel_types_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo
     *
     * Register as an operator to channels with custom channel types
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesAsyncWithHttpInfo($user_id, $api_token = null, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        $returnType = '';
        $request = $this->registerAsOperatorToChannelsWithCustomChannelTypesRequest($user_id, $api_token, $register_as_operator_to_channels_with_custom_channel_types_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerAsOperatorToChannelsWithCustomChannelTypes'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\RegisterAsOperatorToChannelsWithCustomChannelTypesData $register_as_operator_to_channels_with_custom_channel_types_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerAsOperatorToChannelsWithCustomChannelTypesRequest($user_id, $api_token = null, $register_as_operator_to_channels_with_custom_channel_types_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling registerAsOperatorToChannelsWithCustomChannelTypes'
            );
        }

        $resourcePath = '/v3/users/{user_id}/operating_channel_custom_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_as_operator_to_channels_with_custom_channel_types_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_as_operator_to_channels_with_custom_channel_types_data));
            } else {
                $httpBody = $register_as_operator_to_channels_with_custom_channel_types_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceToken
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20027
     */
    public function removeRegistrationOrDeviceToken($user_id, $api_token = null)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenWithHttpInfo($user_id, $api_token);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenWithHttpInfo
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenWithHttpInfo($user_id, $api_token = null)
    {
        $request = $this->removeRegistrationOrDeviceTokenRequest($user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20027' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20027', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20027';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20027',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenAsync
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenAsync($user_id, $api_token = null)
    {
        return $this->removeRegistrationOrDeviceTokenAsyncWithHttpInfo($user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token - When unregistering all device tokens
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenAsyncWithHttpInfo($user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20027';
        $request = $this->removeRegistrationOrDeviceTokenRequest($user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceToken'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenRequest($user_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling removeRegistrationOrDeviceToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByToken
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $user_id user_id (required)
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20027
     */
    public function removeRegistrationOrDeviceTokenByToken($user_id, $token_type, $token, $api_token = null)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenByTokenWithHttpInfo($user_id, $token_type, $token, $api_token);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenWithHttpInfo
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenByTokenWithHttpInfo($user_id, $token_type, $token, $api_token = null)
    {
        $request = $this->removeRegistrationOrDeviceTokenByTokenRequest($user_id, $token_type, $token, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20027' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20027', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20027';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20027',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenAsync
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenByTokenAsync($user_id, $token_type, $token, $api_token = null)
    {
        return $this->removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($user_id, $token_type, $token, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token - When unregistering a specific token
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($user_id, $token_type, $token, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20027';
        $request = $this->removeRegistrationOrDeviceTokenByTokenRequest($user_id, $token_type, $token, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceTokenByToken'
     *
     * @param  string $user_id (required)
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenByTokenRequest($user_id, $token_type, $token, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling removeRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling removeRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeRegistrationOrDeviceTokenByToken'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByToken
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20028
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByToken($token_type, $token, $api_token = null)
    {
        list($response) = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo($token_type, $token, $api_token);
        return $response;
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20028, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo($token_type, $token, $api_token = null)
    {
        $request = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($token_type, $token, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20028' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20028', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20028';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20028',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenAsync
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenAsync($token_type, $token, $api_token = null)
    {
        return $this->removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo($token_type, $token, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo
     *
     * Remove a registration or device token from an owner
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenAsyncWithHttpInfo($token_type, $token, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20028';
        $request = $this->removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($token_type, $token, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRegistrationOrDeviceTokenFromOwnerByToken'
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRegistrationOrDeviceTokenFromOwnerByTokenRequest($token_type, $token, $api_token = null)
    {
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling removeRegistrationOrDeviceTokenFromOwnerByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling removeRegistrationOrDeviceTokenFromOwnerByToken'
            );
        }

        $resourcePath = '/v3/push/device_tokens/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetPushPreferences
     *
     * Reset push preferences
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetPushPreferences($user_id, $api_token = null)
    {
        $this->resetPushPreferencesWithHttpInfo($user_id, $api_token);
    }

    /**
     * Operation resetPushPreferencesWithHttpInfo
     *
     * Reset push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetPushPreferencesWithHttpInfo($user_id, $api_token = null)
    {
        $request = $this->resetPushPreferencesRequest($user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resetPushPreferencesAsync
     *
     * Reset push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetPushPreferencesAsync($user_id, $api_token = null)
    {
        return $this->resetPushPreferencesAsyncWithHttpInfo($user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetPushPreferencesAsyncWithHttpInfo
     *
     * Reset push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetPushPreferencesAsyncWithHttpInfo($user_id, $api_token = null)
    {
        $returnType = '';
        $request = $this->resetPushPreferencesRequest($user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetPushPreferences'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetPushPreferencesRequest($user_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling resetPushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unblockUserById
     *
     * Unblock a user
     *
     * @param  string $user_id user_id (required)
     * @param  string $target_id target_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unblockUserById($user_id, $target_id, $api_token = null)
    {
        $this->unblockUserByIdWithHttpInfo($user_id, $target_id, $api_token);
    }

    /**
     * Operation unblockUserByIdWithHttpInfo
     *
     * Unblock a user
     *
     * @param  string $user_id (required)
     * @param  string $target_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unblockUserByIdWithHttpInfo($user_id, $target_id, $api_token = null)
    {
        $request = $this->unblockUserByIdRequest($user_id, $target_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unblockUserByIdAsync
     *
     * Unblock a user
     *
     * @param  string $user_id (required)
     * @param  string $target_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unblockUserByIdAsync($user_id, $target_id, $api_token = null)
    {
        return $this->unblockUserByIdAsyncWithHttpInfo($user_id, $target_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unblockUserByIdAsyncWithHttpInfo
     *
     * Unblock a user
     *
     * @param  string $user_id (required)
     * @param  string $target_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unblockUserByIdAsyncWithHttpInfo($user_id, $target_id, $api_token = null)
    {
        $returnType = '';
        $request = $this->unblockUserByIdRequest($user_id, $target_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unblockUserById'
     *
     * @param  string $user_id (required)
     * @param  string $target_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unblockUserByIdRequest($user_id, $target_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling unblockUserById'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling unblockUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}/block/{target_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($target_id !== null) {
            $resourcePath = str_replace(
                '{' . 'target_id' . '}',
                ObjectSerializer::toPathValue($target_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChannelInvitationPreference
     *
     * Update channel invitation preference
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data update_channel_invitation_preference_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006
     */
    public function updateChannelInvitationPreference($user_id, $api_token = null, $update_channel_invitation_preference_data = null)
    {
        list($response) = $this->updateChannelInvitationPreferenceWithHttpInfo($user_id, $api_token, $update_channel_invitation_preference_data);
        return $response;
    }

    /**
     * Operation updateChannelInvitationPreferenceWithHttpInfo
     *
     * Update channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelInvitationPreferenceWithHttpInfo($user_id, $api_token = null, $update_channel_invitation_preference_data = null)
    {
        $request = $this->updateChannelInvitationPreferenceRequest($user_id, $api_token, $update_channel_invitation_preference_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChannelInvitationPreferenceAsync
     *
     * Update channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelInvitationPreferenceAsync($user_id, $api_token = null, $update_channel_invitation_preference_data = null)
    {
        return $this->updateChannelInvitationPreferenceAsyncWithHttpInfo($user_id, $api_token, $update_channel_invitation_preference_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChannelInvitationPreferenceAsyncWithHttpInfo
     *
     * Update channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelInvitationPreferenceAsyncWithHttpInfo($user_id, $api_token = null, $update_channel_invitation_preference_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
        $request = $this->updateChannelInvitationPreferenceRequest($user_id, $api_token, $update_channel_invitation_preference_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChannelInvitationPreference'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateChannelInvitationPreferenceData $update_channel_invitation_preference_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateChannelInvitationPreferenceRequest($user_id, $api_token = null, $update_channel_invitation_preference_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateChannelInvitationPreference'
            );
        }

        $resourcePath = '/v3/users/{user_id}/channel_invitation_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_channel_invitation_preference_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_channel_invitation_preference_data));
            } else {
                $httpBody = $update_channel_invitation_preference_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrl
     *
     * Update count preference of a channel
     *
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20022
     */
    public function updateCountPreferenceOfChannelByUrl($user_id, $channel_url, $api_token = null, $update_count_preference_of_channel_by_url_data = null)
    {
        list($response) = $this->updateCountPreferenceOfChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token, $update_count_preference_of_channel_by_url_data);
        return $response;
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlWithHttpInfo
     *
     * Update count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCountPreferenceOfChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token = null, $update_count_preference_of_channel_by_url_data = null)
    {
        $request = $this->updateCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token, $update_count_preference_of_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20022' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20022', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlAsync
     *
     * Update count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCountPreferenceOfChannelByUrlAsync($user_id, $channel_url, $api_token = null, $update_count_preference_of_channel_by_url_data = null)
    {
        return $this->updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token, $update_count_preference_of_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo
     *
     * Update count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCountPreferenceOfChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token = null, $update_count_preference_of_channel_by_url_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
        $request = $this->updateCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token, $update_count_preference_of_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCountPreferenceOfChannelByUrl'
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateCountPreferenceOfChannelByUrlData $update_count_preference_of_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token = null, $update_count_preference_of_channel_by_url_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updateCountPreferenceOfChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/count_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_count_preference_of_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_count_preference_of_channel_by_url_data));
            } else {
                $httpBody = $update_count_preference_of_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePushPreferences
     *
     * Update push preferences
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesData $update_push_preferences_data update_push_preferences_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20029
     */
    public function updatePushPreferences($user_id, $api_token = null, $update_push_preferences_data = null)
    {
        list($response) = $this->updatePushPreferencesWithHttpInfo($user_id, $api_token, $update_push_preferences_data);
        return $response;
    }

    /**
     * Operation updatePushPreferencesWithHttpInfo
     *
     * Update push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePushPreferencesWithHttpInfo($user_id, $api_token = null, $update_push_preferences_data = null)
    {
        $request = $this->updatePushPreferencesRequest($user_id, $api_token, $update_push_preferences_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20029' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20029', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20029',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePushPreferencesAsync
     *
     * Update push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesAsync($user_id, $api_token = null, $update_push_preferences_data = null)
    {
        return $this->updatePushPreferencesAsyncWithHttpInfo($user_id, $api_token, $update_push_preferences_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePushPreferencesAsyncWithHttpInfo
     *
     * Update push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesAsyncWithHttpInfo($user_id, $api_token = null, $update_push_preferences_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
        $request = $this->updatePushPreferencesRequest($user_id, $api_token, $update_push_preferences_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePushPreferences'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesData $update_push_preferences_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePushPreferencesRequest($user_id, $api_token = null, $update_push_preferences_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updatePushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_push_preferences_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_push_preferences_data));
            } else {
                $httpBody = $update_push_preferences_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePushPreferencesForChannelByUrl
     *
     * Update push preferences for a channel
     *
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20029
     */
    public function updatePushPreferencesForChannelByUrl($user_id, $channel_url, $api_token = null, $update_push_preferences_for_channel_by_url_data = null)
    {
        list($response) = $this->updatePushPreferencesForChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token, $update_push_preferences_for_channel_by_url_data);
        return $response;
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlWithHttpInfo
     *
     * Update push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePushPreferencesForChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token = null, $update_push_preferences_for_channel_by_url_data = null)
    {
        $request = $this->updatePushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token, $update_push_preferences_for_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20029' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20029', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20029',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlAsync
     *
     * Update push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesForChannelByUrlAsync($user_id, $channel_url, $api_token = null, $update_push_preferences_for_channel_by_url_data = null)
    {
        return $this->updatePushPreferencesForChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token, $update_push_preferences_for_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePushPreferencesForChannelByUrlAsyncWithHttpInfo
     *
     * Update push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePushPreferencesForChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token = null, $update_push_preferences_for_channel_by_url_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
        $request = $this->updatePushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token, $update_push_preferences_for_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePushPreferencesForChannelByUrl'
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdatePushPreferencesForChannelByUrlData $update_push_preferences_for_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token = null, $update_push_preferences_for_channel_by_url_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updatePushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling updatePushPreferencesForChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_push_preferences_for_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_push_preferences_for_channel_by_url_data));
            } else {
                $httpBody = $update_push_preferences_for_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUserById
     *
     * Update a user
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateUserByIdData $update_user_by_id_data update_user_by_id_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function updateUserById($user_id, $api_token = null, $update_user_by_id_data = null)
    {
        list($response) = $this->updateUserByIdWithHttpInfo($user_id, $api_token, $update_user_by_id_data);
        return $response;
    }

    /**
     * Operation updateUserByIdWithHttpInfo
     *
     * Update a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserByIdWithHttpInfo($user_id, $api_token = null, $update_user_by_id_data = null)
    {
        $request = $this->updateUserByIdRequest($user_id, $api_token, $update_user_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserByIdAsync
     *
     * Update a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserByIdAsync($user_id, $api_token = null, $update_user_by_id_data = null)
    {
        return $this->updateUserByIdAsyncWithHttpInfo($user_id, $api_token, $update_user_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserByIdAsyncWithHttpInfo
     *
     * Update a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserByIdAsyncWithHttpInfo($user_id, $api_token = null, $update_user_by_id_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->updateUserByIdRequest($user_id, $api_token, $update_user_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUserById'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\UpdateUserByIdData $update_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserByIdRequest($user_id, $api_token = null, $update_user_by_id_data = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling updateUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_user_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_user_by_id_data));
            } else {
                $httpBody = $update_user_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewChannelInvitationPreference
     *
     * View channel invitation preference
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2006
     */
    public function viewChannelInvitationPreference($user_id, $api_token = null)
    {
        list($response) = $this->viewChannelInvitationPreferenceWithHttpInfo($user_id, $api_token);
        return $response;
    }

    /**
     * Operation viewChannelInvitationPreferenceWithHttpInfo
     *
     * View channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewChannelInvitationPreferenceWithHttpInfo($user_id, $api_token = null)
    {
        $request = $this->viewChannelInvitationPreferenceRequest($user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewChannelInvitationPreferenceAsync
     *
     * View channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewChannelInvitationPreferenceAsync($user_id, $api_token = null)
    {
        return $this->viewChannelInvitationPreferenceAsyncWithHttpInfo($user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewChannelInvitationPreferenceAsyncWithHttpInfo
     *
     * View channel invitation preference
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewChannelInvitationPreferenceAsyncWithHttpInfo($user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2006';
        $request = $this->viewChannelInvitationPreferenceRequest($user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewChannelInvitationPreference'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewChannelInvitationPreferenceRequest($user_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewChannelInvitationPreference'
            );
        }

        $resourcePath = '/v3/users/{user_id}/channel_invitation_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrl
     *
     * View count preference of a channel
     *
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20022
     */
    public function viewCountPreferenceOfChannelByUrl($user_id, $channel_url, $api_token = null)
    {
        list($response) = $this->viewCountPreferenceOfChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token);
        return $response;
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlWithHttpInfo
     *
     * View count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewCountPreferenceOfChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token = null)
    {
        $request = $this->viewCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20022' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20022', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlAsync
     *
     * View count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCountPreferenceOfChannelByUrlAsync($user_id, $channel_url, $api_token = null)
    {
        return $this->viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo
     *
     * View count preference of a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCountPreferenceOfChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
        $request = $this->viewCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewCountPreferenceOfChannelByUrl'
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewCountPreferenceOfChannelByUrlRequest($user_id, $channel_url, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewCountPreferenceOfChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewCountPreferenceOfChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/count_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatus
     *
     * View number of channels by join status
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $state state (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20021
     */
    public function viewNumberOfChannelsByJoinStatus($user_id, $api_token = null, $state = null)
    {
        list($response) = $this->viewNumberOfChannelsByJoinStatusWithHttpInfo($user_id, $api_token, $state);
        return $response;
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusWithHttpInfo
     *
     * View number of channels by join status
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $state (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20021, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfChannelsByJoinStatusWithHttpInfo($user_id, $api_token = null, $state = null)
    {
        $request = $this->viewNumberOfChannelsByJoinStatusRequest($user_id, $api_token, $state);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20021' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20021', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20021';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20021',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusAsync
     *
     * View number of channels by join status
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsByJoinStatusAsync($user_id, $api_token = null, $state = null)
    {
        return $this->viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo($user_id, $api_token, $state)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo
     *
     * View number of channels by join status
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsByJoinStatusAsyncWithHttpInfo($user_id, $api_token = null, $state = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20021';
        $request = $this->viewNumberOfChannelsByJoinStatusRequest($user_id, $api_token, $state);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfChannelsByJoinStatus'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $state (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfChannelsByJoinStatusRequest($user_id, $api_token = null, $state = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfChannelsByJoinStatus'
            );
        }

        $resourcePath = '/v3/users/{user_id}/group_channel_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessages
     *
     * View number of channels with unread messages
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string[] $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20019
     */
    public function viewNumberOfChannelsWithUnreadMessages($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewNumberOfChannelsWithUnreadMessagesWithHttpInfo($user_id, $api_token, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesWithHttpInfo
     *
     * View number of channels with unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfChannelsWithUnreadMessagesWithHttpInfo($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewNumberOfChannelsWithUnreadMessagesRequest($user_id, $api_token, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20019' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20019', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20019';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesAsync
     *
     * View number of channels with unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsWithUnreadMessagesAsync($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        return $this->viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo($user_id, $api_token, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo
     *
     * View number of channels with unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfChannelsWithUnreadMessagesAsyncWithHttpInfo($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20019';
        $request = $this->viewNumberOfChannelsWithUnreadMessagesRequest($user_id, $api_token, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfChannelsWithUnreadMessages'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string[] $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfChannelsWithUnreadMessagesRequest($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfChannelsWithUnreadMessages'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_channel_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($super_mode !== null) {
            if('form' === 'form' && is_array($super_mode)) {
                foreach($super_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['super_mode'] = $super_mode;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfUnreadItems
     *
     * View number of unread items
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $custom_type custom_type (optional)
     * @param  string $item_keys item_keys (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20020
     */
    public function viewNumberOfUnreadItems($user_id, $api_token = null, $custom_type = null, $item_keys = null)
    {
        list($response) = $this->viewNumberOfUnreadItemsWithHttpInfo($user_id, $api_token, $custom_type, $item_keys);
        return $response;
    }

    /**
     * Operation viewNumberOfUnreadItemsWithHttpInfo
     *
     * View number of unread items
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20020, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfUnreadItemsWithHttpInfo($user_id, $api_token = null, $custom_type = null, $item_keys = null)
    {
        $request = $this->viewNumberOfUnreadItemsRequest($user_id, $api_token, $custom_type, $item_keys);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20020' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20020', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20020';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20020',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfUnreadItemsAsync
     *
     * View number of unread items
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadItemsAsync($user_id, $api_token = null, $custom_type = null, $item_keys = null)
    {
        return $this->viewNumberOfUnreadItemsAsyncWithHttpInfo($user_id, $api_token, $custom_type, $item_keys)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfUnreadItemsAsyncWithHttpInfo
     *
     * View number of unread items
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadItemsAsyncWithHttpInfo($user_id, $api_token = null, $custom_type = null, $item_keys = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20020';
        $request = $this->viewNumberOfUnreadItemsRequest($user_id, $api_token, $custom_type, $item_keys);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfUnreadItems'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_type (optional)
     * @param  string $item_keys (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfUnreadItemsRequest($user_id, $api_token = null, $custom_type = null, $item_keys = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfUnreadItems'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_item_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($custom_type !== null) {
            if('form' === 'form' && is_array($custom_type)) {
                foreach($custom_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type'] = $custom_type;
            }
        }
        // query params
        if ($item_keys !== null) {
            if('form' === 'form' && is_array($item_keys)) {
                foreach($item_keys as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['item_keys'] = $item_keys;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfUnreadMessages
     *
     * View number of unread messages
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20019
     */
    public function viewNumberOfUnreadMessages($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewNumberOfUnreadMessagesWithHttpInfo($user_id, $api_token, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewNumberOfUnreadMessagesWithHttpInfo
     *
     * View number of unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfUnreadMessagesWithHttpInfo($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewNumberOfUnreadMessagesRequest($user_id, $api_token, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20019' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20019', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20019';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfUnreadMessagesAsync
     *
     * View number of unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadMessagesAsync($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        return $this->viewNumberOfUnreadMessagesAsyncWithHttpInfo($user_id, $api_token, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfUnreadMessagesAsyncWithHttpInfo
     *
     * View number of unread messages
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfUnreadMessagesAsyncWithHttpInfo($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20019';
        $request = $this->viewNumberOfUnreadMessagesRequest($user_id, $api_token, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfUnreadMessages'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfUnreadMessagesRequest($user_id, $api_token = null, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewNumberOfUnreadMessages'
            );
        }

        $resourcePath = '/v3/users/{user_id}/unread_message_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($super_mode !== null) {
            if('form' === 'form' && is_array($super_mode)) {
                foreach($super_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['super_mode'] = $super_mode;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewPushPreferences
     *
     * View push preferences
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20029
     */
    public function viewPushPreferences($user_id, $api_token = null)
    {
        list($response) = $this->viewPushPreferencesWithHttpInfo($user_id, $api_token);
        return $response;
    }

    /**
     * Operation viewPushPreferencesWithHttpInfo
     *
     * View push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewPushPreferencesWithHttpInfo($user_id, $api_token = null)
    {
        $request = $this->viewPushPreferencesRequest($user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20029' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20029', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20029',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewPushPreferencesAsync
     *
     * View push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesAsync($user_id, $api_token = null)
    {
        return $this->viewPushPreferencesAsyncWithHttpInfo($user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewPushPreferencesAsyncWithHttpInfo
     *
     * View push preferences
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesAsyncWithHttpInfo($user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
        $request = $this->viewPushPreferencesRequest($user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewPushPreferences'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewPushPreferencesRequest($user_id, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewPushPreferences'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewPushPreferencesForChannelByUrl
     *
     * View push preferences for a channel
     *
     * @param  string $user_id user_id (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20029
     */
    public function viewPushPreferencesForChannelByUrl($user_id, $channel_url, $api_token = null)
    {
        list($response) = $this->viewPushPreferencesForChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token);
        return $response;
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlWithHttpInfo
     *
     * View push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewPushPreferencesForChannelByUrlWithHttpInfo($user_id, $channel_url, $api_token = null)
    {
        $request = $this->viewPushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20029' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20029', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20029',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlAsync
     *
     * View push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesForChannelByUrlAsync($user_id, $channel_url, $api_token = null)
    {
        return $this->viewPushPreferencesForChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewPushPreferencesForChannelByUrlAsyncWithHttpInfo
     *
     * View push preferences for a channel
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPushPreferencesForChannelByUrlAsyncWithHttpInfo($user_id, $channel_url, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20029';
        $request = $this->viewPushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewPushPreferencesForChannelByUrl'
     *
     * @param  string $user_id (required)
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewPushPreferencesForChannelByUrlRequest($user_id, $channel_url, $api_token = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewPushPreferencesForChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewPushPreferencesForChannelByUrl'
            );
        }

        $resourcePath = '/v3/users/{user_id}/push_preference/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewUserById
     *
     * View a user
     *
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  bool $include_unread_count include_unread_count (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $super_mode super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function viewUserById($user_id, $api_token = null, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        list($response) = $this->viewUserByIdWithHttpInfo($user_id, $api_token, $include_unread_count, $custom_types, $super_mode);
        return $response;
    }

    /**
     * Operation viewUserByIdWithHttpInfo
     *
     * View a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewUserByIdWithHttpInfo($user_id, $api_token = null, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        $request = $this->viewUserByIdRequest($user_id, $api_token, $include_unread_count, $custom_types, $super_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewUserByIdAsync
     *
     * View a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewUserByIdAsync($user_id, $api_token = null, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        return $this->viewUserByIdAsyncWithHttpInfo($user_id, $api_token, $include_unread_count, $custom_types, $super_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewUserByIdAsyncWithHttpInfo
     *
     * View a user
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewUserByIdAsyncWithHttpInfo($user_id, $api_token = null, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->viewUserByIdRequest($user_id, $api_token, $include_unread_count, $custom_types, $super_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewUserById'
     *
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $include_unread_count (optional)
     * @param  string $custom_types (optional)
     * @param  string $super_mode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewUserByIdRequest($user_id, $api_token = null, $include_unread_count = null, $custom_types = null, $super_mode = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling viewUserById'
            );
        }

        $resourcePath = '/v3/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_unread_count !== null) {
            if('form' === 'form' && is_array($include_unread_count)) {
                foreach($include_unread_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_unread_count'] = $include_unread_count;
            }
        }
        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($super_mode !== null) {
            if('form' === 'form' && is_array($super_mode)) {
                foreach($super_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['super_mode'] = $super_mode;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByToken
     *
     * View who owns a registration or device token
     *
     * @param  string $token_type token_type (required)
     * @param  string $token token (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20028
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByToken($token_type, $token, $api_token = null)
    {
        list($response) = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo($token_type, $token, $api_token);
        return $response;
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo
     *
     * View who owns a registration or device token
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20028, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo($token_type, $token, $api_token = null)
    {
        $request = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($token_type, $token, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20028' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20028', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20028';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20028',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenAsync
     *
     * View who owns a registration or device token
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenAsync($token_type, $token, $api_token = null)
    {
        return $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($token_type, $token, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo
     *
     * View who owns a registration or device token
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenAsyncWithHttpInfo($token_type, $token, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20028';
        $request = $this->viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($token_type, $token, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewWhoOwnsRegistrationOrDeviceTokenByToken'
     *
     * @param  string $token_type (required)
     * @param  string $token (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewWhoOwnsRegistrationOrDeviceTokenByTokenRequest($token_type, $token, $api_token = null)
    {
        // verify the required parameter 'token_type' is set
        if ($token_type === null || (is_array($token_type) && count($token_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_type when calling viewWhoOwnsRegistrationOrDeviceTokenByToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling viewWhoOwnsRegistrationOrDeviceTokenByToken'
            );
        }

        $resourcePath = '/v3/push/device_tokens/{token_type}/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($token_type !== null) {
            $resourcePath = str_replace(
                '{' . 'token_type' . '}',
                ObjectSerializer::toPathValue($token_type),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
