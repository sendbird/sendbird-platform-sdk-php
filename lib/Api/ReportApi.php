<?php
/**
 * ReportApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sendbird\ApiException;
use Sendbird\Configuration;
use Sendbird\HeaderSelector;
use Sendbird\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listReports
     *
     * List reports
     *
     * @param  string $api_token api_token (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  int $start_ts start_ts (optional)
     * @param  int $end_ts end_ts (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListReportsResponse
     */
    public function listReports($api_token, $token = null, $limit = null, $start_ts = null, $end_ts = null)
    {
        list($response) = $this->listReportsWithHttpInfo($api_token, $token, $limit, $start_ts, $end_ts);
        return $response;
    }

    /**
     * Operation listReportsWithHttpInfo
     *
     * List reports
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  int $start_ts (optional)
     * @param  int $end_ts (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListReportsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsWithHttpInfo($api_token, $token = null, $limit = null, $start_ts = null, $end_ts = null)
    {
        $request = $this->listReportsRequest($api_token, $token, $limit, $start_ts, $end_ts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListReportsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListReportsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListReportsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListReportsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListReportsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listReportsAsync
     *
     * List reports
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  int $start_ts (optional)
     * @param  int $end_ts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsAsync($api_token, $token = null, $limit = null, $start_ts = null, $end_ts = null)
    {
        return $this->listReportsAsyncWithHttpInfo($api_token, $token, $limit, $start_ts, $end_ts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReportsAsyncWithHttpInfo
     *
     * List reports
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  int $start_ts (optional)
     * @param  int $end_ts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsAsyncWithHttpInfo($api_token, $token = null, $limit = null, $start_ts = null, $end_ts = null)
    {
        $returnType = '\Sendbird\Model\ListReportsResponse';
        $request = $this->listReportsRequest($api_token, $token, $limit, $start_ts, $end_ts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReports'
     *
     * @param  string $api_token (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  int $start_ts (optional)
     * @param  int $end_ts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReportsRequest($api_token, $token = null, $limit = null, $start_ts = null, $end_ts = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listReports'
            );
        }

        $resourcePath = '/v3/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_ts,
            'start_ts', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_ts,
            'end_ts', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReportsOnChannelByUrl
     *
     * List reports on a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListReportsOnChannelByUrlResponse
     */
    public function listReportsOnChannelByUrl($api_token, $channel_type, $channel_url, $token = null, $limit = null)
    {
        list($response) = $this->listReportsOnChannelByUrlWithHttpInfo($api_token, $channel_type, $channel_url, $token, $limit);
        return $response;
    }

    /**
     * Operation listReportsOnChannelByUrlWithHttpInfo
     *
     * List reports on a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListReportsOnChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsOnChannelByUrlWithHttpInfo($api_token, $channel_type, $channel_url, $token = null, $limit = null)
    {
        $request = $this->listReportsOnChannelByUrlRequest($api_token, $channel_type, $channel_url, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListReportsOnChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListReportsOnChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListReportsOnChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListReportsOnChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListReportsOnChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listReportsOnChannelByUrlAsync
     *
     * List reports on a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnChannelByUrlAsync($api_token, $channel_type, $channel_url, $token = null, $limit = null)
    {
        return $this->listReportsOnChannelByUrlAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReportsOnChannelByUrlAsyncWithHttpInfo
     *
     * List reports on a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnChannelByUrlAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $token = null, $limit = null)
    {
        $returnType = '\Sendbird\Model\ListReportsOnChannelByUrlResponse';
        $request = $this->listReportsOnChannelByUrlRequest($api_token, $channel_type, $channel_url, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReportsOnChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReportsOnChannelByUrlRequest($api_token, $channel_type, $channel_url, $token = null, $limit = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listReportsOnChannelByUrl'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling listReportsOnChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling listReportsOnChannelByUrl'
            );
        }

        $resourcePath = '/v3/report/{channel_type}/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReportsOnMessageById
     *
     * List reports on a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListReportsOnMessageByIdResponse
     */
    public function listReportsOnMessageById($api_token, $channel_type, $channel_url, $message_id, $token = null, $limit = null)
    {
        list($response) = $this->listReportsOnMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $token, $limit);
        return $response;
    }

    /**
     * Operation listReportsOnMessageByIdWithHttpInfo
     *
     * List reports on a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListReportsOnMessageByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsOnMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $token = null, $limit = null)
    {
        $request = $this->listReportsOnMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListReportsOnMessageByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListReportsOnMessageByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListReportsOnMessageByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListReportsOnMessageByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListReportsOnMessageByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listReportsOnMessageByIdAsync
     *
     * List reports on a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id, $token = null, $limit = null)
    {
        return $this->listReportsOnMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReportsOnMessageByIdAsyncWithHttpInfo
     *
     * List reports on a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $token = null, $limit = null)
    {
        $returnType = '\Sendbird\Model\ListReportsOnMessageByIdResponse';
        $request = $this->listReportsOnMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReportsOnMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReportsOnMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $token = null, $limit = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listReportsOnMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling listReportsOnMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling listReportsOnMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling listReportsOnMessageById'
            );
        }

        $resourcePath = '/v3/report/{channel_type}/{channel_url}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReportsOnUserById
     *
     * List reports on a user
     *
     * @param  string $api_token api_token (required)
     * @param  string $offending_user_id offending_user_id (required)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ListReportsOnUserByIdResponse
     */
    public function listReportsOnUserById($api_token, $offending_user_id, $token = null, $limit = null)
    {
        list($response) = $this->listReportsOnUserByIdWithHttpInfo($api_token, $offending_user_id, $token, $limit);
        return $response;
    }

    /**
     * Operation listReportsOnUserByIdWithHttpInfo
     *
     * List reports on a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ListReportsOnUserByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsOnUserByIdWithHttpInfo($api_token, $offending_user_id, $token = null, $limit = null)
    {
        $request = $this->listReportsOnUserByIdRequest($api_token, $offending_user_id, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ListReportsOnUserByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ListReportsOnUserByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ListReportsOnUserByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ListReportsOnUserByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ListReportsOnUserByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listReportsOnUserByIdAsync
     *
     * List reports on a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnUserByIdAsync($api_token, $offending_user_id, $token = null, $limit = null)
    {
        return $this->listReportsOnUserByIdAsyncWithHttpInfo($api_token, $offending_user_id, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReportsOnUserByIdAsyncWithHttpInfo
     *
     * List reports on a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsOnUserByIdAsyncWithHttpInfo($api_token, $offending_user_id, $token = null, $limit = null)
    {
        $returnType = '\Sendbird\Model\ListReportsOnUserByIdResponse';
        $request = $this->listReportsOnUserByIdRequest($api_token, $offending_user_id, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReportsOnUserById'
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReportsOnUserByIdRequest($api_token, $offending_user_id, $token = null, $limit = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling listReportsOnUserById'
            );
        }
        // verify the required parameter 'offending_user_id' is set
        if ($offending_user_id === null || (is_array($offending_user_id) && count($offending_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offending_user_id when calling listReportsOnUserById'
            );
        }

        $resourcePath = '/v3/report/users/{offending_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($offending_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offending_user_id' . '}',
                ObjectSerializer::toPathValue($offending_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportChannelByUrl
     *
     * Report a channel
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  \Sendbird\Model\ReportChannelByUrlData $report_channel_by_url_data report_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ReportChannelByUrlResponse
     */
    public function reportChannelByUrl($api_token, $channel_type, $channel_url, $report_channel_by_url_data = null)
    {
        list($response) = $this->reportChannelByUrlWithHttpInfo($api_token, $channel_type, $channel_url, $report_channel_by_url_data);
        return $response;
    }

    /**
     * Operation reportChannelByUrlWithHttpInfo
     *
     * Report a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\ReportChannelByUrlData $report_channel_by_url_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ReportChannelByUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportChannelByUrlWithHttpInfo($api_token, $channel_type, $channel_url, $report_channel_by_url_data = null)
    {
        $request = $this->reportChannelByUrlRequest($api_token, $channel_type, $channel_url, $report_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ReportChannelByUrlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ReportChannelByUrlResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ReportChannelByUrlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ReportChannelByUrlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ReportChannelByUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportChannelByUrlAsync
     *
     * Report a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\ReportChannelByUrlData $report_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportChannelByUrlAsync($api_token, $channel_type, $channel_url, $report_channel_by_url_data = null)
    {
        return $this->reportChannelByUrlAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $report_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportChannelByUrlAsyncWithHttpInfo
     *
     * Report a channel
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\ReportChannelByUrlData $report_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportChannelByUrlAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $report_channel_by_url_data = null)
    {
        $returnType = '\Sendbird\Model\ReportChannelByUrlResponse';
        $request = $this->reportChannelByUrlRequest($api_token, $channel_type, $channel_url, $report_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportChannelByUrl'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  \Sendbird\Model\ReportChannelByUrlData $report_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportChannelByUrlRequest($api_token, $channel_type, $channel_url, $report_channel_by_url_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling reportChannelByUrl'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling reportChannelByUrl'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling reportChannelByUrl'
            );
        }

        $resourcePath = '/v3/report/{channel_type}/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($report_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($report_channel_by_url_data));
            } else {
                $httpBody = $report_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportMessageById
     *
     * Report a message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     * @param  \Sendbird\Model\ReportMessageByIdData $report_message_by_id_data report_message_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ReportMessageByIdResponse
     */
    public function reportMessageById($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data = null)
    {
        list($response) = $this->reportMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data);
        return $response;
    }

    /**
     * Operation reportMessageByIdWithHttpInfo
     *
     * Report a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\ReportMessageByIdData $report_message_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ReportMessageByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data = null)
    {
        $request = $this->reportMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ReportMessageByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ReportMessageByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ReportMessageByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ReportMessageByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ReportMessageByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportMessageByIdAsync
     *
     * Report a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\ReportMessageByIdData $report_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data = null)
    {
        return $this->reportMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportMessageByIdAsyncWithHttpInfo
     *
     * Report a message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\ReportMessageByIdData $report_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data = null)
    {
        $returnType = '\Sendbird\Model\ReportMessageByIdResponse';
        $request = $this->reportMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     * @param  \Sendbird\Model\ReportMessageByIdData $report_message_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id, $report_message_by_id_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling reportMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling reportMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling reportMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling reportMessageById'
            );
        }

        $resourcePath = '/v3/report/{channel_type}/{channel_url}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($report_message_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($report_message_by_id_data));
            } else {
                $httpBody = $report_message_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportUserById
     *
     * Report a user
     *
     * @param  string $api_token api_token (required)
     * @param  string $offending_user_id offending_user_id (required)
     * @param  \Sendbird\Model\ReportUserByIdData $report_user_by_id_data report_user_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ReportUserByIdResponse
     */
    public function reportUserById($api_token, $offending_user_id, $report_user_by_id_data = null)
    {
        list($response) = $this->reportUserByIdWithHttpInfo($api_token, $offending_user_id, $report_user_by_id_data);
        return $response;
    }

    /**
     * Operation reportUserByIdWithHttpInfo
     *
     * Report a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  \Sendbird\Model\ReportUserByIdData $report_user_by_id_data (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ReportUserByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportUserByIdWithHttpInfo($api_token, $offending_user_id, $report_user_by_id_data = null)
    {
        $request = $this->reportUserByIdRequest($api_token, $offending_user_id, $report_user_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ReportUserByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ReportUserByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ReportUserByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ReportUserByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ReportUserByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportUserByIdAsync
     *
     * Report a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  \Sendbird\Model\ReportUserByIdData $report_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportUserByIdAsync($api_token, $offending_user_id, $report_user_by_id_data = null)
    {
        return $this->reportUserByIdAsyncWithHttpInfo($api_token, $offending_user_id, $report_user_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportUserByIdAsyncWithHttpInfo
     *
     * Report a user
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  \Sendbird\Model\ReportUserByIdData $report_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportUserByIdAsyncWithHttpInfo($api_token, $offending_user_id, $report_user_by_id_data = null)
    {
        $returnType = '\Sendbird\Model\ReportUserByIdResponse';
        $request = $this->reportUserByIdRequest($api_token, $offending_user_id, $report_user_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportUserById'
     *
     * @param  string $api_token (required)
     * @param  string $offending_user_id (required)
     * @param  \Sendbird\Model\ReportUserByIdData $report_user_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportUserByIdRequest($api_token, $offending_user_id, $report_user_by_id_data = null)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling reportUserById'
            );
        }
        // verify the required parameter 'offending_user_id' is set
        if ($offending_user_id === null || (is_array($offending_user_id) && count($offending_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offending_user_id when calling reportUserById'
            );
        }

        $resourcePath = '/v3/report/users/{offending_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($offending_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offending_user_id' . '}',
                ObjectSerializer::toPathValue($offending_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($report_user_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($report_user_by_id_data));
            } else {
                $httpBody = $report_user_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewModeratedMessageById
     *
     * View a moderated message
     *
     * @param  string $api_token api_token (required)
     * @param  string $channel_type channel_type (required)
     * @param  string $channel_url channel_url (required)
     * @param  string $message_id message_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function viewModeratedMessageById($api_token, $channel_type, $channel_url, $message_id)
    {
        list($response) = $this->viewModeratedMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id);
        return $response;
    }

    /**
     * Operation viewModeratedMessageByIdWithHttpInfo
     *
     * View a moderated message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewModeratedMessageByIdWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
    {
        $request = $this->viewModeratedMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewModeratedMessageByIdAsync
     *
     * View a moderated message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewModeratedMessageByIdAsync($api_token, $channel_type, $channel_url, $message_id)
    {
        return $this->viewModeratedMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewModeratedMessageByIdAsyncWithHttpInfo
     *
     * View a moderated message
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewModeratedMessageByIdAsyncWithHttpInfo($api_token, $channel_type, $channel_url, $message_id)
    {
        $returnType = 'object';
        $request = $this->viewModeratedMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewModeratedMessageById'
     *
     * @param  string $api_token (required)
     * @param  string $channel_type (required)
     * @param  string $channel_url (required)
     * @param  string $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewModeratedMessageByIdRequest($api_token, $channel_type, $channel_url, $message_id)
    {
        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewModeratedMessageById'
            );
        }
        // verify the required parameter 'channel_type' is set
        if ($channel_type === null || (is_array($channel_type) && count($channel_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_type when calling viewModeratedMessageById'
            );
        }
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling viewModeratedMessageById'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling viewModeratedMessageById'
            );
        }

        $resourcePath = '/v3/report/{channel_type}/{channel_url}/profanity_messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_type !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_type' . '}',
                ObjectSerializer::toPathValue($channel_type),
                $resourcePath
            );
        }
        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
