<?php
/**
 * StatisticsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sendbird\ApiException;
use Sendbird\Configuration;
use Sendbird\HeaderSelector;
use Sendbird\ObjectSerializer;

/**
 * StatisticsApi Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StatisticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDetailedOpenRateOfAnnouncementById
     *
     * Get detailed open rate of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     * @param  string $unique_id unique_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse
     */
    public function getDetailedOpenRateOfAnnouncementById($associative_array)
    {
        list($response) = $this->getDetailedOpenRateOfAnnouncementByIdWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation getDetailedOpenRateOfAnnouncementByIdWithHttpInfo
     *
     * Get detailed open rate of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailedOpenRateOfAnnouncementByIdWithHttpInfo($associative_array)
    {
        $request = $this->getDetailedOpenRateOfAnnouncementByIdRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailedOpenRateOfAnnouncementByIdAsync
     *
     * Get detailed open rate of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedOpenRateOfAnnouncementByIdAsync($associative_array)
    {
        return $this->getDetailedOpenRateOfAnnouncementByIdAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailedOpenRateOfAnnouncementByIdAsyncWithHttpInfo
     *
     * Get detailed open rate of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedOpenRateOfAnnouncementByIdAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\GetDetailedOpenRateOfAnnouncementByIdResponse';
        $request = $this->getDetailedOpenRateOfAnnouncementByIdRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailedOpenRateOfAnnouncementById'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailedOpenRateOfAnnouncementByIdRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;
        $unique_id = array_key_exists('unique_id', $associative_array) ? $associative_array['unique_id'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling getDetailedOpenRateOfAnnouncementById'
            );
        }
        // verify the required parameter 'unique_id' is set
        if ($unique_id === null || (is_array($unique_id) && count($unique_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unique_id when calling getDetailedOpenRateOfAnnouncementById'
            );
        }

        $resourcePath = '/v3/announcement_open_rate/{unique_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($unique_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unique_id' . '}',
                ObjectSerializer::toPathValue($unique_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailedOpenStatusOfAnnouncementById
     *
     * Get detailed open status of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     * @param  string $unique_id unique_id (required)
     * @param  int $limit limit (optional)
     * @param  string $next next (optional)
     * @param  string[] $unique_ids unique_ids (optional)
     * @param  string[] $channel_urls channel_urls (optional)
     * @param  bool $has_opened has_opened (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse
     */
    public function getDetailedOpenStatusOfAnnouncementById($associative_array)
    {
        list($response) = $this->getDetailedOpenStatusOfAnnouncementByIdWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation getDetailedOpenStatusOfAnnouncementByIdWithHttpInfo
     *
     * Get detailed open status of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     * @param  int $limit (optional)
     * @param  string $next (optional)
     * @param  string[] $unique_ids (optional)
     * @param  string[] $channel_urls (optional)
     * @param  bool $has_opened (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailedOpenStatusOfAnnouncementByIdWithHttpInfo($associative_array)
    {
        $request = $this->getDetailedOpenStatusOfAnnouncementByIdRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailedOpenStatusOfAnnouncementByIdAsync
     *
     * Get detailed open status of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     * @param  int $limit (optional)
     * @param  string $next (optional)
     * @param  string[] $unique_ids (optional)
     * @param  string[] $channel_urls (optional)
     * @param  bool $has_opened (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedOpenStatusOfAnnouncementByIdAsync($associative_array)
    {
        return $this->getDetailedOpenStatusOfAnnouncementByIdAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailedOpenStatusOfAnnouncementByIdAsyncWithHttpInfo
     *
     * Get detailed open status of an announcement
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     * @param  int $limit (optional)
     * @param  string $next (optional)
     * @param  string[] $unique_ids (optional)
     * @param  string[] $channel_urls (optional)
     * @param  bool $has_opened (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedOpenStatusOfAnnouncementByIdAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\GetDetailedOpenStatusOfAnnouncementByIdResponse';
        $request = $this->getDetailedOpenStatusOfAnnouncementByIdRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailedOpenStatusOfAnnouncementById'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $unique_id (required)
     * @param  int $limit (optional)
     * @param  string $next (optional)
     * @param  string[] $unique_ids (optional)
     * @param  string[] $channel_urls (optional)
     * @param  bool $has_opened (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailedOpenStatusOfAnnouncementByIdRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;
        $unique_id = array_key_exists('unique_id', $associative_array) ? $associative_array['unique_id'] : null;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : null;
        $next = array_key_exists('next', $associative_array) ? $associative_array['next'] : null;
        $unique_ids = array_key_exists('unique_ids', $associative_array) ? $associative_array['unique_ids'] : null;
        $channel_urls = array_key_exists('channel_urls', $associative_array) ? $associative_array['channel_urls'] : null;
        $has_opened = array_key_exists('has_opened', $associative_array) ? $associative_array['has_opened'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling getDetailedOpenStatusOfAnnouncementById'
            );
        }
        // verify the required parameter 'unique_id' is set
        if ($unique_id === null || (is_array($unique_id) && count($unique_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unique_id when calling getDetailedOpenStatusOfAnnouncementById'
            );
        }

        $resourcePath = '/v3/announcement_open_status/{unique_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unique_ids,
            'unique_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_urls,
            'channel_urls', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_opened,
            'has_opened', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($unique_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unique_id' . '}',
                ObjectSerializer::toPathValue($unique_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAdvancedAnalyticsMetrics
     *
     * Retrieve Advanced analytics metrics
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse
     */
    public function retrieveAdvancedAnalyticsMetrics($associative_array)
    {
        list($response) = $this->retrieveAdvancedAnalyticsMetricsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation retrieveAdvancedAnalyticsMetricsWithHttpInfo
     *
     * Retrieve Advanced analytics metrics
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAdvancedAnalyticsMetricsWithHttpInfo($associative_array)
    {
        $request = $this->retrieveAdvancedAnalyticsMetricsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAdvancedAnalyticsMetricsAsync
     *
     * Retrieve Advanced analytics metrics
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAdvancedAnalyticsMetricsAsync($associative_array)
    {
        return $this->retrieveAdvancedAnalyticsMetricsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAdvancedAnalyticsMetricsAsyncWithHttpInfo
     *
     * Retrieve Advanced analytics metrics
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAdvancedAnalyticsMetricsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\RetrieveAdvancedAnalyticsMetricsResponse';
        $request = $this->retrieveAdvancedAnalyticsMetricsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAdvancedAnalyticsMetrics'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveAdvancedAnalyticsMetricsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling retrieveAdvancedAnalyticsMetrics'
            );
        }

        $resourcePath = '/v3/statistics/metric';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfConcurrentConnections
     *
     * View number of concurrent connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse
     */
    public function viewNumberOfConcurrentConnections($associative_array)
    {
        list($response) = $this->viewNumberOfConcurrentConnectionsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation viewNumberOfConcurrentConnectionsWithHttpInfo
     *
     * View number of concurrent connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfConcurrentConnectionsWithHttpInfo($associative_array)
    {
        $request = $this->viewNumberOfConcurrentConnectionsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfConcurrentConnectionsAsync
     *
     * View number of concurrent connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfConcurrentConnectionsAsync($associative_array)
    {
        return $this->viewNumberOfConcurrentConnectionsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfConcurrentConnectionsAsyncWithHttpInfo
     *
     * View number of concurrent connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfConcurrentConnectionsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfConcurrentConnectionsResponse';
        $request = $this->viewNumberOfConcurrentConnectionsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfConcurrentConnections'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfConcurrentConnectionsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfConcurrentConnections'
            );
        }

        $resourcePath = '/v3/applications/ccu';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfDailyActiveUsers
     *
     * View number of daily active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     * @param  string $date date (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfDailyActiveUsersResponse
     */
    public function viewNumberOfDailyActiveUsers($associative_array)
    {
        list($response) = $this->viewNumberOfDailyActiveUsersWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation viewNumberOfDailyActiveUsersWithHttpInfo
     *
     * View number of daily active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfDailyActiveUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfDailyActiveUsersWithHttpInfo($associative_array)
    {
        $request = $this->viewNumberOfDailyActiveUsersRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfDailyActiveUsersAsync
     *
     * View number of daily active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfDailyActiveUsersAsync($associative_array)
    {
        return $this->viewNumberOfDailyActiveUsersAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfDailyActiveUsersAsyncWithHttpInfo
     *
     * View number of daily active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfDailyActiveUsersAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfDailyActiveUsersResponse';
        $request = $this->viewNumberOfDailyActiveUsersRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfDailyActiveUsers'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfDailyActiveUsersRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;
        $date = array_key_exists('date', $associative_array) ? $associative_array['date'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfDailyActiveUsers'
            );
        }

        $resourcePath = '/v3/applications/dau';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfMonthlyActiveUsers
     *
     * View number of monthly active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     * @param  string $date date (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse
     */
    public function viewNumberOfMonthlyActiveUsers($associative_array)
    {
        list($response) = $this->viewNumberOfMonthlyActiveUsersWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation viewNumberOfMonthlyActiveUsersWithHttpInfo
     *
     * View number of monthly active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfMonthlyActiveUsersWithHttpInfo($associative_array)
    {
        $request = $this->viewNumberOfMonthlyActiveUsersRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfMonthlyActiveUsersAsync
     *
     * View number of monthly active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfMonthlyActiveUsersAsync($associative_array)
    {
        return $this->viewNumberOfMonthlyActiveUsersAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfMonthlyActiveUsersAsyncWithHttpInfo
     *
     * View number of monthly active users
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfMonthlyActiveUsersAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfMonthlyActiveUsersResponse';
        $request = $this->viewNumberOfMonthlyActiveUsersRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfMonthlyActiveUsers'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfMonthlyActiveUsersRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;
        $date = array_key_exists('date', $associative_array) ? $associative_array['date'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfMonthlyActiveUsers'
            );
        }

        $resourcePath = '/v3/applications/mau';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewNumberOfPeakConnections
     *
     * View number of peak connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token api_token (required)
     * @param  string $time_dimension time_dimension (required)
     * @param  int $start_year start_year (required)
     * @param  int $start_month start_month (required)
     * @param  int $end_year end_year (required)
     * @param  int $end_month end_month (required)
     * @param  int $start_day start_day (optional)
     * @param  int $end_day end_day (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sendbird\Model\ViewNumberOfPeakConnectionsResponse
     */
    public function viewNumberOfPeakConnections($associative_array)
    {
        list($response) = $this->viewNumberOfPeakConnectionsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation viewNumberOfPeakConnectionsWithHttpInfo
     *
     * View number of peak connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $time_dimension (required)
     * @param  int $start_year (required)
     * @param  int $start_month (required)
     * @param  int $end_year (required)
     * @param  int $end_month (required)
     * @param  int $start_day (optional)
     * @param  int $end_day (optional)
     *
     * @throws \Sendbird\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sendbird\Model\ViewNumberOfPeakConnectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewNumberOfPeakConnectionsWithHttpInfo($associative_array)
    {
        $request = $this->viewNumberOfPeakConnectionsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Sendbird\Model\ViewNumberOfPeakConnectionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sendbird\Model\ViewNumberOfPeakConnectionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sendbird\Model\ViewNumberOfPeakConnectionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sendbird\Model\ViewNumberOfPeakConnectionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sendbird\Model\ViewNumberOfPeakConnectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewNumberOfPeakConnectionsAsync
     *
     * View number of peak connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $time_dimension (required)
     * @param  int $start_year (required)
     * @param  int $start_month (required)
     * @param  int $end_year (required)
     * @param  int $end_month (required)
     * @param  int $start_day (optional)
     * @param  int $end_day (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfPeakConnectionsAsync($associative_array)
    {
        return $this->viewNumberOfPeakConnectionsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewNumberOfPeakConnectionsAsyncWithHttpInfo
     *
     * View number of peak connections
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $time_dimension (required)
     * @param  int $start_year (required)
     * @param  int $start_month (required)
     * @param  int $end_year (required)
     * @param  int $end_month (required)
     * @param  int $start_day (optional)
     * @param  int $end_day (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewNumberOfPeakConnectionsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\Sendbird\Model\ViewNumberOfPeakConnectionsResponse';
        $request = $this->viewNumberOfPeakConnectionsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewNumberOfPeakConnections'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $api_token (required)
     * @param  string $time_dimension (required)
     * @param  int $start_year (required)
     * @param  int $start_month (required)
     * @param  int $end_year (required)
     * @param  int $end_month (required)
     * @param  int $start_day (optional)
     * @param  int $end_day (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewNumberOfPeakConnectionsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $api_token = array_key_exists('api_token', $associative_array) ? $associative_array['api_token'] : null;
        $time_dimension = array_key_exists('time_dimension', $associative_array) ? $associative_array['time_dimension'] : null;
        $start_year = array_key_exists('start_year', $associative_array) ? $associative_array['start_year'] : null;
        $start_month = array_key_exists('start_month', $associative_array) ? $associative_array['start_month'] : null;
        $end_year = array_key_exists('end_year', $associative_array) ? $associative_array['end_year'] : null;
        $end_month = array_key_exists('end_month', $associative_array) ? $associative_array['end_month'] : null;
        $start_day = array_key_exists('start_day', $associative_array) ? $associative_array['start_day'] : null;
        $end_day = array_key_exists('end_day', $associative_array) ? $associative_array['end_day'] : null;

        // verify the required parameter 'api_token' is set
        if ($api_token === null || (is_array($api_token) && count($api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_token when calling viewNumberOfPeakConnections'
            );
        }
        // verify the required parameter 'time_dimension' is set
        if ($time_dimension === null || (is_array($time_dimension) && count($time_dimension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_dimension when calling viewNumberOfPeakConnections'
            );
        }
        // verify the required parameter 'start_year' is set
        if ($start_year === null || (is_array($start_year) && count($start_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_year when calling viewNumberOfPeakConnections'
            );
        }
        // verify the required parameter 'start_month' is set
        if ($start_month === null || (is_array($start_month) && count($start_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_month when calling viewNumberOfPeakConnections'
            );
        }
        // verify the required parameter 'end_year' is set
        if ($end_year === null || (is_array($end_year) && count($end_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_year when calling viewNumberOfPeakConnections'
            );
        }
        // verify the required parameter 'end_month' is set
        if ($end_month === null || (is_array($end_month) && count($end_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_month when calling viewNumberOfPeakConnections'
            );
        }

        $resourcePath = '/v3/applications/peak_connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_dimension,
            'time_dimension', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_year,
            'start_year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_month,
            'start_month', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_year,
            'end_year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_month,
            'end_month', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_day,
            'start_day', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_day,
            'end_day', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
