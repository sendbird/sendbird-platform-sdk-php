<?php
/**
 * GroupChannelApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GroupChannelApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupChannelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation gcAcceptInvitation
     *
     * Accept an invitation
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcAcceptInvitationData $gc_accept_invitation_data gc_accept_invitation_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcAcceptInvitation($channel_url, $api_token = null, $gc_accept_invitation_data = null)
    {
        list($response) = $this->gcAcceptInvitationWithHttpInfo($channel_url, $api_token, $gc_accept_invitation_data);
        return $response;
    }

    /**
     * Operation gcAcceptInvitationWithHttpInfo
     *
     * Accept an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcAcceptInvitationData $gc_accept_invitation_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcAcceptInvitationWithHttpInfo($channel_url, $api_token = null, $gc_accept_invitation_data = null)
    {
        $request = $this->gcAcceptInvitationRequest($channel_url, $api_token, $gc_accept_invitation_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcAcceptInvitationAsync
     *
     * Accept an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcAcceptInvitationData $gc_accept_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcAcceptInvitationAsync($channel_url, $api_token = null, $gc_accept_invitation_data = null)
    {
        return $this->gcAcceptInvitationAsyncWithHttpInfo($channel_url, $api_token, $gc_accept_invitation_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcAcceptInvitationAsyncWithHttpInfo
     *
     * Accept an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcAcceptInvitationData $gc_accept_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcAcceptInvitationAsyncWithHttpInfo($channel_url, $api_token = null, $gc_accept_invitation_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcAcceptInvitationRequest($channel_url, $api_token, $gc_accept_invitation_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcAcceptInvitation'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcAcceptInvitationData $gc_accept_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcAcceptInvitationRequest($channel_url, $api_token = null, $gc_accept_invitation_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcAcceptInvitation'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_accept_invitation_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_accept_invitation_data));
            } else {
                $httpBody = $gc_accept_invitation_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcBanUser
     *
     * Ban a user
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcBanUserData $gc_ban_user_data gc_ban_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20034BannedList
     */
    public function gcBanUser($channel_url, $api_token = null, $gc_ban_user_data = null)
    {
        list($response) = $this->gcBanUserWithHttpInfo($channel_url, $api_token, $gc_ban_user_data);
        return $response;
    }

    /**
     * Operation gcBanUserWithHttpInfo
     *
     * Ban a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcBanUserData $gc_ban_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20034BannedList, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcBanUserWithHttpInfo($channel_url, $api_token = null, $gc_ban_user_data = null)
    {
        $request = $this->gcBanUserRequest($channel_url, $api_token, $gc_ban_user_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20034BannedList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20034BannedList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20034BannedList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20034BannedList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcBanUserAsync
     *
     * Ban a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcBanUserData $gc_ban_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcBanUserAsync($channel_url, $api_token = null, $gc_ban_user_data = null)
    {
        return $this->gcBanUserAsyncWithHttpInfo($channel_url, $api_token, $gc_ban_user_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcBanUserAsyncWithHttpInfo
     *
     * Ban a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcBanUserData $gc_ban_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcBanUserAsyncWithHttpInfo($channel_url, $api_token = null, $gc_ban_user_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20034BannedList';
        $request = $this->gcBanUserRequest($channel_url, $api_token, $gc_ban_user_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcBanUser'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcBanUserData $gc_ban_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcBanUserRequest($channel_url, $api_token = null, $gc_ban_user_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcBanUser'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/ban';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_ban_user_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_ban_user_data));
            } else {
                $httpBody = $gc_ban_user_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcCancelTheRegistrationOfOperators
     *
     * Cancel the registration of operators
     *
     * @param  string $channel_url channel_url (required)
     * @param  string[] $operator_ids operator_ids (required)
     * @param  string $api_token api_token (optional)
     * @param  bool $delete_all delete_all (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcCancelTheRegistrationOfOperators($channel_url, $operator_ids, $api_token = null, $delete_all = null)
    {
        $this->gcCancelTheRegistrationOfOperatorsWithHttpInfo($channel_url, $operator_ids, $api_token, $delete_all);
    }

    /**
     * Operation gcCancelTheRegistrationOfOperatorsWithHttpInfo
     *
     * Cancel the registration of operators
     *
     * @param  string $channel_url (required)
     * @param  string[] $operator_ids (required)
     * @param  string $api_token (optional)
     * @param  bool $delete_all (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcCancelTheRegistrationOfOperatorsWithHttpInfo($channel_url, $operator_ids, $api_token = null, $delete_all = null)
    {
        $request = $this->gcCancelTheRegistrationOfOperatorsRequest($channel_url, $operator_ids, $api_token, $delete_all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcCancelTheRegistrationOfOperatorsAsync
     *
     * Cancel the registration of operators
     *
     * @param  string $channel_url (required)
     * @param  string[] $operator_ids (required)
     * @param  string $api_token (optional)
     * @param  bool $delete_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCancelTheRegistrationOfOperatorsAsync($channel_url, $operator_ids, $api_token = null, $delete_all = null)
    {
        return $this->gcCancelTheRegistrationOfOperatorsAsyncWithHttpInfo($channel_url, $operator_ids, $api_token, $delete_all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcCancelTheRegistrationOfOperatorsAsyncWithHttpInfo
     *
     * Cancel the registration of operators
     *
     * @param  string $channel_url (required)
     * @param  string[] $operator_ids (required)
     * @param  string $api_token (optional)
     * @param  bool $delete_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCancelTheRegistrationOfOperatorsAsyncWithHttpInfo($channel_url, $operator_ids, $api_token = null, $delete_all = null)
    {
        $returnType = '';
        $request = $this->gcCancelTheRegistrationOfOperatorsRequest($channel_url, $operator_ids, $api_token, $delete_all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcCancelTheRegistrationOfOperators'
     *
     * @param  string $channel_url (required)
     * @param  string[] $operator_ids (required)
     * @param  string $api_token (optional)
     * @param  bool $delete_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcCancelTheRegistrationOfOperatorsRequest($channel_url, $operator_ids, $api_token = null, $delete_all = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcCancelTheRegistrationOfOperators'
            );
        }
        // verify the required parameter 'operator_ids' is set
        if ($operator_ids === null || (is_array($operator_ids) && count($operator_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_ids when calling gcCancelTheRegistrationOfOperators'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/operators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($operator_ids !== null) {
            if('form' === 'form' && is_array($operator_ids)) {
                foreach($operator_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operator_ids'] = $operator_ids;
            }
        }
        // query params
        if ($delete_all !== null) {
            if('form' === 'form' && is_array($delete_all)) {
                foreach($delete_all as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delete_all'] = $delete_all;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcCheckIfMemberById
     *
     * Check if member
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20038
     */
    public function gcCheckIfMemberById($channel_url, $user_id, $api_token = null)
    {
        list($response) = $this->gcCheckIfMemberByIdWithHttpInfo($channel_url, $user_id, $api_token);
        return $response;
    }

    /**
     * Operation gcCheckIfMemberByIdWithHttpInfo
     *
     * Check if member
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20038, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcCheckIfMemberByIdWithHttpInfo($channel_url, $user_id, $api_token = null)
    {
        $request = $this->gcCheckIfMemberByIdRequest($channel_url, $user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20038' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20038', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20038';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20038',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcCheckIfMemberByIdAsync
     *
     * Check if member
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCheckIfMemberByIdAsync($channel_url, $user_id, $api_token = null)
    {
        return $this->gcCheckIfMemberByIdAsyncWithHttpInfo($channel_url, $user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcCheckIfMemberByIdAsyncWithHttpInfo
     *
     * Check if member
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCheckIfMemberByIdAsyncWithHttpInfo($channel_url, $user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20038';
        $request = $this->gcCheckIfMemberByIdRequest($channel_url, $user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcCheckIfMemberById'
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcCheckIfMemberByIdRequest($channel_url, $user_id, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcCheckIfMemberById'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling gcCheckIfMemberById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/members/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcCreateChannel
     *
     * Create a channel
     *
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcCreateChannelData $gc_create_channel_data gc_create_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcCreateChannel($api_token = null, $gc_create_channel_data = null)
    {
        list($response) = $this->gcCreateChannelWithHttpInfo($api_token, $gc_create_channel_data);
        return $response;
    }

    /**
     * Operation gcCreateChannelWithHttpInfo
     *
     * Create a channel
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcCreateChannelData $gc_create_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcCreateChannelWithHttpInfo($api_token = null, $gc_create_channel_data = null)
    {
        $request = $this->gcCreateChannelRequest($api_token, $gc_create_channel_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcCreateChannelAsync
     *
     * Create a channel
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcCreateChannelData $gc_create_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCreateChannelAsync($api_token = null, $gc_create_channel_data = null)
    {
        return $this->gcCreateChannelAsyncWithHttpInfo($api_token, $gc_create_channel_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcCreateChannelAsyncWithHttpInfo
     *
     * Create a channel
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcCreateChannelData $gc_create_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcCreateChannelAsyncWithHttpInfo($api_token = null, $gc_create_channel_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcCreateChannelRequest($api_token, $gc_create_channel_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcCreateChannel'
     *
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcCreateChannelData $gc_create_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcCreateChannelRequest($api_token = null, $gc_create_channel_data = null)
    {

        $resourcePath = '/v3/group_channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_create_channel_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_create_channel_data));
            } else {
                $httpBody = $gc_create_channel_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcDeclineInvitation
     *
     * Decline an invitation
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcDeclineInvitationData $gc_decline_invitation_data gc_decline_invitation_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcDeclineInvitation($channel_url, $api_token = null, $gc_decline_invitation_data = null)
    {
        $this->gcDeclineInvitationWithHttpInfo($channel_url, $api_token, $gc_decline_invitation_data);
    }

    /**
     * Operation gcDeclineInvitationWithHttpInfo
     *
     * Decline an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcDeclineInvitationData $gc_decline_invitation_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcDeclineInvitationWithHttpInfo($channel_url, $api_token = null, $gc_decline_invitation_data = null)
    {
        $request = $this->gcDeclineInvitationRequest($channel_url, $api_token, $gc_decline_invitation_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcDeclineInvitationAsync
     *
     * Decline an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcDeclineInvitationData $gc_decline_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcDeclineInvitationAsync($channel_url, $api_token = null, $gc_decline_invitation_data = null)
    {
        return $this->gcDeclineInvitationAsyncWithHttpInfo($channel_url, $api_token, $gc_decline_invitation_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcDeclineInvitationAsyncWithHttpInfo
     *
     * Decline an invitation
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcDeclineInvitationData $gc_decline_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcDeclineInvitationAsyncWithHttpInfo($channel_url, $api_token = null, $gc_decline_invitation_data = null)
    {
        $returnType = '';
        $request = $this->gcDeclineInvitationRequest($channel_url, $api_token, $gc_decline_invitation_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcDeclineInvitation'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcDeclineInvitationData $gc_decline_invitation_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcDeclineInvitationRequest($channel_url, $api_token = null, $gc_decline_invitation_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcDeclineInvitation'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_decline_invitation_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_decline_invitation_data));
            } else {
                $httpBody = $gc_decline_invitation_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcDeleteChannelByUrl
     *
     * Delete a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcDeleteChannelByUrl($channel_url, $api_token = null)
    {
        $this->gcDeleteChannelByUrlWithHttpInfo($channel_url, $api_token);
    }

    /**
     * Operation gcDeleteChannelByUrlWithHttpInfo
     *
     * Delete a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcDeleteChannelByUrlWithHttpInfo($channel_url, $api_token = null)
    {
        $request = $this->gcDeleteChannelByUrlRequest($channel_url, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcDeleteChannelByUrlAsync
     *
     * Delete a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcDeleteChannelByUrlAsync($channel_url, $api_token = null)
    {
        return $this->gcDeleteChannelByUrlAsyncWithHttpInfo($channel_url, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcDeleteChannelByUrlAsyncWithHttpInfo
     *
     * Delete a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcDeleteChannelByUrlAsyncWithHttpInfo($channel_url, $api_token = null)
    {
        $returnType = '';
        $request = $this->gcDeleteChannelByUrlRequest($channel_url, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcDeleteChannelByUrl'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcDeleteChannelByUrlRequest($channel_url, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcDeleteChannelByUrl'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcFreezeChannel
     *
     * Freeze a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcFreezeChannelData $gc_freeze_channel_data gc_freeze_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcFreezeChannel($channel_url, $api_token = null, $gc_freeze_channel_data = null)
    {
        list($response) = $this->gcFreezeChannelWithHttpInfo($channel_url, $api_token, $gc_freeze_channel_data);
        return $response;
    }

    /**
     * Operation gcFreezeChannelWithHttpInfo
     *
     * Freeze a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcFreezeChannelData $gc_freeze_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcFreezeChannelWithHttpInfo($channel_url, $api_token = null, $gc_freeze_channel_data = null)
    {
        $request = $this->gcFreezeChannelRequest($channel_url, $api_token, $gc_freeze_channel_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcFreezeChannelAsync
     *
     * Freeze a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcFreezeChannelData $gc_freeze_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcFreezeChannelAsync($channel_url, $api_token = null, $gc_freeze_channel_data = null)
    {
        return $this->gcFreezeChannelAsyncWithHttpInfo($channel_url, $api_token, $gc_freeze_channel_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcFreezeChannelAsyncWithHttpInfo
     *
     * Freeze a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcFreezeChannelData $gc_freeze_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcFreezeChannelAsyncWithHttpInfo($channel_url, $api_token = null, $gc_freeze_channel_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcFreezeChannelRequest($channel_url, $api_token, $gc_freeze_channel_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcFreezeChannel'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcFreezeChannelData $gc_freeze_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcFreezeChannelRequest($channel_url, $api_token = null, $gc_freeze_channel_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcFreezeChannel'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/freeze';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_freeze_channel_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_freeze_channel_data));
            } else {
                $httpBody = $gc_freeze_channel_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcHideOrArchiveChannel
     *
     * Hide or archive a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcHideOrArchiveChannelData $gc_hide_or_archive_channel_data gc_hide_or_archive_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcHideOrArchiveChannel($channel_url, $api_token = null, $gc_hide_or_archive_channel_data = null)
    {
        $this->gcHideOrArchiveChannelWithHttpInfo($channel_url, $api_token, $gc_hide_or_archive_channel_data);
    }

    /**
     * Operation gcHideOrArchiveChannelWithHttpInfo
     *
     * Hide or archive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcHideOrArchiveChannelData $gc_hide_or_archive_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcHideOrArchiveChannelWithHttpInfo($channel_url, $api_token = null, $gc_hide_or_archive_channel_data = null)
    {
        $request = $this->gcHideOrArchiveChannelRequest($channel_url, $api_token, $gc_hide_or_archive_channel_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcHideOrArchiveChannelAsync
     *
     * Hide or archive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcHideOrArchiveChannelData $gc_hide_or_archive_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcHideOrArchiveChannelAsync($channel_url, $api_token = null, $gc_hide_or_archive_channel_data = null)
    {
        return $this->gcHideOrArchiveChannelAsyncWithHttpInfo($channel_url, $api_token, $gc_hide_or_archive_channel_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcHideOrArchiveChannelAsyncWithHttpInfo
     *
     * Hide or archive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcHideOrArchiveChannelData $gc_hide_or_archive_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcHideOrArchiveChannelAsyncWithHttpInfo($channel_url, $api_token = null, $gc_hide_or_archive_channel_data = null)
    {
        $returnType = '';
        $request = $this->gcHideOrArchiveChannelRequest($channel_url, $api_token, $gc_hide_or_archive_channel_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcHideOrArchiveChannel'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcHideOrArchiveChannelData $gc_hide_or_archive_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcHideOrArchiveChannelRequest($channel_url, $api_token = null, $gc_hide_or_archive_channel_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcHideOrArchiveChannel'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_hide_or_archive_channel_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_hide_or_archive_channel_data));
            } else {
                $httpBody = $gc_hide_or_archive_channel_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcInviteAsMembers
     *
     * Invite as members
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcInviteAsMembersData $gc_invite_as_members_data gc_invite_as_members_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcInviteAsMembers($channel_url, $api_token = null, $gc_invite_as_members_data = null)
    {
        list($response) = $this->gcInviteAsMembersWithHttpInfo($channel_url, $api_token, $gc_invite_as_members_data);
        return $response;
    }

    /**
     * Operation gcInviteAsMembersWithHttpInfo
     *
     * Invite as members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcInviteAsMembersData $gc_invite_as_members_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcInviteAsMembersWithHttpInfo($channel_url, $api_token = null, $gc_invite_as_members_data = null)
    {
        $request = $this->gcInviteAsMembersRequest($channel_url, $api_token, $gc_invite_as_members_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcInviteAsMembersAsync
     *
     * Invite as members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcInviteAsMembersData $gc_invite_as_members_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcInviteAsMembersAsync($channel_url, $api_token = null, $gc_invite_as_members_data = null)
    {
        return $this->gcInviteAsMembersAsyncWithHttpInfo($channel_url, $api_token, $gc_invite_as_members_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcInviteAsMembersAsyncWithHttpInfo
     *
     * Invite as members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcInviteAsMembersData $gc_invite_as_members_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcInviteAsMembersAsyncWithHttpInfo($channel_url, $api_token = null, $gc_invite_as_members_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcInviteAsMembersRequest($channel_url, $api_token, $gc_invite_as_members_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcInviteAsMembers'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcInviteAsMembersData $gc_invite_as_members_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcInviteAsMembersRequest($channel_url, $api_token = null, $gc_invite_as_members_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcInviteAsMembers'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_invite_as_members_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_invite_as_members_data));
            } else {
                $httpBody = $gc_invite_as_members_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcJoinChannel
     *
     * Join a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcJoinChannelData $gc_join_channel_data gc_join_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcJoinChannel($channel_url, $api_token = null, $gc_join_channel_data = null)
    {
        $this->gcJoinChannelWithHttpInfo($channel_url, $api_token, $gc_join_channel_data);
    }

    /**
     * Operation gcJoinChannelWithHttpInfo
     *
     * Join a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcJoinChannelData $gc_join_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcJoinChannelWithHttpInfo($channel_url, $api_token = null, $gc_join_channel_data = null)
    {
        $request = $this->gcJoinChannelRequest($channel_url, $api_token, $gc_join_channel_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcJoinChannelAsync
     *
     * Join a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcJoinChannelData $gc_join_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcJoinChannelAsync($channel_url, $api_token = null, $gc_join_channel_data = null)
    {
        return $this->gcJoinChannelAsyncWithHttpInfo($channel_url, $api_token, $gc_join_channel_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcJoinChannelAsyncWithHttpInfo
     *
     * Join a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcJoinChannelData $gc_join_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcJoinChannelAsyncWithHttpInfo($channel_url, $api_token = null, $gc_join_channel_data = null)
    {
        $returnType = '';
        $request = $this->gcJoinChannelRequest($channel_url, $api_token, $gc_join_channel_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcJoinChannel'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcJoinChannelData $gc_join_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcJoinChannelRequest($channel_url, $api_token = null, $gc_join_channel_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcJoinChannel'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/join';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_join_channel_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_join_channel_data));
            } else {
                $httpBody = $gc_join_channel_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcLeaveChannel
     *
     * Leave a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcLeaveChannelData $gc_leave_channel_data gc_leave_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcLeaveChannel($channel_url, $api_token = null, $gc_leave_channel_data = null)
    {
        $this->gcLeaveChannelWithHttpInfo($channel_url, $api_token, $gc_leave_channel_data);
    }

    /**
     * Operation gcLeaveChannelWithHttpInfo
     *
     * Leave a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcLeaveChannelData $gc_leave_channel_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcLeaveChannelWithHttpInfo($channel_url, $api_token = null, $gc_leave_channel_data = null)
    {
        $request = $this->gcLeaveChannelRequest($channel_url, $api_token, $gc_leave_channel_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcLeaveChannelAsync
     *
     * Leave a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcLeaveChannelData $gc_leave_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcLeaveChannelAsync($channel_url, $api_token = null, $gc_leave_channel_data = null)
    {
        return $this->gcLeaveChannelAsyncWithHttpInfo($channel_url, $api_token, $gc_leave_channel_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcLeaveChannelAsyncWithHttpInfo
     *
     * Leave a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcLeaveChannelData $gc_leave_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcLeaveChannelAsyncWithHttpInfo($channel_url, $api_token = null, $gc_leave_channel_data = null)
    {
        $returnType = '';
        $request = $this->gcLeaveChannelRequest($channel_url, $api_token, $gc_leave_channel_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcLeaveChannel'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcLeaveChannelData $gc_leave_channel_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcLeaveChannelRequest($channel_url, $api_token = null, $gc_leave_channel_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcLeaveChannel'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_leave_channel_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_leave_channel_data));
            } else {
                $httpBody = $gc_leave_channel_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcListBannedUsers
     *
     * List banned users
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20034
     */
    public function gcListBannedUsers($channel_url, $api_token = null, $token = null, $limit = null)
    {
        list($response) = $this->gcListBannedUsersWithHttpInfo($channel_url, $api_token, $token, $limit);
        return $response;
    }

    /**
     * Operation gcListBannedUsersWithHttpInfo
     *
     * List banned users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20034, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcListBannedUsersWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $request = $this->gcListBannedUsersRequest($channel_url, $api_token, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20034' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20034', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20034';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20034',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcListBannedUsersAsync
     *
     * List banned users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListBannedUsersAsync($channel_url, $api_token = null, $token = null, $limit = null)
    {
        return $this->gcListBannedUsersAsyncWithHttpInfo($channel_url, $api_token, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcListBannedUsersAsyncWithHttpInfo
     *
     * List banned users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListBannedUsersAsyncWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20034';
        $request = $this->gcListBannedUsersRequest($channel_url, $api_token, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcListBannedUsers'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcListBannedUsersRequest($channel_url, $api_token = null, $token = null, $limit = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcListBannedUsers'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/ban';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcListChannels
     *
     * List channels
     *
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  string $distinct_mode distinct_mode (optional)
     * @param  string $public_mode public_mode (optional)
     * @param  string $super_mode super_mode (optional)
     * @param  int $created_after created_after (optional)
     * @param  int $created_before created_before (optional)
     * @param  bool $show_empty show_empty (optional)
     * @param  bool $show_member show_member (optional)
     * @param  bool $show_delivery_receipt show_delivery_receipt (optional)
     * @param  bool $show_read_receipt show_read_receipt (optional)
     * @param  bool $show_metadata show_metadata (optional)
     * @param  bool $show_frozen show_frozen (optional)
     * @param  string $order order (optional)
     * @param  string $metadata_order_key metadata_order_key (optional)
     * @param  string $custom_types custom_types (optional)
     * @param  string $custom_type_startswith custom_type_startswith (optional)
     * @param  string $channel_urls channel_urls (optional)
     * @param  string $name name (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_startswith name_startswith (optional)
     * @param  string $members_exactly_in members_exactly_in (optional)
     * @param  string $members_include_in members_include_in (optional)
     * @param  string $query_type query_type (optional)
     * @param  string $members_nickname members_nickname (optional)
     * @param  string $members_nickname_contains members_nickname_contains (optional)
     * @param  string $metadata_key metadata_key (optional)
     * @param  string $metadata_values metadata_values (optional)
     * @param  string $metadata_value_startswith metadata_value_startswith (optional)
     * @param  string $metacounter_key metacounter_key (optional)
     * @param  string $metacounter_values metacounter_values (optional)
     * @param  string $metacounter_value_gt metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte metacounter_value_lte (optional)
     * @param  bool $include_sorted_metaarray_in_last_message include_sorted_metaarray_in_last_message (optional)
     * @param  string $custom_type custom_type (optional)
     * @param  bool $read_receipt read_receipt (optional)
     * @param  bool $member member (optional)
     * @param  bool $is_distinct is_distinct (optional)
     * @param  string $members_in members_in (optional)
     * @param  string $user_id user_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20018
     */
    public function gcListChannels($api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $created_after = null, $created_before = null, $show_empty = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_metadata = null, $show_frozen = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $include_sorted_metaarray_in_last_message = null, $custom_type = null, $read_receipt = null, $member = null, $is_distinct = null, $members_in = null, $user_id = null)
    {
        list($response) = $this->gcListChannelsWithHttpInfo($api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $created_after, $created_before, $show_empty, $show_member, $show_delivery_receipt, $show_read_receipt, $show_metadata, $show_frozen, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $include_sorted_metaarray_in_last_message, $custom_type, $read_receipt, $member, $is_distinct, $members_in, $user_id);
        return $response;
    }

    /**
     * Operation gcListChannelsWithHttpInfo
     *
     * List channels
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_metadata (optional)
     * @param  bool $show_frozen (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  bool $include_sorted_metaarray_in_last_message (optional)
     * @param  string $custom_type (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     * @param  bool $is_distinct (optional)
     * @param  string $members_in (optional)
     * @param  string $user_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcListChannelsWithHttpInfo($api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $created_after = null, $created_before = null, $show_empty = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_metadata = null, $show_frozen = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $include_sorted_metaarray_in_last_message = null, $custom_type = null, $read_receipt = null, $member = null, $is_distinct = null, $members_in = null, $user_id = null)
    {
        $request = $this->gcListChannelsRequest($api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $created_after, $created_before, $show_empty, $show_member, $show_delivery_receipt, $show_read_receipt, $show_metadata, $show_frozen, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $include_sorted_metaarray_in_last_message, $custom_type, $read_receipt, $member, $is_distinct, $members_in, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20018' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20018', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20018';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcListChannelsAsync
     *
     * List channels
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_metadata (optional)
     * @param  bool $show_frozen (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  bool $include_sorted_metaarray_in_last_message (optional)
     * @param  string $custom_type (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     * @param  bool $is_distinct (optional)
     * @param  string $members_in (optional)
     * @param  string $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListChannelsAsync($api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $created_after = null, $created_before = null, $show_empty = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_metadata = null, $show_frozen = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $include_sorted_metaarray_in_last_message = null, $custom_type = null, $read_receipt = null, $member = null, $is_distinct = null, $members_in = null, $user_id = null)
    {
        return $this->gcListChannelsAsyncWithHttpInfo($api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $created_after, $created_before, $show_empty, $show_member, $show_delivery_receipt, $show_read_receipt, $show_metadata, $show_frozen, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $include_sorted_metaarray_in_last_message, $custom_type, $read_receipt, $member, $is_distinct, $members_in, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcListChannelsAsyncWithHttpInfo
     *
     * List channels
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_metadata (optional)
     * @param  bool $show_frozen (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  bool $include_sorted_metaarray_in_last_message (optional)
     * @param  string $custom_type (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     * @param  bool $is_distinct (optional)
     * @param  string $members_in (optional)
     * @param  string $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListChannelsAsyncWithHttpInfo($api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $created_after = null, $created_before = null, $show_empty = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_metadata = null, $show_frozen = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $include_sorted_metaarray_in_last_message = null, $custom_type = null, $read_receipt = null, $member = null, $is_distinct = null, $members_in = null, $user_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20018';
        $request = $this->gcListChannelsRequest($api_token, $token, $limit, $distinct_mode, $public_mode, $super_mode, $created_after, $created_before, $show_empty, $show_member, $show_delivery_receipt, $show_read_receipt, $show_metadata, $show_frozen, $order, $metadata_order_key, $custom_types, $custom_type_startswith, $channel_urls, $name, $name_contains, $name_startswith, $members_exactly_in, $members_include_in, $query_type, $members_nickname, $members_nickname_contains, $metadata_key, $metadata_values, $metadata_value_startswith, $metacounter_key, $metacounter_values, $metacounter_value_gt, $metacounter_value_gte, $metacounter_value_lt, $metacounter_value_lte, $include_sorted_metaarray_in_last_message, $custom_type, $read_receipt, $member, $is_distinct, $members_in, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcListChannels'
     *
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  string $distinct_mode (optional)
     * @param  string $public_mode (optional)
     * @param  string $super_mode (optional)
     * @param  int $created_after (optional)
     * @param  int $created_before (optional)
     * @param  bool $show_empty (optional)
     * @param  bool $show_member (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_metadata (optional)
     * @param  bool $show_frozen (optional)
     * @param  string $order (optional)
     * @param  string $metadata_order_key (optional)
     * @param  string $custom_types (optional)
     * @param  string $custom_type_startswith (optional)
     * @param  string $channel_urls (optional)
     * @param  string $name (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_startswith (optional)
     * @param  string $members_exactly_in (optional)
     * @param  string $members_include_in (optional)
     * @param  string $query_type (optional)
     * @param  string $members_nickname (optional)
     * @param  string $members_nickname_contains (optional)
     * @param  string $metadata_key (optional)
     * @param  string $metadata_values (optional)
     * @param  string $metadata_value_startswith (optional)
     * @param  string $metacounter_key (optional)
     * @param  string $metacounter_values (optional)
     * @param  string $metacounter_value_gt (optional)
     * @param  string $metacounter_value_gte (optional)
     * @param  string $metacounter_value_lt (optional)
     * @param  string $metacounter_value_lte (optional)
     * @param  bool $include_sorted_metaarray_in_last_message (optional)
     * @param  string $custom_type (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     * @param  bool $is_distinct (optional)
     * @param  string $members_in (optional)
     * @param  string $user_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcListChannelsRequest($api_token = null, $token = null, $limit = null, $distinct_mode = null, $public_mode = null, $super_mode = null, $created_after = null, $created_before = null, $show_empty = null, $show_member = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_metadata = null, $show_frozen = null, $order = null, $metadata_order_key = null, $custom_types = null, $custom_type_startswith = null, $channel_urls = null, $name = null, $name_contains = null, $name_startswith = null, $members_exactly_in = null, $members_include_in = null, $query_type = null, $members_nickname = null, $members_nickname_contains = null, $metadata_key = null, $metadata_values = null, $metadata_value_startswith = null, $metacounter_key = null, $metacounter_values = null, $metacounter_value_gt = null, $metacounter_value_gte = null, $metacounter_value_lt = null, $metacounter_value_lte = null, $include_sorted_metaarray_in_last_message = null, $custom_type = null, $read_receipt = null, $member = null, $is_distinct = null, $members_in = null, $user_id = null)
    {

        $resourcePath = '/v3/group_channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($distinct_mode !== null) {
            if('form' === 'form' && is_array($distinct_mode)) {
                foreach($distinct_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['distinct_mode'] = $distinct_mode;
            }
        }
        // query params
        if ($public_mode !== null) {
            if('form' === 'form' && is_array($public_mode)) {
                foreach($public_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['public_mode'] = $public_mode;
            }
        }
        // query params
        if ($super_mode !== null) {
            if('form' === 'form' && is_array($super_mode)) {
                foreach($super_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['super_mode'] = $super_mode;
            }
        }
        // query params
        if ($created_after !== null) {
            if('form' === 'form' && is_array($created_after)) {
                foreach($created_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_after'] = $created_after;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_before'] = $created_before;
            }
        }
        // query params
        if ($show_empty !== null) {
            if('form' === 'form' && is_array($show_empty)) {
                foreach($show_empty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_empty'] = $show_empty;
            }
        }
        // query params
        if ($show_member !== null) {
            if('form' === 'form' && is_array($show_member)) {
                foreach($show_member as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_member'] = $show_member;
            }
        }
        // query params
        if ($show_delivery_receipt !== null) {
            if('form' === 'form' && is_array($show_delivery_receipt)) {
                foreach($show_delivery_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_delivery_receipt'] = $show_delivery_receipt;
            }
        }
        // query params
        if ($show_read_receipt !== null) {
            if('form' === 'form' && is_array($show_read_receipt)) {
                foreach($show_read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_read_receipt'] = $show_read_receipt;
            }
        }
        // query params
        if ($show_metadata !== null) {
            if('form' === 'form' && is_array($show_metadata)) {
                foreach($show_metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_metadata'] = $show_metadata;
            }
        }
        // query params
        if ($show_frozen !== null) {
            if('form' === 'form' && is_array($show_frozen)) {
                foreach($show_frozen as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_frozen'] = $show_frozen;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($metadata_order_key !== null) {
            if('form' === 'form' && is_array($metadata_order_key)) {
                foreach($metadata_order_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_order_key'] = $metadata_order_key;
            }
        }
        // query params
        if ($custom_types !== null) {
            if('form' === 'form' && is_array($custom_types)) {
                foreach($custom_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_types'] = $custom_types;
            }
        }
        // query params
        if ($custom_type_startswith !== null) {
            if('form' === 'form' && is_array($custom_type_startswith)) {
                foreach($custom_type_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type_startswith'] = $custom_type_startswith;
            }
        }
        // query params
        if ($channel_urls !== null) {
            if('form' === 'form' && is_array($channel_urls)) {
                foreach($channel_urls as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_urls'] = $channel_urls;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_contains !== null) {
            if('form' === 'form' && is_array($name_contains)) {
                foreach($name_contains as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_contains'] = $name_contains;
            }
        }
        // query params
        if ($name_startswith !== null) {
            if('form' === 'form' && is_array($name_startswith)) {
                foreach($name_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name_startswith'] = $name_startswith;
            }
        }
        // query params
        if ($members_exactly_in !== null) {
            if('form' === 'form' && is_array($members_exactly_in)) {
                foreach($members_exactly_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_exactly_in'] = $members_exactly_in;
            }
        }
        // query params
        if ($members_include_in !== null) {
            if('form' === 'form' && is_array($members_include_in)) {
                foreach($members_include_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_include_in'] = $members_include_in;
            }
        }
        // query params
        if ($query_type !== null) {
            if('form' === 'form' && is_array($query_type)) {
                foreach($query_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['query_type'] = $query_type;
            }
        }
        // query params
        if ($members_nickname !== null) {
            if('form' === 'form' && is_array($members_nickname)) {
                foreach($members_nickname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_nickname'] = $members_nickname;
            }
        }
        // query params
        if ($members_nickname_contains !== null) {
            if('form' === 'form' && is_array($members_nickname_contains)) {
                foreach($members_nickname_contains as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_nickname_contains'] = $members_nickname_contains;
            }
        }
        // query params
        if ($metadata_key !== null) {
            if('form' === 'form' && is_array($metadata_key)) {
                foreach($metadata_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_key'] = $metadata_key;
            }
        }
        // query params
        if ($metadata_values !== null) {
            if('form' === 'form' && is_array($metadata_values)) {
                foreach($metadata_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_values'] = $metadata_values;
            }
        }
        // query params
        if ($metadata_value_startswith !== null) {
            if('form' === 'form' && is_array($metadata_value_startswith)) {
                foreach($metadata_value_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata_value_startswith'] = $metadata_value_startswith;
            }
        }
        // query params
        if ($metacounter_key !== null) {
            if('form' === 'form' && is_array($metacounter_key)) {
                foreach($metacounter_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_key'] = $metacounter_key;
            }
        }
        // query params
        if ($metacounter_values !== null) {
            if('form' === 'form' && is_array($metacounter_values)) {
                foreach($metacounter_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_values'] = $metacounter_values;
            }
        }
        // query params
        if ($metacounter_value_gt !== null) {
            if('form' === 'form' && is_array($metacounter_value_gt)) {
                foreach($metacounter_value_gt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_gt'] = $metacounter_value_gt;
            }
        }
        // query params
        if ($metacounter_value_gte !== null) {
            if('form' === 'form' && is_array($metacounter_value_gte)) {
                foreach($metacounter_value_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_gte'] = $metacounter_value_gte;
            }
        }
        // query params
        if ($metacounter_value_lt !== null) {
            if('form' === 'form' && is_array($metacounter_value_lt)) {
                foreach($metacounter_value_lt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_lt'] = $metacounter_value_lt;
            }
        }
        // query params
        if ($metacounter_value_lte !== null) {
            if('form' === 'form' && is_array($metacounter_value_lte)) {
                foreach($metacounter_value_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metacounter_value_lte'] = $metacounter_value_lte;
            }
        }
        // query params
        if ($include_sorted_metaarray_in_last_message !== null) {
            if('form' === 'form' && is_array($include_sorted_metaarray_in_last_message)) {
                foreach($include_sorted_metaarray_in_last_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_sorted_metaarray_in_last_message'] = $include_sorted_metaarray_in_last_message;
            }
        }
        // query params
        if ($custom_type !== null) {
            if('form' === 'form' && is_array($custom_type)) {
                foreach($custom_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_type'] = $custom_type;
            }
        }
        // query params
        if ($read_receipt !== null) {
            if('form' === 'form' && is_array($read_receipt)) {
                foreach($read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['read_receipt'] = $read_receipt;
            }
        }
        // query params
        if ($member !== null) {
            if('form' === 'form' && is_array($member)) {
                foreach($member as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['member'] = $member;
            }
        }
        // query params
        if ($is_distinct !== null) {
            if('form' === 'form' && is_array($is_distinct)) {
                foreach($is_distinct as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_distinct'] = $is_distinct;
            }
        }
        // query params
        if ($members_in !== null) {
            if('form' === 'form' && is_array($members_in)) {
                foreach($members_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['members_in'] = $members_in;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcListMembers
     *
     * List members
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     * @param  bool $show_delivery_receipt show_delivery_receipt (optional)
     * @param  bool $show_read_receipt show_read_receipt (optional)
     * @param  string $order order (optional)
     * @param  string $operator_filter operator_filter (optional)
     * @param  string $member_state_filter member_state_filter (optional)
     * @param  string $muted_member_filter muted_member_filter (optional)
     * @param  string $nickname_startswith nickname_startswith (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20037
     */
    public function gcListMembers($channel_url, $api_token = null, $token = null, $limit = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $operator_filter = null, $member_state_filter = null, $muted_member_filter = null, $nickname_startswith = null)
    {
        list($response) = $this->gcListMembersWithHttpInfo($channel_url, $api_token, $token, $limit, $show_delivery_receipt, $show_read_receipt, $order, $operator_filter, $member_state_filter, $muted_member_filter, $nickname_startswith);
        return $response;
    }

    /**
     * Operation gcListMembersWithHttpInfo
     *
     * List members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $operator_filter (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $muted_member_filter (optional)
     * @param  string $nickname_startswith (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20037, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcListMembersWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $operator_filter = null, $member_state_filter = null, $muted_member_filter = null, $nickname_startswith = null)
    {
        $request = $this->gcListMembersRequest($channel_url, $api_token, $token, $limit, $show_delivery_receipt, $show_read_receipt, $order, $operator_filter, $member_state_filter, $muted_member_filter, $nickname_startswith);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20037' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20037', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20037';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20037',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcListMembersAsync
     *
     * List members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $operator_filter (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $muted_member_filter (optional)
     * @param  string $nickname_startswith (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListMembersAsync($channel_url, $api_token = null, $token = null, $limit = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $operator_filter = null, $member_state_filter = null, $muted_member_filter = null, $nickname_startswith = null)
    {
        return $this->gcListMembersAsyncWithHttpInfo($channel_url, $api_token, $token, $limit, $show_delivery_receipt, $show_read_receipt, $order, $operator_filter, $member_state_filter, $muted_member_filter, $nickname_startswith)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcListMembersAsyncWithHttpInfo
     *
     * List members
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $operator_filter (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $muted_member_filter (optional)
     * @param  string $nickname_startswith (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListMembersAsyncWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $operator_filter = null, $member_state_filter = null, $muted_member_filter = null, $nickname_startswith = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20037';
        $request = $this->gcListMembersRequest($channel_url, $api_token, $token, $limit, $show_delivery_receipt, $show_read_receipt, $order, $operator_filter, $member_state_filter, $muted_member_filter, $nickname_startswith);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcListMembers'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  string $order (optional)
     * @param  string $operator_filter (optional)
     * @param  string $member_state_filter (optional)
     * @param  string $muted_member_filter (optional)
     * @param  string $nickname_startswith (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcListMembersRequest($channel_url, $api_token = null, $token = null, $limit = null, $show_delivery_receipt = null, $show_read_receipt = null, $order = null, $operator_filter = null, $member_state_filter = null, $muted_member_filter = null, $nickname_startswith = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcListMembers'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($show_delivery_receipt !== null) {
            if('form' === 'form' && is_array($show_delivery_receipt)) {
                foreach($show_delivery_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_delivery_receipt'] = $show_delivery_receipt;
            }
        }
        // query params
        if ($show_read_receipt !== null) {
            if('form' === 'form' && is_array($show_read_receipt)) {
                foreach($show_read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_read_receipt'] = $show_read_receipt;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($operator_filter !== null) {
            if('form' === 'form' && is_array($operator_filter)) {
                foreach($operator_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operator_filter'] = $operator_filter;
            }
        }
        // query params
        if ($member_state_filter !== null) {
            if('form' === 'form' && is_array($member_state_filter)) {
                foreach($member_state_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['member_state_filter'] = $member_state_filter;
            }
        }
        // query params
        if ($muted_member_filter !== null) {
            if('form' === 'form' && is_array($muted_member_filter)) {
                foreach($muted_member_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['muted_member_filter'] = $muted_member_filter;
            }
        }
        // query params
        if ($nickname_startswith !== null) {
            if('form' === 'form' && is_array($nickname_startswith)) {
                foreach($nickname_startswith as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nickname_startswith'] = $nickname_startswith;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcListMutedUsers
     *
     * List muted users
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20032
     */
    public function gcListMutedUsers($channel_url, $api_token = null, $token = null, $limit = null)
    {
        list($response) = $this->gcListMutedUsersWithHttpInfo($channel_url, $api_token, $token, $limit);
        return $response;
    }

    /**
     * Operation gcListMutedUsersWithHttpInfo
     *
     * List muted users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20032, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcListMutedUsersWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $request = $this->gcListMutedUsersRequest($channel_url, $api_token, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20032' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20032', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20032';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20032',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcListMutedUsersAsync
     *
     * List muted users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListMutedUsersAsync($channel_url, $api_token = null, $token = null, $limit = null)
    {
        return $this->gcListMutedUsersAsyncWithHttpInfo($channel_url, $api_token, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcListMutedUsersAsyncWithHttpInfo
     *
     * List muted users
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListMutedUsersAsyncWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20032';
        $request = $this->gcListMutedUsersRequest($channel_url, $api_token, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcListMutedUsers'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcListMutedUsersRequest($channel_url, $api_token = null, $token = null, $limit = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcListMutedUsers'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/mute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcListOperators
     *
     * List operators
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  string $token token (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20035
     */
    public function gcListOperators($channel_url, $api_token = null, $token = null, $limit = null)
    {
        list($response) = $this->gcListOperatorsWithHttpInfo($channel_url, $api_token, $token, $limit);
        return $response;
    }

    /**
     * Operation gcListOperatorsWithHttpInfo
     *
     * List operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20035, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcListOperatorsWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $request = $this->gcListOperatorsRequest($channel_url, $api_token, $token, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20035' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20035', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20035';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20035',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcListOperatorsAsync
     *
     * List operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListOperatorsAsync($channel_url, $api_token = null, $token = null, $limit = null)
    {
        return $this->gcListOperatorsAsyncWithHttpInfo($channel_url, $api_token, $token, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcListOperatorsAsyncWithHttpInfo
     *
     * List operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcListOperatorsAsyncWithHttpInfo($channel_url, $api_token = null, $token = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20035';
        $request = $this->gcListOperatorsRequest($channel_url, $api_token, $token, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcListOperators'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  string $token (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcListOperatorsRequest($channel_url, $api_token = null, $token = null, $limit = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcListOperators'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/operators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcMuteUser
     *
     * Mute a user
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcMuteUserData $gc_mute_user_data gc_mute_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcMuteUser($channel_url, $api_token = null, $gc_mute_user_data = null)
    {
        list($response) = $this->gcMuteUserWithHttpInfo($channel_url, $api_token, $gc_mute_user_data);
        return $response;
    }

    /**
     * Operation gcMuteUserWithHttpInfo
     *
     * Mute a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcMuteUserData $gc_mute_user_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcMuteUserWithHttpInfo($channel_url, $api_token = null, $gc_mute_user_data = null)
    {
        $request = $this->gcMuteUserRequest($channel_url, $api_token, $gc_mute_user_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcMuteUserAsync
     *
     * Mute a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcMuteUserData $gc_mute_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMuteUserAsync($channel_url, $api_token = null, $gc_mute_user_data = null)
    {
        return $this->gcMuteUserAsyncWithHttpInfo($channel_url, $api_token, $gc_mute_user_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcMuteUserAsyncWithHttpInfo
     *
     * Mute a user
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcMuteUserData $gc_mute_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcMuteUserAsyncWithHttpInfo($channel_url, $api_token = null, $gc_mute_user_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcMuteUserRequest($channel_url, $api_token, $gc_mute_user_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcMuteUser'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcMuteUserData $gc_mute_user_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcMuteUserRequest($channel_url, $api_token = null, $gc_mute_user_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcMuteUser'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/mute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_mute_user_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_mute_user_data));
            } else {
                $httpBody = $gc_mute_user_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcRegisterOperators
     *
     * Register operators
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcRegisterOperatorsData $gc_register_operators_data gc_register_operators_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20039
     */
    public function gcRegisterOperators($channel_url, $api_token = null, $gc_register_operators_data = null)
    {
        list($response) = $this->gcRegisterOperatorsWithHttpInfo($channel_url, $api_token, $gc_register_operators_data);
        return $response;
    }

    /**
     * Operation gcRegisterOperatorsWithHttpInfo
     *
     * Register operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcRegisterOperatorsData $gc_register_operators_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20039, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcRegisterOperatorsWithHttpInfo($channel_url, $api_token = null, $gc_register_operators_data = null)
    {
        $request = $this->gcRegisterOperatorsRequest($channel_url, $api_token, $gc_register_operators_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20039' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20039', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20039';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20039',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcRegisterOperatorsAsync
     *
     * Register operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcRegisterOperatorsData $gc_register_operators_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcRegisterOperatorsAsync($channel_url, $api_token = null, $gc_register_operators_data = null)
    {
        return $this->gcRegisterOperatorsAsyncWithHttpInfo($channel_url, $api_token, $gc_register_operators_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcRegisterOperatorsAsyncWithHttpInfo
     *
     * Register operators
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcRegisterOperatorsData $gc_register_operators_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcRegisterOperatorsAsyncWithHttpInfo($channel_url, $api_token = null, $gc_register_operators_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20039';
        $request = $this->gcRegisterOperatorsRequest($channel_url, $api_token, $gc_register_operators_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcRegisterOperators'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcRegisterOperatorsData $gc_register_operators_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcRegisterOperatorsRequest($channel_url, $api_token = null, $gc_register_operators_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcRegisterOperators'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/operators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_register_operators_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_register_operators_data));
            } else {
                $httpBody = $gc_register_operators_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcResetChatHistory
     *
     * Reset chat history
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcResetChatHistoryData $gc_reset_chat_history_data gc_reset_chat_history_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcResetChatHistory($channel_url, $api_token = null, $gc_reset_chat_history_data = null)
    {
        $this->gcResetChatHistoryWithHttpInfo($channel_url, $api_token, $gc_reset_chat_history_data);
    }

    /**
     * Operation gcResetChatHistoryWithHttpInfo
     *
     * Reset chat history
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcResetChatHistoryData $gc_reset_chat_history_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcResetChatHistoryWithHttpInfo($channel_url, $api_token = null, $gc_reset_chat_history_data = null)
    {
        $request = $this->gcResetChatHistoryRequest($channel_url, $api_token, $gc_reset_chat_history_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcResetChatHistoryAsync
     *
     * Reset chat history
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcResetChatHistoryData $gc_reset_chat_history_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcResetChatHistoryAsync($channel_url, $api_token = null, $gc_reset_chat_history_data = null)
    {
        return $this->gcResetChatHistoryAsyncWithHttpInfo($channel_url, $api_token, $gc_reset_chat_history_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcResetChatHistoryAsyncWithHttpInfo
     *
     * Reset chat history
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcResetChatHistoryData $gc_reset_chat_history_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcResetChatHistoryAsyncWithHttpInfo($channel_url, $api_token = null, $gc_reset_chat_history_data = null)
    {
        $returnType = '';
        $request = $this->gcResetChatHistoryRequest($channel_url, $api_token, $gc_reset_chat_history_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcResetChatHistory'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcResetChatHistoryData $gc_reset_chat_history_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcResetChatHistoryRequest($channel_url, $api_token = null, $gc_reset_chat_history_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcResetChatHistory'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/reset_user_history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_reset_chat_history_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_reset_chat_history_data));
            } else {
                $httpBody = $gc_reset_chat_history_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcUnbanUserById
     *
     * Unban a user
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $banned_user_id banned_user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcUnbanUserById($channel_url, $banned_user_id, $api_token = null)
    {
        $this->gcUnbanUserByIdWithHttpInfo($channel_url, $banned_user_id, $api_token);
    }

    /**
     * Operation gcUnbanUserByIdWithHttpInfo
     *
     * Unban a user
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcUnbanUserByIdWithHttpInfo($channel_url, $banned_user_id, $api_token = null)
    {
        $request = $this->gcUnbanUserByIdRequest($channel_url, $banned_user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcUnbanUserByIdAsync
     *
     * Unban a user
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnbanUserByIdAsync($channel_url, $banned_user_id, $api_token = null)
    {
        return $this->gcUnbanUserByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcUnbanUserByIdAsyncWithHttpInfo
     *
     * Unban a user
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnbanUserByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token = null)
    {
        $returnType = '';
        $request = $this->gcUnbanUserByIdRequest($channel_url, $banned_user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcUnbanUserById'
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcUnbanUserByIdRequest($channel_url, $banned_user_id, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcUnbanUserById'
            );
        }
        // verify the required parameter 'banned_user_id' is set
        if ($banned_user_id === null || (is_array($banned_user_id) && count($banned_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $banned_user_id when calling gcUnbanUserById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/ban/{banned_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($banned_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'banned_user_id' . '}',
                ObjectSerializer::toPathValue($banned_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcUnhideOrUnarchiveChannel
     *
     * Unhide or unarchive a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $user_id user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  bool $should_unhide_all should_unhide_all (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcUnhideOrUnarchiveChannel($channel_url, $user_id, $api_token = null, $should_unhide_all = null)
    {
        $this->gcUnhideOrUnarchiveChannelWithHttpInfo($channel_url, $user_id, $api_token, $should_unhide_all);
    }

    /**
     * Operation gcUnhideOrUnarchiveChannelWithHttpInfo
     *
     * Unhide or unarchive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $should_unhide_all (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcUnhideOrUnarchiveChannelWithHttpInfo($channel_url, $user_id, $api_token = null, $should_unhide_all = null)
    {
        $request = $this->gcUnhideOrUnarchiveChannelRequest($channel_url, $user_id, $api_token, $should_unhide_all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcUnhideOrUnarchiveChannelAsync
     *
     * Unhide or unarchive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $should_unhide_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnhideOrUnarchiveChannelAsync($channel_url, $user_id, $api_token = null, $should_unhide_all = null)
    {
        return $this->gcUnhideOrUnarchiveChannelAsyncWithHttpInfo($channel_url, $user_id, $api_token, $should_unhide_all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcUnhideOrUnarchiveChannelAsyncWithHttpInfo
     *
     * Unhide or unarchive a channel
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $should_unhide_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnhideOrUnarchiveChannelAsyncWithHttpInfo($channel_url, $user_id, $api_token = null, $should_unhide_all = null)
    {
        $returnType = '';
        $request = $this->gcUnhideOrUnarchiveChannelRequest($channel_url, $user_id, $api_token, $should_unhide_all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcUnhideOrUnarchiveChannel'
     *
     * @param  string $channel_url (required)
     * @param  string $user_id (required)
     * @param  string $api_token (optional)
     * @param  bool $should_unhide_all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcUnhideOrUnarchiveChannelRequest($channel_url, $user_id, $api_token = null, $should_unhide_all = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcUnhideOrUnarchiveChannel'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling gcUnhideOrUnarchiveChannel'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }
        // query params
        if ($should_unhide_all !== null) {
            if('form' === 'form' && is_array($should_unhide_all)) {
                foreach($should_unhide_all as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['should_unhide_all'] = $should_unhide_all;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcUnmuteUserById
     *
     * Unmute a user
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $muted_user_id muted_user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gcUnmuteUserById($channel_url, $muted_user_id, $api_token = null)
    {
        $this->gcUnmuteUserByIdWithHttpInfo($channel_url, $muted_user_id, $api_token);
    }

    /**
     * Operation gcUnmuteUserByIdWithHttpInfo
     *
     * Unmute a user
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcUnmuteUserByIdWithHttpInfo($channel_url, $muted_user_id, $api_token = null)
    {
        $request = $this->gcUnmuteUserByIdRequest($channel_url, $muted_user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gcUnmuteUserByIdAsync
     *
     * Unmute a user
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnmuteUserByIdAsync($channel_url, $muted_user_id, $api_token = null)
    {
        return $this->gcUnmuteUserByIdAsyncWithHttpInfo($channel_url, $muted_user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcUnmuteUserByIdAsyncWithHttpInfo
     *
     * Unmute a user
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUnmuteUserByIdAsyncWithHttpInfo($channel_url, $muted_user_id, $api_token = null)
    {
        $returnType = '';
        $request = $this->gcUnmuteUserByIdRequest($channel_url, $muted_user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcUnmuteUserById'
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcUnmuteUserByIdRequest($channel_url, $muted_user_id, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcUnmuteUserById'
            );
        }
        // verify the required parameter 'muted_user_id' is set
        if ($muted_user_id === null || (is_array($muted_user_id) && count($muted_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $muted_user_id when calling gcUnmuteUserById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/mute/{muted_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($muted_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'muted_user_id' . '}',
                ObjectSerializer::toPathValue($muted_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcUpdateBanById
     *
     * Update a ban
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $banned_user_id banned_user_id (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateBanByIdData $gc_update_ban_by_id_data gc_update_ban_by_id_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function gcUpdateBanById($channel_url, $banned_user_id, $api_token = null, $gc_update_ban_by_id_data = null)
    {
        list($response) = $this->gcUpdateBanByIdWithHttpInfo($channel_url, $banned_user_id, $api_token, $gc_update_ban_by_id_data);
        return $response;
    }

    /**
     * Operation gcUpdateBanByIdWithHttpInfo
     *
     * Update a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateBanByIdData $gc_update_ban_by_id_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcUpdateBanByIdWithHttpInfo($channel_url, $banned_user_id, $api_token = null, $gc_update_ban_by_id_data = null)
    {
        $request = $this->gcUpdateBanByIdRequest($channel_url, $banned_user_id, $api_token, $gc_update_ban_by_id_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcUpdateBanByIdAsync
     *
     * Update a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateBanByIdData $gc_update_ban_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUpdateBanByIdAsync($channel_url, $banned_user_id, $api_token = null, $gc_update_ban_by_id_data = null)
    {
        return $this->gcUpdateBanByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token, $gc_update_ban_by_id_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcUpdateBanByIdAsyncWithHttpInfo
     *
     * Update a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateBanByIdData $gc_update_ban_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUpdateBanByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token = null, $gc_update_ban_by_id_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->gcUpdateBanByIdRequest($channel_url, $banned_user_id, $api_token, $gc_update_ban_by_id_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcUpdateBanById'
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateBanByIdData $gc_update_ban_by_id_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcUpdateBanByIdRequest($channel_url, $banned_user_id, $api_token = null, $gc_update_ban_by_id_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcUpdateBanById'
            );
        }
        // verify the required parameter 'banned_user_id' is set
        if ($banned_user_id === null || (is_array($banned_user_id) && count($banned_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $banned_user_id when calling gcUpdateBanById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/ban/{banned_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($banned_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'banned_user_id' . '}',
                ObjectSerializer::toPathValue($banned_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_update_ban_by_id_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_update_ban_by_id_data));
            } else {
                $httpBody = $gc_update_ban_by_id_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcUpdateChannelByUrl
     *
     * Update a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateChannelByUrlData $gc_update_channel_by_url_data gc_update_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcUpdateChannelByUrl($channel_url, $api_token = null, $gc_update_channel_by_url_data = null)
    {
        list($response) = $this->gcUpdateChannelByUrlWithHttpInfo($channel_url, $api_token, $gc_update_channel_by_url_data);
        return $response;
    }

    /**
     * Operation gcUpdateChannelByUrlWithHttpInfo
     *
     * Update a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateChannelByUrlData $gc_update_channel_by_url_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcUpdateChannelByUrlWithHttpInfo($channel_url, $api_token = null, $gc_update_channel_by_url_data = null)
    {
        $request = $this->gcUpdateChannelByUrlRequest($channel_url, $api_token, $gc_update_channel_by_url_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcUpdateChannelByUrlAsync
     *
     * Update a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateChannelByUrlData $gc_update_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUpdateChannelByUrlAsync($channel_url, $api_token = null, $gc_update_channel_by_url_data = null)
    {
        return $this->gcUpdateChannelByUrlAsyncWithHttpInfo($channel_url, $api_token, $gc_update_channel_by_url_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcUpdateChannelByUrlAsyncWithHttpInfo
     *
     * Update a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateChannelByUrlData $gc_update_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcUpdateChannelByUrlAsyncWithHttpInfo($channel_url, $api_token = null, $gc_update_channel_by_url_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcUpdateChannelByUrlRequest($channel_url, $api_token, $gc_update_channel_by_url_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcUpdateChannelByUrl'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  \OpenAPI\Client\Model\GcUpdateChannelByUrlData $gc_update_channel_by_url_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcUpdateChannelByUrlRequest($channel_url, $api_token = null, $gc_update_channel_by_url_data = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcUpdateChannelByUrl'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($gc_update_channel_by_url_data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gc_update_channel_by_url_data));
            } else {
                $httpBody = $gc_update_channel_by_url_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcViewBanById
     *
     * View a ban
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $banned_user_id banned_user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdUser
     */
    public function gcViewBanById($channel_url, $banned_user_id, $api_token = null)
    {
        list($response) = $this->gcViewBanByIdWithHttpInfo($channel_url, $banned_user_id, $api_token);
        return $response;
    }

    /**
     * Operation gcViewBanByIdWithHttpInfo
     *
     * View a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcViewBanByIdWithHttpInfo($channel_url, $banned_user_id, $api_token = null)
    {
        $request = $this->gcViewBanByIdRequest($channel_url, $banned_user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcViewBanByIdAsync
     *
     * View a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewBanByIdAsync($channel_url, $banned_user_id, $api_token = null)
    {
        return $this->gcViewBanByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcViewBanByIdAsyncWithHttpInfo
     *
     * View a ban
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewBanByIdAsyncWithHttpInfo($channel_url, $banned_user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdUser';
        $request = $this->gcViewBanByIdRequest($channel_url, $banned_user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcViewBanById'
     *
     * @param  string $channel_url (required)
     * @param  string $banned_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcViewBanByIdRequest($channel_url, $banned_user_id, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcViewBanById'
            );
        }
        // verify the required parameter 'banned_user_id' is set
        if ($banned_user_id === null || (is_array($banned_user_id) && count($banned_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $banned_user_id when calling gcViewBanById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/ban/{banned_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($banned_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'banned_user_id' . '}',
                ObjectSerializer::toPathValue($banned_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcViewChannelByUrl
     *
     * View a channel
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $api_token api_token (optional)
     * @param  bool $show_delivery_receipt show_delivery_receipt (optional)
     * @param  bool $show_read_receipt show_read_receipt (optional)
     * @param  bool $show_member show_member (optional)
     * @param  bool $read_receipt read_receipt (optional)
     * @param  bool $member member (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendBirdGroupChannel
     */
    public function gcViewChannelByUrl($channel_url, $api_token = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_member = null, $read_receipt = null, $member = null)
    {
        list($response) = $this->gcViewChannelByUrlWithHttpInfo($channel_url, $api_token, $show_delivery_receipt, $show_read_receipt, $show_member, $read_receipt, $member);
        return $response;
    }

    /**
     * Operation gcViewChannelByUrlWithHttpInfo
     *
     * View a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_member (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendBirdGroupChannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcViewChannelByUrlWithHttpInfo($channel_url, $api_token = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_member = null, $read_receipt = null, $member = null)
    {
        $request = $this->gcViewChannelByUrlRequest($channel_url, $api_token, $show_delivery_receipt, $show_read_receipt, $show_member, $read_receipt, $member);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendBirdGroupChannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendBirdGroupChannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendBirdGroupChannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcViewChannelByUrlAsync
     *
     * View a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_member (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewChannelByUrlAsync($channel_url, $api_token = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_member = null, $read_receipt = null, $member = null)
    {
        return $this->gcViewChannelByUrlAsyncWithHttpInfo($channel_url, $api_token, $show_delivery_receipt, $show_read_receipt, $show_member, $read_receipt, $member)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcViewChannelByUrlAsyncWithHttpInfo
     *
     * View a channel
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_member (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewChannelByUrlAsyncWithHttpInfo($channel_url, $api_token = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_member = null, $read_receipt = null, $member = null)
    {
        $returnType = '\OpenAPI\Client\Model\SendBirdGroupChannel';
        $request = $this->gcViewChannelByUrlRequest($channel_url, $api_token, $show_delivery_receipt, $show_read_receipt, $show_member, $read_receipt, $member);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcViewChannelByUrl'
     *
     * @param  string $channel_url (required)
     * @param  string $api_token (optional)
     * @param  bool $show_delivery_receipt (optional)
     * @param  bool $show_read_receipt (optional)
     * @param  bool $show_member (optional)
     * @param  bool $read_receipt (optional)
     * @param  bool $member (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcViewChannelByUrlRequest($channel_url, $api_token = null, $show_delivery_receipt = null, $show_read_receipt = null, $show_member = null, $read_receipt = null, $member = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcViewChannelByUrl'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($show_delivery_receipt !== null) {
            if('form' === 'form' && is_array($show_delivery_receipt)) {
                foreach($show_delivery_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_delivery_receipt'] = $show_delivery_receipt;
            }
        }
        // query params
        if ($show_read_receipt !== null) {
            if('form' === 'form' && is_array($show_read_receipt)) {
                foreach($show_read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_read_receipt'] = $show_read_receipt;
            }
        }
        // query params
        if ($show_member !== null) {
            if('form' === 'form' && is_array($show_member)) {
                foreach($show_member as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['show_member'] = $show_member;
            }
        }
        // query params
        if ($read_receipt !== null) {
            if('form' === 'form' && is_array($read_receipt)) {
                foreach($read_receipt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['read_receipt'] = $read_receipt;
            }
        }
        // query params
        if ($member !== null) {
            if('form' === 'form' && is_array($member)) {
                foreach($member as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['member'] = $member;
            }
        }

        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gcViewMuteById
     *
     * View a mute
     *
     * @param  string $channel_url channel_url (required)
     * @param  string $muted_user_id muted_user_id (required)
     * @param  string $api_token api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20036
     */
    public function gcViewMuteById($channel_url, $muted_user_id, $api_token = null)
    {
        list($response) = $this->gcViewMuteByIdWithHttpInfo($channel_url, $muted_user_id, $api_token);
        return $response;
    }

    /**
     * Operation gcViewMuteByIdWithHttpInfo
     *
     * View a mute
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20036, HTTP status code, HTTP response headers (array of strings)
     */
    public function gcViewMuteByIdWithHttpInfo($channel_url, $muted_user_id, $api_token = null)
    {
        $request = $this->gcViewMuteByIdRequest($channel_url, $muted_user_id, $api_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20036' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20036', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20036';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20036',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gcViewMuteByIdAsync
     *
     * View a mute
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewMuteByIdAsync($channel_url, $muted_user_id, $api_token = null)
    {
        return $this->gcViewMuteByIdAsyncWithHttpInfo($channel_url, $muted_user_id, $api_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gcViewMuteByIdAsyncWithHttpInfo
     *
     * View a mute
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gcViewMuteByIdAsyncWithHttpInfo($channel_url, $muted_user_id, $api_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20036';
        $request = $this->gcViewMuteByIdRequest($channel_url, $muted_user_id, $api_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gcViewMuteById'
     *
     * @param  string $channel_url (required)
     * @param  string $muted_user_id (required)
     * @param  string $api_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gcViewMuteByIdRequest($channel_url, $muted_user_id, $api_token = null)
    {
        // verify the required parameter 'channel_url' is set
        if ($channel_url === null || (is_array($channel_url) && count($channel_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_url when calling gcViewMuteById'
            );
        }
        // verify the required parameter 'muted_user_id' is set
        if ($muted_user_id === null || (is_array($muted_user_id) && count($muted_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $muted_user_id when calling gcViewMuteById'
            );
        }

        $resourcePath = '/v3/group_channels/{channel_url}/mute/{muted_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_token !== null) {
            $headerParams['Api-Token'] = ObjectSerializer::toHeaderValue($api_token);
        }

        // path params
        if ($channel_url !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_url' . '}',
                ObjectSerializer::toPathValue($channel_url),
                $resourcePath
            );
        }
        // path params
        if ($muted_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'muted_user_id' . '}',
                ObjectSerializer::toPathValue($muted_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
