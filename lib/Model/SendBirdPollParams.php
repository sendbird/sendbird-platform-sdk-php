<?php
/**
 * SendBirdPollParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdPollParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdPollParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.PollParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_multiple_votes' => 'bool',
        'allow_user_suggestion' => 'bool',
        'close_at' => 'float',
        'data' => 'string',
        'is_anonymous' => 'bool',
        'options' => 'string[]',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_multiple_votes' => null,
        'allow_user_suggestion' => null,
        'close_at' => null,
        'data' => null,
        'is_anonymous' => null,
        'options' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_multiple_votes' => 'allowMultipleVotes',
        'allow_user_suggestion' => 'allowUserSuggestion',
        'close_at' => 'closeAt',
        'data' => 'data',
        'is_anonymous' => 'isAnonymous',
        'options' => 'options',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_multiple_votes' => 'setAllowMultipleVotes',
        'allow_user_suggestion' => 'setAllowUserSuggestion',
        'close_at' => 'setCloseAt',
        'data' => 'setData',
        'is_anonymous' => 'setIsAnonymous',
        'options' => 'setOptions',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_multiple_votes' => 'getAllowMultipleVotes',
        'allow_user_suggestion' => 'getAllowUserSuggestion',
        'close_at' => 'getCloseAt',
        'data' => 'getData',
        'is_anonymous' => 'getIsAnonymous',
        'options' => 'getOptions',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_multiple_votes'] = $data['allow_multiple_votes'] ?? null;
        $this->container['allow_user_suggestion'] = $data['allow_user_suggestion'] ?? null;
        $this->container['close_at'] = $data['close_at'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['is_anonymous'] = $data['is_anonymous'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_multiple_votes
     *
     * @return bool|null
     */
    public function getAllowMultipleVotes()
    {
        return $this->container['allow_multiple_votes'];
    }

    /**
     * Sets allow_multiple_votes
     *
     * @param bool|null $allow_multiple_votes allow_multiple_votes
     *
     * @return self
     */
    public function setAllowMultipleVotes($allow_multiple_votes)
    {
        $this->container['allow_multiple_votes'] = $allow_multiple_votes;

        return $this;
    }

    /**
     * Gets allow_user_suggestion
     *
     * @return bool|null
     */
    public function getAllowUserSuggestion()
    {
        return $this->container['allow_user_suggestion'];
    }

    /**
     * Sets allow_user_suggestion
     *
     * @param bool|null $allow_user_suggestion allow_user_suggestion
     *
     * @return self
     */
    public function setAllowUserSuggestion($allow_user_suggestion)
    {
        $this->container['allow_user_suggestion'] = $allow_user_suggestion;

        return $this;
    }

    /**
     * Gets close_at
     *
     * @return float|null
     */
    public function getCloseAt()
    {
        return $this->container['close_at'];
    }

    /**
     * Sets close_at
     *
     * @param float|null $close_at close_at
     *
     * @return self
     */
    public function setCloseAt($close_at)
    {
        $this->container['close_at'] = $close_at;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets is_anonymous
     *
     * @return bool|null
     */
    public function getIsAnonymous()
    {
        return $this->container['is_anonymous'];
    }

    /**
     * Sets is_anonymous
     *
     * @param bool|null $is_anonymous is_anonymous
     *
     * @return self
     */
    public function setIsAnonymous($is_anonymous)
    {
        $this->container['is_anonymous'] = $is_anonymous;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


