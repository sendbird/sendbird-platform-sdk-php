<?php
/**
 * SendBirdLogLevel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdLogLevel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdLogLevel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.LogLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'debug' => 'string',
        'error' => 'string',
        'info' => 'string',
        'none' => 'string',
        'verbose' => 'string',
        'warn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'debug' => null,
        'error' => null,
        'info' => null,
        'none' => null,
        'verbose' => null,
        'warn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debug' => 'DEBUG',
        'error' => 'ERROR',
        'info' => 'INFO',
        'none' => 'NONE',
        'verbose' => 'VERBOSE',
        'warn' => 'WARN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debug' => 'setDebug',
        'error' => 'setError',
        'info' => 'setInfo',
        'none' => 'setNone',
        'verbose' => 'setVerbose',
        'warn' => 'setWarn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debug' => 'getDebug',
        'error' => 'getError',
        'info' => 'getInfo',
        'none' => 'getNone',
        'verbose' => 'getVerbose',
        'warn' => 'getWarn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEBUG_DEBUG = 'debug';
    const ERROR_ERROR = 'error';
    const INFO_INFO = 'info';
    const NONE_NONE = 'none';
    const VERBOSE_VERBOSE = 'verbose';
    const WARN_WARN = 'warn';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDebugAllowableValues()
    {
        return [
            self::DEBUG_DEBUG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorAllowableValues()
    {
        return [
            self::ERROR_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInfoAllowableValues()
    {
        return [
            self::INFO_INFO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNoneAllowableValues()
    {
        return [
            self::NONE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerboseAllowableValues()
    {
        return [
            self::VERBOSE_VERBOSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarnAllowableValues()
    {
        return [
            self::WARN_WARN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debug'] = $data['debug'] ?? null;
        $this->container['error'] = $data['error'] ?? null;
        $this->container['info'] = $data['info'] ?? null;
        $this->container['none'] = $data['none'] ?? null;
        $this->container['verbose'] = $data['verbose'] ?? null;
        $this->container['warn'] = $data['warn'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDebugAllowableValues();
        if (!is_null($this->container['debug']) && !in_array($this->container['debug'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'debug', must be one of '%s'",
                $this->container['debug'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorAllowableValues();
        if (!is_null($this->container['error']) && !in_array($this->container['error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error', must be one of '%s'",
                $this->container['error'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInfoAllowableValues();
        if (!is_null($this->container['info']) && !in_array($this->container['info'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'info', must be one of '%s'",
                $this->container['info'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNoneAllowableValues();
        if (!is_null($this->container['none']) && !in_array($this->container['none'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'none', must be one of '%s'",
                $this->container['none'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerboseAllowableValues();
        if (!is_null($this->container['verbose']) && !in_array($this->container['verbose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'verbose', must be one of '%s'",
                $this->container['verbose'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWarnAllowableValues();
        if (!is_null($this->container['warn']) && !in_array($this->container['warn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warn', must be one of '%s'",
                $this->container['warn'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debug
     *
     * @return string|null
     */
    public function getDebug()
    {
        return $this->container['debug'];
    }

    /**
     * Sets debug
     *
     * @param string|null $debug debug
     *
     * @return self
     */
    public function setDebug($debug)
    {
        $allowedValues = $this->getDebugAllowableValues();
        if (!is_null($debug) && !in_array($debug, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'debug', must be one of '%s'",
                    $debug,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['debug'] = $debug;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        $allowedValues = $this->getErrorAllowableValues();
        if (!is_null($error) && !in_array($error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error', must be one of '%s'",
                    $error,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets info
     *
     * @return string|null
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param string|null $info info
     *
     * @return self
     */
    public function setInfo($info)
    {
        $allowedValues = $this->getInfoAllowableValues();
        if (!is_null($info) && !in_array($info, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'info', must be one of '%s'",
                    $info,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets none
     *
     * @return string|null
     */
    public function getNone()
    {
        return $this->container['none'];
    }

    /**
     * Sets none
     *
     * @param string|null $none none
     *
     * @return self
     */
    public function setNone($none)
    {
        $allowedValues = $this->getNoneAllowableValues();
        if (!is_null($none) && !in_array($none, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'none', must be one of '%s'",
                    $none,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['none'] = $none;

        return $this;
    }

    /**
     * Gets verbose
     *
     * @return string|null
     */
    public function getVerbose()
    {
        return $this->container['verbose'];
    }

    /**
     * Sets verbose
     *
     * @param string|null $verbose verbose
     *
     * @return self
     */
    public function setVerbose($verbose)
    {
        $allowedValues = $this->getVerboseAllowableValues();
        if (!is_null($verbose) && !in_array($verbose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'verbose', must be one of '%s'",
                    $verbose,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verbose'] = $verbose;

        return $this;
    }

    /**
     * Gets warn
     *
     * @return string|null
     */
    public function getWarn()
    {
        return $this->container['warn'];
    }

    /**
     * Sets warn
     *
     * @param string|null $warn warn
     *
     * @return self
     */
    public function setWarn($warn)
    {
        $allowedValues = $this->getWarnAllowableValues();
        if (!is_null($warn) && !in_array($warn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warn', must be one of '%s'",
                    $warn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warn'] = $warn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


