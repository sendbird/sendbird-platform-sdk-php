<?php
/**
 * InlineResponse20064ExportedData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20064ExportedData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20064ExportedData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_64_exported_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_id' => 'string',
        'status' => 'string',
        'format' => 'string',
        'csv_delimiter' => 'string',
        'timezone' => 'string',
        'created_at' => 'float',
        'start_ts' => 'float',
        'end_ts' => 'float',
        'channel_urls' => 'string[]',
        'sender_ids' => 'string[]',
        'file' => '\OpenAPI\Client\Model\InlineResponse20064File',
        'user_ids' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_id' => null,
        'status' => null,
        'format' => null,
        'csv_delimiter' => null,
        'timezone' => null,
        'created_at' => null,
        'start_ts' => null,
        'end_ts' => null,
        'channel_urls' => null,
        'sender_ids' => null,
        'file' => null,
        'user_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'request_id',
        'status' => 'status',
        'format' => 'format',
        'csv_delimiter' => 'csv_delimiter',
        'timezone' => 'timezone',
        'created_at' => 'created_at',
        'start_ts' => 'start_ts',
        'end_ts' => 'end_ts',
        'channel_urls' => 'channel_urls',
        'sender_ids' => 'sender_ids',
        'file' => 'file',
        'user_ids' => 'user_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'status' => 'setStatus',
        'format' => 'setFormat',
        'csv_delimiter' => 'setCsvDelimiter',
        'timezone' => 'setTimezone',
        'created_at' => 'setCreatedAt',
        'start_ts' => 'setStartTs',
        'end_ts' => 'setEndTs',
        'channel_urls' => 'setChannelUrls',
        'sender_ids' => 'setSenderIds',
        'file' => 'setFile',
        'user_ids' => 'setUserIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'status' => 'getStatus',
        'format' => 'getFormat',
        'csv_delimiter' => 'getCsvDelimiter',
        'timezone' => 'getTimezone',
        'created_at' => 'getCreatedAt',
        'start_ts' => 'getStartTs',
        'end_ts' => 'getEndTs',
        'channel_urls' => 'getChannelUrls',
        'sender_ids' => 'getSenderIds',
        'file' => 'getFile',
        'user_ids' => 'getUserIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = $data['request_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['csv_delimiter'] = $data['csv_delimiter'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['start_ts'] = $data['start_ts'] ?? null;
        $this->container['end_ts'] = $data['end_ts'] ?? null;
        $this->container['channel_urls'] = $data['channel_urls'] ?? null;
        $this->container['sender_ids'] = $data['sender_ids'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
        $this->container['user_ids'] = $data['user_ids'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id request_id
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets csv_delimiter
     *
     * @return string|null
     */
    public function getCsvDelimiter()
    {
        return $this->container['csv_delimiter'];
    }

    /**
     * Sets csv_delimiter
     *
     * @param string|null $csv_delimiter csv_delimiter
     *
     * @return self
     */
    public function setCsvDelimiter($csv_delimiter)
    {
        $this->container['csv_delimiter'] = $csv_delimiter;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets start_ts
     *
     * @return float|null
     */
    public function getStartTs()
    {
        return $this->container['start_ts'];
    }

    /**
     * Sets start_ts
     *
     * @param float|null $start_ts start_ts
     *
     * @return self
     */
    public function setStartTs($start_ts)
    {
        $this->container['start_ts'] = $start_ts;

        return $this;
    }

    /**
     * Gets end_ts
     *
     * @return float|null
     */
    public function getEndTs()
    {
        return $this->container['end_ts'];
    }

    /**
     * Sets end_ts
     *
     * @param float|null $end_ts end_ts
     *
     * @return self
     */
    public function setEndTs($end_ts)
    {
        $this->container['end_ts'] = $end_ts;

        return $this;
    }

    /**
     * Gets channel_urls
     *
     * @return string[]|null
     */
    public function getChannelUrls()
    {
        return $this->container['channel_urls'];
    }

    /**
     * Sets channel_urls
     *
     * @param string[]|null $channel_urls channel_urls
     *
     * @return self
     */
    public function setChannelUrls($channel_urls)
    {
        $this->container['channel_urls'] = $channel_urls;

        return $this;
    }

    /**
     * Gets sender_ids
     *
     * @return string[]|null
     */
    public function getSenderIds()
    {
        return $this->container['sender_ids'];
    }

    /**
     * Sets sender_ids
     *
     * @param string[]|null $sender_ids sender_ids
     *
     * @return self
     */
    public function setSenderIds($sender_ids)
    {
        $this->container['sender_ids'] = $sender_ids;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \OpenAPI\Client\Model\InlineResponse20064File|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \OpenAPI\Client\Model\InlineResponse20064File|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets user_ids
     *
     * @return float[]|null
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     *
     * @param float[]|null $user_ids user_ids
     *
     * @return self
     */
    public function setUserIds($user_ids)
    {
        $this->container['user_ids'] = $user_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


