<?php
/**
 * SendBirdGroupChannel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendBirdGroupChannel Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdGroupChannel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.GroupChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cover_url' => 'string',
        'created_at' => 'float',
        'creator' => '\Sendbird\Model\SendBirdUser',
        'custom_type' => 'string',
        'data' => 'string',
        'hidden_state' => 'string',
        'invited_at' => 'float',
        'inviter' => '\Sendbird\Model\SendBirdUser',
        'is_access_code_required' => 'bool',
        'is_broadcast' => 'bool',
        'is_discoverable' => 'bool',
        'is_distinct' => 'bool',
        'is_ephemeral' => 'bool',
        'is_frozen' => 'bool',
        'is_hidden' => 'bool',
        'is_public' => 'bool',
        'is_push_enabled' => 'bool',
        'is_super' => 'bool',
        'joined_at' => 'float',
        'joined_member_count' => 'float',
        'last_message' => '\Sendbird\Model\SendBirdMessageResponse',
        'member_count' => 'float',
        'members' => '\Sendbird\Model\SendBirdMember[]',
        'message_offset_timestamp' => 'float',
        'message_survival_seconds' => 'float',
        'my_count_preference' => 'string',
        'my_last_read' => 'float',
        'my_member_state' => 'string',
        'my_muted_state' => 'string',
        'my_push_trigger_option' => 'string',
        'my_role' => 'string',
        'name' => 'string',
        'unread_mention_count' => 'float',
        'unread_message_count' => 'float',
        'channel_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cover_url' => null,
        'created_at' => null,
        'creator' => null,
        'custom_type' => null,
        'data' => null,
        'hidden_state' => null,
        'invited_at' => null,
        'inviter' => null,
        'is_access_code_required' => null,
        'is_broadcast' => null,
        'is_discoverable' => null,
        'is_distinct' => null,
        'is_ephemeral' => null,
        'is_frozen' => null,
        'is_hidden' => null,
        'is_public' => null,
        'is_push_enabled' => null,
        'is_super' => null,
        'joined_at' => null,
        'joined_member_count' => null,
        'last_message' => null,
        'member_count' => null,
        'members' => null,
        'message_offset_timestamp' => null,
        'message_survival_seconds' => null,
        'my_count_preference' => null,
        'my_last_read' => null,
        'my_member_state' => null,
        'my_muted_state' => null,
        'my_push_trigger_option' => null,
        'my_role' => null,
        'name' => null,
        'unread_mention_count' => null,
        'unread_message_count' => null,
        'channel_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cover_url' => 'cover_url',
        'created_at' => 'created_at',
        'creator' => 'creator',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'hidden_state' => 'hidden_state',
        'invited_at' => 'invited_at',
        'inviter' => 'inviter',
        'is_access_code_required' => 'is_access_code_required',
        'is_broadcast' => 'is_broadcast',
        'is_discoverable' => 'is_discoverable',
        'is_distinct' => 'is_distinct',
        'is_ephemeral' => 'is_ephemeral',
        'is_frozen' => 'is_frozen',
        'is_hidden' => 'is_hidden',
        'is_public' => 'is_public',
        'is_push_enabled' => 'is_push_enabled',
        'is_super' => 'is_super',
        'joined_at' => 'joined_at',
        'joined_member_count' => 'joined_member_count',
        'last_message' => 'last_message',
        'member_count' => 'member_count',
        'members' => 'members',
        'message_offset_timestamp' => 'message_offset_timestamp',
        'message_survival_seconds' => 'message_survival_seconds',
        'my_count_preference' => 'my_count_preference',
        'my_last_read' => 'my_last_read',
        'my_member_state' => 'my_member_state',
        'my_muted_state' => 'my_muted_state',
        'my_push_trigger_option' => 'my_push_trigger_option',
        'my_role' => 'my_role',
        'name' => 'name',
        'unread_mention_count' => 'unread_mention_count',
        'unread_message_count' => 'unread_message_count',
        'channel_url' => 'channel_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cover_url' => 'setCoverUrl',
        'created_at' => 'setCreatedAt',
        'creator' => 'setCreator',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'hidden_state' => 'setHiddenState',
        'invited_at' => 'setInvitedAt',
        'inviter' => 'setInviter',
        'is_access_code_required' => 'setIsAccessCodeRequired',
        'is_broadcast' => 'setIsBroadcast',
        'is_discoverable' => 'setIsDiscoverable',
        'is_distinct' => 'setIsDistinct',
        'is_ephemeral' => 'setIsEphemeral',
        'is_frozen' => 'setIsFrozen',
        'is_hidden' => 'setIsHidden',
        'is_public' => 'setIsPublic',
        'is_push_enabled' => 'setIsPushEnabled',
        'is_super' => 'setIsSuper',
        'joined_at' => 'setJoinedAt',
        'joined_member_count' => 'setJoinedMemberCount',
        'last_message' => 'setLastMessage',
        'member_count' => 'setMemberCount',
        'members' => 'setMembers',
        'message_offset_timestamp' => 'setMessageOffsetTimestamp',
        'message_survival_seconds' => 'setMessageSurvivalSeconds',
        'my_count_preference' => 'setMyCountPreference',
        'my_last_read' => 'setMyLastRead',
        'my_member_state' => 'setMyMemberState',
        'my_muted_state' => 'setMyMutedState',
        'my_push_trigger_option' => 'setMyPushTriggerOption',
        'my_role' => 'setMyRole',
        'name' => 'setName',
        'unread_mention_count' => 'setUnreadMentionCount',
        'unread_message_count' => 'setUnreadMessageCount',
        'channel_url' => 'setChannelUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cover_url' => 'getCoverUrl',
        'created_at' => 'getCreatedAt',
        'creator' => 'getCreator',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'hidden_state' => 'getHiddenState',
        'invited_at' => 'getInvitedAt',
        'inviter' => 'getInviter',
        'is_access_code_required' => 'getIsAccessCodeRequired',
        'is_broadcast' => 'getIsBroadcast',
        'is_discoverable' => 'getIsDiscoverable',
        'is_distinct' => 'getIsDistinct',
        'is_ephemeral' => 'getIsEphemeral',
        'is_frozen' => 'getIsFrozen',
        'is_hidden' => 'getIsHidden',
        'is_public' => 'getIsPublic',
        'is_push_enabled' => 'getIsPushEnabled',
        'is_super' => 'getIsSuper',
        'joined_at' => 'getJoinedAt',
        'joined_member_count' => 'getJoinedMemberCount',
        'last_message' => 'getLastMessage',
        'member_count' => 'getMemberCount',
        'members' => 'getMembers',
        'message_offset_timestamp' => 'getMessageOffsetTimestamp',
        'message_survival_seconds' => 'getMessageSurvivalSeconds',
        'my_count_preference' => 'getMyCountPreference',
        'my_last_read' => 'getMyLastRead',
        'my_member_state' => 'getMyMemberState',
        'my_muted_state' => 'getMyMutedState',
        'my_push_trigger_option' => 'getMyPushTriggerOption',
        'my_role' => 'getMyRole',
        'name' => 'getName',
        'unread_mention_count' => 'getUnreadMentionCount',
        'unread_message_count' => 'getUnreadMessageCount',
        'channel_url' => 'getChannelUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HIDDEN_STATE_HIDDEN_ALLOW_AUTO_UNHIDE = 'hidden_allow_auto_unhide';
    const HIDDEN_STATE_HIDDEN_PREVENT_AUTO_UNHIDE = 'hidden_prevent_auto_unhide';
    const HIDDEN_STATE_UNHIDDEN = 'unhidden';
    const MY_MEMBER_STATE_INVITED = 'invited';
    const MY_MEMBER_STATE_JOINED = 'joined';
    const MY_MEMBER_STATE_NONE = 'none';
    const MY_MUTED_STATE_MUTED = 'muted';
    const MY_MUTED_STATE_UNMUTED = 'unmuted';
    const MY_PUSH_TRIGGER_OPTION_ALL = 'all';
    const MY_PUSH_TRIGGER_OPTION__DEFAULT = 'default';
    const MY_PUSH_TRIGGER_OPTION_MENTION_ONLY = 'mention_only';
    const MY_PUSH_TRIGGER_OPTION_FALSE = 'false';
    const MY_ROLE_NONE = 'none';
    const MY_ROLE_OPERATOR = 'operator';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHiddenStateAllowableValues()
    {
        return [
            self::HIDDEN_STATE_HIDDEN_ALLOW_AUTO_UNHIDE,
            self::HIDDEN_STATE_HIDDEN_PREVENT_AUTO_UNHIDE,
            self::HIDDEN_STATE_UNHIDDEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMyMemberStateAllowableValues()
    {
        return [
            self::MY_MEMBER_STATE_INVITED,
            self::MY_MEMBER_STATE_JOINED,
            self::MY_MEMBER_STATE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMyMutedStateAllowableValues()
    {
        return [
            self::MY_MUTED_STATE_MUTED,
            self::MY_MUTED_STATE_UNMUTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMyPushTriggerOptionAllowableValues()
    {
        return [
            self::MY_PUSH_TRIGGER_OPTION_ALL,
            self::MY_PUSH_TRIGGER_OPTION__DEFAULT,
            self::MY_PUSH_TRIGGER_OPTION_MENTION_ONLY,
            self::MY_PUSH_TRIGGER_OPTION_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMyRoleAllowableValues()
    {
        return [
            self::MY_ROLE_NONE,
            self::MY_ROLE_OPERATOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['hidden_state'] = $data['hidden_state'] ?? null;
        $this->container['invited_at'] = $data['invited_at'] ?? null;
        $this->container['inviter'] = $data['inviter'] ?? null;
        $this->container['is_access_code_required'] = $data['is_access_code_required'] ?? null;
        $this->container['is_broadcast'] = $data['is_broadcast'] ?? null;
        $this->container['is_discoverable'] = $data['is_discoverable'] ?? null;
        $this->container['is_distinct'] = $data['is_distinct'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['is_frozen'] = $data['is_frozen'] ?? null;
        $this->container['is_hidden'] = $data['is_hidden'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['is_push_enabled'] = $data['is_push_enabled'] ?? null;
        $this->container['is_super'] = $data['is_super'] ?? null;
        $this->container['joined_at'] = $data['joined_at'] ?? null;
        $this->container['joined_member_count'] = $data['joined_member_count'] ?? null;
        $this->container['last_message'] = $data['last_message'] ?? null;
        $this->container['member_count'] = $data['member_count'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['message_offset_timestamp'] = $data['message_offset_timestamp'] ?? null;
        $this->container['message_survival_seconds'] = $data['message_survival_seconds'] ?? null;
        $this->container['my_count_preference'] = $data['my_count_preference'] ?? null;
        $this->container['my_last_read'] = $data['my_last_read'] ?? null;
        $this->container['my_member_state'] = $data['my_member_state'] ?? null;
        $this->container['my_muted_state'] = $data['my_muted_state'] ?? null;
        $this->container['my_push_trigger_option'] = $data['my_push_trigger_option'] ?? null;
        $this->container['my_role'] = $data['my_role'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['unread_mention_count'] = $data['unread_mention_count'] ?? null;
        $this->container['unread_message_count'] = $data['unread_message_count'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHiddenStateAllowableValues();
        if (!is_null($this->container['hidden_state']) && !in_array($this->container['hidden_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hidden_state', must be one of '%s'",
                $this->container['hidden_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMyMemberStateAllowableValues();
        if (!is_null($this->container['my_member_state']) && !in_array($this->container['my_member_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'my_member_state', must be one of '%s'",
                $this->container['my_member_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMyMutedStateAllowableValues();
        if (!is_null($this->container['my_muted_state']) && !in_array($this->container['my_muted_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'my_muted_state', must be one of '%s'",
                $this->container['my_muted_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMyPushTriggerOptionAllowableValues();
        if (!is_null($this->container['my_push_trigger_option']) && !in_array($this->container['my_push_trigger_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'my_push_trigger_option', must be one of '%s'",
                $this->container['my_push_trigger_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMyRoleAllowableValues();
        if (!is_null($this->container['my_role']) && !in_array($this->container['my_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'my_role', must be one of '%s'",
                $this->container['my_role'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Sendbird\Model\SendBirdUser|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Sendbird\Model\SendBirdUser|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets hidden_state
     *
     * @return string|null
     */
    public function getHiddenState()
    {
        return $this->container['hidden_state'];
    }

    /**
     * Sets hidden_state
     *
     * @param string|null $hidden_state hidden_state
     *
     * @return self
     */
    public function setHiddenState($hidden_state)
    {
        $allowedValues = $this->getHiddenStateAllowableValues();
        if (!is_null($hidden_state) && !in_array($hidden_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hidden_state', must be one of '%s'",
                    $hidden_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hidden_state'] = $hidden_state;

        return $this;
    }

    /**
     * Gets invited_at
     *
     * @return float|null
     */
    public function getInvitedAt()
    {
        return $this->container['invited_at'];
    }

    /**
     * Sets invited_at
     *
     * @param float|null $invited_at invited_at
     *
     * @return self
     */
    public function setInvitedAt($invited_at)
    {
        $this->container['invited_at'] = $invited_at;

        return $this;
    }

    /**
     * Gets inviter
     *
     * @return \Sendbird\Model\SendBirdUser|null
     */
    public function getInviter()
    {
        return $this->container['inviter'];
    }

    /**
     * Sets inviter
     *
     * @param \Sendbird\Model\SendBirdUser|null $inviter inviter
     *
     * @return self
     */
    public function setInviter($inviter)
    {
        $this->container['inviter'] = $inviter;

        return $this;
    }

    /**
     * Gets is_access_code_required
     *
     * @return bool|null
     */
    public function getIsAccessCodeRequired()
    {
        return $this->container['is_access_code_required'];
    }

    /**
     * Sets is_access_code_required
     *
     * @param bool|null $is_access_code_required is_access_code_required
     *
     * @return self
     */
    public function setIsAccessCodeRequired($is_access_code_required)
    {
        $this->container['is_access_code_required'] = $is_access_code_required;

        return $this;
    }

    /**
     * Gets is_broadcast
     *
     * @return bool|null
     */
    public function getIsBroadcast()
    {
        return $this->container['is_broadcast'];
    }

    /**
     * Sets is_broadcast
     *
     * @param bool|null $is_broadcast is_broadcast
     *
     * @return self
     */
    public function setIsBroadcast($is_broadcast)
    {
        $this->container['is_broadcast'] = $is_broadcast;

        return $this;
    }

    /**
     * Gets is_discoverable
     *
     * @return bool|null
     */
    public function getIsDiscoverable()
    {
        return $this->container['is_discoverable'];
    }

    /**
     * Sets is_discoverable
     *
     * @param bool|null $is_discoverable is_discoverable
     *
     * @return self
     */
    public function setIsDiscoverable($is_discoverable)
    {
        $this->container['is_discoverable'] = $is_discoverable;

        return $this;
    }

    /**
     * Gets is_distinct
     *
     * @return bool|null
     */
    public function getIsDistinct()
    {
        return $this->container['is_distinct'];
    }

    /**
     * Sets is_distinct
     *
     * @param bool|null $is_distinct is_distinct
     *
     * @return self
     */
    public function setIsDistinct($is_distinct)
    {
        $this->container['is_distinct'] = $is_distinct;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return bool|null
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param bool|null $is_frozen is_frozen
     *
     * @return self
     */
    public function setIsFrozen($is_frozen)
    {
        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_push_enabled
     *
     * @return bool|null
     */
    public function getIsPushEnabled()
    {
        return $this->container['is_push_enabled'];
    }

    /**
     * Sets is_push_enabled
     *
     * @param bool|null $is_push_enabled is_push_enabled
     *
     * @return self
     */
    public function setIsPushEnabled($is_push_enabled)
    {
        $this->container['is_push_enabled'] = $is_push_enabled;

        return $this;
    }

    /**
     * Gets is_super
     *
     * @return bool|null
     */
    public function getIsSuper()
    {
        return $this->container['is_super'];
    }

    /**
     * Sets is_super
     *
     * @param bool|null $is_super is_super
     *
     * @return self
     */
    public function setIsSuper($is_super)
    {
        $this->container['is_super'] = $is_super;

        return $this;
    }

    /**
     * Gets joined_at
     *
     * @return float|null
     */
    public function getJoinedAt()
    {
        return $this->container['joined_at'];
    }

    /**
     * Sets joined_at
     *
     * @param float|null $joined_at joined_at
     *
     * @return self
     */
    public function setJoinedAt($joined_at)
    {
        $this->container['joined_at'] = $joined_at;

        return $this;
    }

    /**
     * Gets joined_member_count
     *
     * @return float|null
     */
    public function getJoinedMemberCount()
    {
        return $this->container['joined_member_count'];
    }

    /**
     * Sets joined_member_count
     *
     * @param float|null $joined_member_count joined_member_count
     *
     * @return self
     */
    public function setJoinedMemberCount($joined_member_count)
    {
        $this->container['joined_member_count'] = $joined_member_count;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return \Sendbird\Model\SendBirdMessageResponse|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param \Sendbird\Model\SendBirdMessageResponse|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return float|null
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param float|null $member_count member_count
     *
     * @return self
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Sendbird\Model\SendBirdMember[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Sendbird\Model\SendBirdMember[]|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets message_offset_timestamp
     *
     * @return float|null
     */
    public function getMessageOffsetTimestamp()
    {
        return $this->container['message_offset_timestamp'];
    }

    /**
     * Sets message_offset_timestamp
     *
     * @param float|null $message_offset_timestamp message_offset_timestamp
     *
     * @return self
     */
    public function setMessageOffsetTimestamp($message_offset_timestamp)
    {
        $this->container['message_offset_timestamp'] = $message_offset_timestamp;

        return $this;
    }

    /**
     * Gets message_survival_seconds
     *
     * @return float|null
     */
    public function getMessageSurvivalSeconds()
    {
        return $this->container['message_survival_seconds'];
    }

    /**
     * Sets message_survival_seconds
     *
     * @param float|null $message_survival_seconds message_survival_seconds
     *
     * @return self
     */
    public function setMessageSurvivalSeconds($message_survival_seconds)
    {
        $this->container['message_survival_seconds'] = $message_survival_seconds;

        return $this;
    }

    /**
     * Gets my_count_preference
     *
     * @return string|null
     */
    public function getMyCountPreference()
    {
        return $this->container['my_count_preference'];
    }

    /**
     * Sets my_count_preference
     *
     * @param string|null $my_count_preference my_count_preference
     *
     * @return self
     */
    public function setMyCountPreference($my_count_preference)
    {
        $this->container['my_count_preference'] = $my_count_preference;

        return $this;
    }

    /**
     * Gets my_last_read
     *
     * @return float|null
     */
    public function getMyLastRead()
    {
        return $this->container['my_last_read'];
    }

    /**
     * Sets my_last_read
     *
     * @param float|null $my_last_read my_last_read
     *
     * @return self
     */
    public function setMyLastRead($my_last_read)
    {
        $this->container['my_last_read'] = $my_last_read;

        return $this;
    }

    /**
     * Gets my_member_state
     *
     * @return string|null
     */
    public function getMyMemberState()
    {
        return $this->container['my_member_state'];
    }

    /**
     * Sets my_member_state
     *
     * @param string|null $my_member_state my_member_state
     *
     * @return self
     */
    public function setMyMemberState($my_member_state)
    {
        $allowedValues = $this->getMyMemberStateAllowableValues();
        if (!is_null($my_member_state) && !in_array($my_member_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'my_member_state', must be one of '%s'",
                    $my_member_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['my_member_state'] = $my_member_state;

        return $this;
    }

    /**
     * Gets my_muted_state
     *
     * @return string|null
     */
    public function getMyMutedState()
    {
        return $this->container['my_muted_state'];
    }

    /**
     * Sets my_muted_state
     *
     * @param string|null $my_muted_state my_muted_state
     *
     * @return self
     */
    public function setMyMutedState($my_muted_state)
    {
        $allowedValues = $this->getMyMutedStateAllowableValues();
        if (!is_null($my_muted_state) && !in_array($my_muted_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'my_muted_state', must be one of '%s'",
                    $my_muted_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['my_muted_state'] = $my_muted_state;

        return $this;
    }

    /**
     * Gets my_push_trigger_option
     *
     * @return string|null
     */
    public function getMyPushTriggerOption()
    {
        return $this->container['my_push_trigger_option'];
    }

    /**
     * Sets my_push_trigger_option
     *
     * @param string|null $my_push_trigger_option my_push_trigger_option
     *
     * @return self
     */
    public function setMyPushTriggerOption($my_push_trigger_option)
    {
        $allowedValues = $this->getMyPushTriggerOptionAllowableValues();
        if (!is_null($my_push_trigger_option) && !in_array($my_push_trigger_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'my_push_trigger_option', must be one of '%s'",
                    $my_push_trigger_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['my_push_trigger_option'] = $my_push_trigger_option;

        return $this;
    }

    /**
     * Gets my_role
     *
     * @return string|null
     */
    public function getMyRole()
    {
        return $this->container['my_role'];
    }

    /**
     * Sets my_role
     *
     * @param string|null $my_role my_role
     *
     * @return self
     */
    public function setMyRole($my_role)
    {
        $allowedValues = $this->getMyRoleAllowableValues();
        if (!is_null($my_role) && !in_array($my_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'my_role', must be one of '%s'",
                    $my_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['my_role'] = $my_role;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unread_mention_count
     *
     * @return float|null
     */
    public function getUnreadMentionCount()
    {
        return $this->container['unread_mention_count'];
    }

    /**
     * Sets unread_mention_count
     *
     * @param float|null $unread_mention_count unread_mention_count
     *
     * @return self
     */
    public function setUnreadMentionCount($unread_mention_count)
    {
        $this->container['unread_mention_count'] = $unread_mention_count;

        return $this;
    }

    /**
     * Gets unread_message_count
     *
     * @return float|null
     */
    public function getUnreadMessageCount()
    {
        return $this->container['unread_message_count'];
    }

    /**
     * Sets unread_message_count
     *
     * @param float|null $unread_message_count unread_message_count
     *
     * @return self
     */
    public function setUnreadMessageCount($unread_message_count)
    {
        $this->container['unread_message_count'] = $unread_message_count;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


