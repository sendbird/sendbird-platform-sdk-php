<?php
/**
 * ViewNumberOfUnreadItemsResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * ViewNumberOfUnreadItemsResponse Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ViewNumberOfUnreadItemsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'viewNumberOfUnreadItemsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'non_super_group_channel_unread_message_count' => 'float',
        'super_group_channel_unread_message_count' => 'float',
        'group_channel_unread_message_count' => 'float',
        'super_group_channel_invitation_count' => 'float',
        'group_channel_invitation_count' => 'float',
        'super_group_channel_unread_mention_count' => 'float',
        'group_channel_unread_mention_count' => 'float',
        'non_super_group_channel_unread_mention_count' => 'float',
        'non_super_group_channel_invitation_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'non_super_group_channel_unread_message_count' => null,
        'super_group_channel_unread_message_count' => null,
        'group_channel_unread_message_count' => null,
        'super_group_channel_invitation_count' => null,
        'group_channel_invitation_count' => null,
        'super_group_channel_unread_mention_count' => null,
        'group_channel_unread_mention_count' => null,
        'non_super_group_channel_unread_mention_count' => null,
        'non_super_group_channel_invitation_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'non_super_group_channel_unread_message_count' => 'non_super_group_channel_unread_message_count',
        'super_group_channel_unread_message_count' => 'super_group_channel_unread_message_count',
        'group_channel_unread_message_count' => 'group_channel_unread_message_count',
        'super_group_channel_invitation_count' => 'super_group_channel_invitation_count',
        'group_channel_invitation_count' => 'group_channel_invitation_count',
        'super_group_channel_unread_mention_count' => 'super_group_channel_unread_mention_count',
        'group_channel_unread_mention_count' => 'group_channel_unread_mention_count',
        'non_super_group_channel_unread_mention_count' => 'non_super_group_channel_unread_mention_count',
        'non_super_group_channel_invitation_count' => 'non_super_group_channel_invitation_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'non_super_group_channel_unread_message_count' => 'setNonSuperGroupChannelUnreadMessageCount',
        'super_group_channel_unread_message_count' => 'setSuperGroupChannelUnreadMessageCount',
        'group_channel_unread_message_count' => 'setGroupChannelUnreadMessageCount',
        'super_group_channel_invitation_count' => 'setSuperGroupChannelInvitationCount',
        'group_channel_invitation_count' => 'setGroupChannelInvitationCount',
        'super_group_channel_unread_mention_count' => 'setSuperGroupChannelUnreadMentionCount',
        'group_channel_unread_mention_count' => 'setGroupChannelUnreadMentionCount',
        'non_super_group_channel_unread_mention_count' => 'setNonSuperGroupChannelUnreadMentionCount',
        'non_super_group_channel_invitation_count' => 'setNonSuperGroupChannelInvitationCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'non_super_group_channel_unread_message_count' => 'getNonSuperGroupChannelUnreadMessageCount',
        'super_group_channel_unread_message_count' => 'getSuperGroupChannelUnreadMessageCount',
        'group_channel_unread_message_count' => 'getGroupChannelUnreadMessageCount',
        'super_group_channel_invitation_count' => 'getSuperGroupChannelInvitationCount',
        'group_channel_invitation_count' => 'getGroupChannelInvitationCount',
        'super_group_channel_unread_mention_count' => 'getSuperGroupChannelUnreadMentionCount',
        'group_channel_unread_mention_count' => 'getGroupChannelUnreadMentionCount',
        'non_super_group_channel_unread_mention_count' => 'getNonSuperGroupChannelUnreadMentionCount',
        'non_super_group_channel_invitation_count' => 'getNonSuperGroupChannelInvitationCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['non_super_group_channel_unread_message_count'] = $data['non_super_group_channel_unread_message_count'] ?? null;
        $this->container['super_group_channel_unread_message_count'] = $data['super_group_channel_unread_message_count'] ?? null;
        $this->container['group_channel_unread_message_count'] = $data['group_channel_unread_message_count'] ?? null;
        $this->container['super_group_channel_invitation_count'] = $data['super_group_channel_invitation_count'] ?? null;
        $this->container['group_channel_invitation_count'] = $data['group_channel_invitation_count'] ?? null;
        $this->container['super_group_channel_unread_mention_count'] = $data['super_group_channel_unread_mention_count'] ?? null;
        $this->container['group_channel_unread_mention_count'] = $data['group_channel_unread_mention_count'] ?? null;
        $this->container['non_super_group_channel_unread_mention_count'] = $data['non_super_group_channel_unread_mention_count'] ?? null;
        $this->container['non_super_group_channel_invitation_count'] = $data['non_super_group_channel_invitation_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets non_super_group_channel_unread_message_count
     *
     * @return float|null
     */
    public function getNonSuperGroupChannelUnreadMessageCount()
    {
        return $this->container['non_super_group_channel_unread_message_count'];
    }

    /**
     * Sets non_super_group_channel_unread_message_count
     *
     * @param float|null $non_super_group_channel_unread_message_count non_super_group_channel_unread_message_count
     *
     * @return self
     */
    public function setNonSuperGroupChannelUnreadMessageCount($non_super_group_channel_unread_message_count)
    {
        $this->container['non_super_group_channel_unread_message_count'] = $non_super_group_channel_unread_message_count;

        return $this;
    }

    /**
     * Gets super_group_channel_unread_message_count
     *
     * @return float|null
     */
    public function getSuperGroupChannelUnreadMessageCount()
    {
        return $this->container['super_group_channel_unread_message_count'];
    }

    /**
     * Sets super_group_channel_unread_message_count
     *
     * @param float|null $super_group_channel_unread_message_count super_group_channel_unread_message_count
     *
     * @return self
     */
    public function setSuperGroupChannelUnreadMessageCount($super_group_channel_unread_message_count)
    {
        $this->container['super_group_channel_unread_message_count'] = $super_group_channel_unread_message_count;

        return $this;
    }

    /**
     * Gets group_channel_unread_message_count
     *
     * @return float|null
     */
    public function getGroupChannelUnreadMessageCount()
    {
        return $this->container['group_channel_unread_message_count'];
    }

    /**
     * Sets group_channel_unread_message_count
     *
     * @param float|null $group_channel_unread_message_count group_channel_unread_message_count
     *
     * @return self
     */
    public function setGroupChannelUnreadMessageCount($group_channel_unread_message_count)
    {
        $this->container['group_channel_unread_message_count'] = $group_channel_unread_message_count;

        return $this;
    }

    /**
     * Gets super_group_channel_invitation_count
     *
     * @return float|null
     */
    public function getSuperGroupChannelInvitationCount()
    {
        return $this->container['super_group_channel_invitation_count'];
    }

    /**
     * Sets super_group_channel_invitation_count
     *
     * @param float|null $super_group_channel_invitation_count super_group_channel_invitation_count
     *
     * @return self
     */
    public function setSuperGroupChannelInvitationCount($super_group_channel_invitation_count)
    {
        $this->container['super_group_channel_invitation_count'] = $super_group_channel_invitation_count;

        return $this;
    }

    /**
     * Gets group_channel_invitation_count
     *
     * @return float|null
     */
    public function getGroupChannelInvitationCount()
    {
        return $this->container['group_channel_invitation_count'];
    }

    /**
     * Sets group_channel_invitation_count
     *
     * @param float|null $group_channel_invitation_count group_channel_invitation_count
     *
     * @return self
     */
    public function setGroupChannelInvitationCount($group_channel_invitation_count)
    {
        $this->container['group_channel_invitation_count'] = $group_channel_invitation_count;

        return $this;
    }

    /**
     * Gets super_group_channel_unread_mention_count
     *
     * @return float|null
     */
    public function getSuperGroupChannelUnreadMentionCount()
    {
        return $this->container['super_group_channel_unread_mention_count'];
    }

    /**
     * Sets super_group_channel_unread_mention_count
     *
     * @param float|null $super_group_channel_unread_mention_count super_group_channel_unread_mention_count
     *
     * @return self
     */
    public function setSuperGroupChannelUnreadMentionCount($super_group_channel_unread_mention_count)
    {
        $this->container['super_group_channel_unread_mention_count'] = $super_group_channel_unread_mention_count;

        return $this;
    }

    /**
     * Gets group_channel_unread_mention_count
     *
     * @return float|null
     */
    public function getGroupChannelUnreadMentionCount()
    {
        return $this->container['group_channel_unread_mention_count'];
    }

    /**
     * Sets group_channel_unread_mention_count
     *
     * @param float|null $group_channel_unread_mention_count group_channel_unread_mention_count
     *
     * @return self
     */
    public function setGroupChannelUnreadMentionCount($group_channel_unread_mention_count)
    {
        $this->container['group_channel_unread_mention_count'] = $group_channel_unread_mention_count;

        return $this;
    }

    /**
     * Gets non_super_group_channel_unread_mention_count
     *
     * @return float|null
     */
    public function getNonSuperGroupChannelUnreadMentionCount()
    {
        return $this->container['non_super_group_channel_unread_mention_count'];
    }

    /**
     * Sets non_super_group_channel_unread_mention_count
     *
     * @param float|null $non_super_group_channel_unread_mention_count non_super_group_channel_unread_mention_count
     *
     * @return self
     */
    public function setNonSuperGroupChannelUnreadMentionCount($non_super_group_channel_unread_mention_count)
    {
        $this->container['non_super_group_channel_unread_mention_count'] = $non_super_group_channel_unread_mention_count;

        return $this;
    }

    /**
     * Gets non_super_group_channel_invitation_count
     *
     * @return float|null
     */
    public function getNonSuperGroupChannelInvitationCount()
    {
        return $this->container['non_super_group_channel_invitation_count'];
    }

    /**
     * Sets non_super_group_channel_invitation_count
     *
     * @param float|null $non_super_group_channel_invitation_count non_super_group_channel_invitation_count
     *
     * @return self
     */
    public function setNonSuperGroupChannelInvitationCount($non_super_group_channel_invitation_count)
    {
        $this->container['non_super_group_channel_invitation_count'] = $non_super_group_channel_invitation_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


