<?php
/**
 * SendBirdGroupChannelContextSource
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdGroupChannelContextSource Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdGroupChannelContextSource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird_GroupChannelContext_source';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_background' => 'float',
        'channel_changelog' => 'float',
        'event_channel_changed' => 'float',
        'event_channel_deleted' => 'float',
        'event_channel_enter' => 'float',
        'event_channel_exit' => 'float',
        'event_channel_frozen' => 'float',
        'event_channel_hidden' => 'float',
        'event_channel_metacounter_deleted' => 'float',
        'event_channel_metacounter_updated' => 'float',
        'event_channel_metadata_deleted' => 'float',
        'event_channel_metadata_updated' => 'float',
        'event_channel_unfrozen' => 'float',
        'event_channel_unhidden' => 'float',
        'event_delivery_receipt_updated' => 'float',
        'event_mention' => 'float',
        'event_message_deleted' => 'float',
        'event_message_received' => 'float',
        'event_message_sent' => 'float',
        'event_message_updated' => 'float',
        'event_operator_updated' => 'float',
        'event_reaction_updated' => 'float',
        'event_read_receipt_updated' => 'float',
        'event_thread_info_updated' => 'float',
        'event_typing_status_updated' => 'float',
        'event_user_banned' => 'float',
        'event_user_declined_invitation' => 'float',
        'event_user_joined' => 'float',
        'event_user_left' => 'float',
        'event_user_muted' => 'float',
        'event_user_received_invitation' => 'float',
        'event_user_unbanned' => 'float',
        'event_user_unmuted' => 'float',
        'local_message_canceled' => 'float',
        'local_message_failed' => 'float',
        'local_message_pending_created' => 'float',
        'local_message_resend_started' => 'float',
        'message_background' => 'float',
        'message_changelog' => 'float',
        'message_collection_filter_mismatch' => 'float',
        'message_fill' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_background' => null,
        'channel_changelog' => null,
        'event_channel_changed' => null,
        'event_channel_deleted' => null,
        'event_channel_enter' => null,
        'event_channel_exit' => null,
        'event_channel_frozen' => null,
        'event_channel_hidden' => null,
        'event_channel_metacounter_deleted' => null,
        'event_channel_metacounter_updated' => null,
        'event_channel_metadata_deleted' => null,
        'event_channel_metadata_updated' => null,
        'event_channel_unfrozen' => null,
        'event_channel_unhidden' => null,
        'event_delivery_receipt_updated' => null,
        'event_mention' => null,
        'event_message_deleted' => null,
        'event_message_received' => null,
        'event_message_sent' => null,
        'event_message_updated' => null,
        'event_operator_updated' => null,
        'event_reaction_updated' => null,
        'event_read_receipt_updated' => null,
        'event_thread_info_updated' => null,
        'event_typing_status_updated' => null,
        'event_user_banned' => null,
        'event_user_declined_invitation' => null,
        'event_user_joined' => null,
        'event_user_left' => null,
        'event_user_muted' => null,
        'event_user_received_invitation' => null,
        'event_user_unbanned' => null,
        'event_user_unmuted' => null,
        'local_message_canceled' => null,
        'local_message_failed' => null,
        'local_message_pending_created' => null,
        'local_message_resend_started' => null,
        'message_background' => null,
        'message_changelog' => null,
        'message_collection_filter_mismatch' => null,
        'message_fill' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_background' => 'CHANNEL_BACKGROUND',
        'channel_changelog' => 'CHANNEL_CHANGELOG',
        'event_channel_changed' => 'EVENT_CHANNEL_CHANGED',
        'event_channel_deleted' => 'EVENT_CHANNEL_DELETED',
        'event_channel_enter' => 'EVENT_CHANNEL_ENTER',
        'event_channel_exit' => 'EVENT_CHANNEL_EXIT',
        'event_channel_frozen' => 'EVENT_CHANNEL_FROZEN',
        'event_channel_hidden' => 'EVENT_CHANNEL_HIDDEN',
        'event_channel_metacounter_deleted' => 'EVENT_CHANNEL_METACOUNTER_DELETED',
        'event_channel_metacounter_updated' => 'EVENT_CHANNEL_METACOUNTER_UPDATED',
        'event_channel_metadata_deleted' => 'EVENT_CHANNEL_METADATA_DELETED',
        'event_channel_metadata_updated' => 'EVENT_CHANNEL_METADATA_UPDATED',
        'event_channel_unfrozen' => 'EVENT_CHANNEL_UNFROZEN',
        'event_channel_unhidden' => 'EVENT_CHANNEL_UNHIDDEN',
        'event_delivery_receipt_updated' => 'EVENT_DELIVERY_RECEIPT_UPDATED',
        'event_mention' => 'EVENT_MENTION',
        'event_message_deleted' => 'EVENT_MESSAGE_DELETED',
        'event_message_received' => 'EVENT_MESSAGE_RECEIVED',
        'event_message_sent' => 'EVENT_MESSAGE_SENT',
        'event_message_updated' => 'EVENT_MESSAGE_UPDATED',
        'event_operator_updated' => 'EVENT_OPERATOR_UPDATED',
        'event_reaction_updated' => 'EVENT_REACTION_UPDATED',
        'event_read_receipt_updated' => 'EVENT_READ_RECEIPT_UPDATED',
        'event_thread_info_updated' => 'EVENT_THREAD_INFO_UPDATED',
        'event_typing_status_updated' => 'EVENT_TYPING_STATUS_UPDATED',
        'event_user_banned' => 'EVENT_USER_BANNED',
        'event_user_declined_invitation' => 'EVENT_USER_DECLINED_INVITATION',
        'event_user_joined' => 'EVENT_USER_JOINED',
        'event_user_left' => 'EVENT_USER_LEFT',
        'event_user_muted' => 'EVENT_USER_MUTED',
        'event_user_received_invitation' => 'EVENT_USER_RECEIVED_INVITATION',
        'event_user_unbanned' => 'EVENT_USER_UNBANNED',
        'event_user_unmuted' => 'EVENT_USER_UNMUTED',
        'local_message_canceled' => 'LOCAL_MESSAGE_CANCELED',
        'local_message_failed' => 'LOCAL_MESSAGE_FAILED',
        'local_message_pending_created' => 'LOCAL_MESSAGE_PENDING_CREATED',
        'local_message_resend_started' => 'LOCAL_MESSAGE_RESEND_STARTED',
        'message_background' => 'MESSAGE_BACKGROUND',
        'message_changelog' => 'MESSAGE_CHANGELOG',
        'message_collection_filter_mismatch' => 'MESSAGE_COLLECTION_FILTER_MISMATCH',
        'message_fill' => 'MESSAGE_FILL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_background' => 'setChannelBackground',
        'channel_changelog' => 'setChannelChangelog',
        'event_channel_changed' => 'setEventChannelChanged',
        'event_channel_deleted' => 'setEventChannelDeleted',
        'event_channel_enter' => 'setEventChannelEnter',
        'event_channel_exit' => 'setEventChannelExit',
        'event_channel_frozen' => 'setEventChannelFrozen',
        'event_channel_hidden' => 'setEventChannelHidden',
        'event_channel_metacounter_deleted' => 'setEventChannelMetacounterDeleted',
        'event_channel_metacounter_updated' => 'setEventChannelMetacounterUpdated',
        'event_channel_metadata_deleted' => 'setEventChannelMetadataDeleted',
        'event_channel_metadata_updated' => 'setEventChannelMetadataUpdated',
        'event_channel_unfrozen' => 'setEventChannelUnfrozen',
        'event_channel_unhidden' => 'setEventChannelUnhidden',
        'event_delivery_receipt_updated' => 'setEventDeliveryReceiptUpdated',
        'event_mention' => 'setEventMention',
        'event_message_deleted' => 'setEventMessageDeleted',
        'event_message_received' => 'setEventMessageReceived',
        'event_message_sent' => 'setEventMessageSent',
        'event_message_updated' => 'setEventMessageUpdated',
        'event_operator_updated' => 'setEventOperatorUpdated',
        'event_reaction_updated' => 'setEventReactionUpdated',
        'event_read_receipt_updated' => 'setEventReadReceiptUpdated',
        'event_thread_info_updated' => 'setEventThreadInfoUpdated',
        'event_typing_status_updated' => 'setEventTypingStatusUpdated',
        'event_user_banned' => 'setEventUserBanned',
        'event_user_declined_invitation' => 'setEventUserDeclinedInvitation',
        'event_user_joined' => 'setEventUserJoined',
        'event_user_left' => 'setEventUserLeft',
        'event_user_muted' => 'setEventUserMuted',
        'event_user_received_invitation' => 'setEventUserReceivedInvitation',
        'event_user_unbanned' => 'setEventUserUnbanned',
        'event_user_unmuted' => 'setEventUserUnmuted',
        'local_message_canceled' => 'setLocalMessageCanceled',
        'local_message_failed' => 'setLocalMessageFailed',
        'local_message_pending_created' => 'setLocalMessagePendingCreated',
        'local_message_resend_started' => 'setLocalMessageResendStarted',
        'message_background' => 'setMessageBackground',
        'message_changelog' => 'setMessageChangelog',
        'message_collection_filter_mismatch' => 'setMessageCollectionFilterMismatch',
        'message_fill' => 'setMessageFill'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_background' => 'getChannelBackground',
        'channel_changelog' => 'getChannelChangelog',
        'event_channel_changed' => 'getEventChannelChanged',
        'event_channel_deleted' => 'getEventChannelDeleted',
        'event_channel_enter' => 'getEventChannelEnter',
        'event_channel_exit' => 'getEventChannelExit',
        'event_channel_frozen' => 'getEventChannelFrozen',
        'event_channel_hidden' => 'getEventChannelHidden',
        'event_channel_metacounter_deleted' => 'getEventChannelMetacounterDeleted',
        'event_channel_metacounter_updated' => 'getEventChannelMetacounterUpdated',
        'event_channel_metadata_deleted' => 'getEventChannelMetadataDeleted',
        'event_channel_metadata_updated' => 'getEventChannelMetadataUpdated',
        'event_channel_unfrozen' => 'getEventChannelUnfrozen',
        'event_channel_unhidden' => 'getEventChannelUnhidden',
        'event_delivery_receipt_updated' => 'getEventDeliveryReceiptUpdated',
        'event_mention' => 'getEventMention',
        'event_message_deleted' => 'getEventMessageDeleted',
        'event_message_received' => 'getEventMessageReceived',
        'event_message_sent' => 'getEventMessageSent',
        'event_message_updated' => 'getEventMessageUpdated',
        'event_operator_updated' => 'getEventOperatorUpdated',
        'event_reaction_updated' => 'getEventReactionUpdated',
        'event_read_receipt_updated' => 'getEventReadReceiptUpdated',
        'event_thread_info_updated' => 'getEventThreadInfoUpdated',
        'event_typing_status_updated' => 'getEventTypingStatusUpdated',
        'event_user_banned' => 'getEventUserBanned',
        'event_user_declined_invitation' => 'getEventUserDeclinedInvitation',
        'event_user_joined' => 'getEventUserJoined',
        'event_user_left' => 'getEventUserLeft',
        'event_user_muted' => 'getEventUserMuted',
        'event_user_received_invitation' => 'getEventUserReceivedInvitation',
        'event_user_unbanned' => 'getEventUserUnbanned',
        'event_user_unmuted' => 'getEventUserUnmuted',
        'local_message_canceled' => 'getLocalMessageCanceled',
        'local_message_failed' => 'getLocalMessageFailed',
        'local_message_pending_created' => 'getLocalMessagePendingCreated',
        'local_message_resend_started' => 'getLocalMessageResendStarted',
        'message_background' => 'getMessageBackground',
        'message_changelog' => 'getMessageChangelog',
        'message_collection_filter_mismatch' => 'getMessageCollectionFilterMismatch',
        'message_fill' => 'getMessageFill'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHANNEL_BACKGROUND_1000 = 1000;
    const CHANNEL_CHANGELOG_1001 = 1001;
    const EVENT_CHANNEL_CHANGED_0 = 0;
    const EVENT_CHANNEL_DELETED_17 = 17;
    const EVENT_CHANNEL_ENTER_5 = 5;
    const EVENT_CHANNEL_EXIT_6 = 6;
    const EVENT_CHANNEL_FROZEN_7 = 7;
    const EVENT_CHANNEL_HIDDEN_9 = 9;
    const EVENT_CHANNEL_METACOUNTER_DELETED_16 = 16;
    const EVENT_CHANNEL_METACOUNTER_UPDATED_15 = 15;
    const EVENT_CHANNEL_METADATA_DELETED_14 = 14;
    const EVENT_CHANNEL_METADATA_UPDATED_13 = 13;
    const EVENT_CHANNEL_UNFROZEN_8 = 8;
    const EVENT_CHANNEL_UNHIDDEN_10 = 10;
    const EVENT_DELIVERY_RECEIPT_UPDATED_27 = 27;
    const EVENT_MENTION_28 = 28;
    const EVENT_MESSAGE_DELETED_25 = 25;
    const EVENT_MESSAGE_RECEIVED_22 = 22;
    const EVENT_MESSAGE_SENT_23 = 23;
    const EVENT_MESSAGE_UPDATED_24 = 24;
    const EVENT_OPERATOR_UPDATED_12 = 12;
    const EVENT_REACTION_UPDATED_29 = 29;
    const EVENT_READ_RECEIPT_UPDATED_26 = 26;
    const EVENT_THREAD_INFO_UPDATED_30 = 30;
    const EVENT_TYPING_STATUS_UPDATED_11 = 11;
    const EVENT_USER_BANNED_20 = 20;
    const EVENT_USER_DECLINED_INVITATION_2 = 2;
    const EVENT_USER_JOINED_3 = 3;
    const EVENT_USER_LEFT_4 = 4;
    const EVENT_USER_MUTED_18 = 18;
    const EVENT_USER_RECEIVED_INVITATION_1 = 1;
    const EVENT_USER_UNBANNED_21 = 21;
    const EVENT_USER_UNMUTED_19 = 19;
    const LOCAL_MESSAGE_CANCELED_2002 = 2002;
    const LOCAL_MESSAGE_FAILED_2001 = 2001;
    const LOCAL_MESSAGE_PENDING_CREATED_2000 = 2000;
    const LOCAL_MESSAGE_RESEND_STARTED_2003 = 2003;
    const MESSAGE_BACKGROUND_1002 = 1002;
    const MESSAGE_CHANGELOG_1004 = 1004;
    const MESSAGE_COLLECTION_FILTER_MISMATCH_2004 = 2004;
    const MESSAGE_FILL_1003 = 1003;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelBackgroundAllowableValues()
    {
        return [
            self::CHANNEL_BACKGROUND_1000,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelChangelogAllowableValues()
    {
        return [
            self::CHANNEL_CHANGELOG_1001,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelChangedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_CHANGED_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelDeletedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_DELETED_17,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelEnterAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_ENTER_5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelExitAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_EXIT_6,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelFrozenAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_FROZEN_7,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelHiddenAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_HIDDEN_9,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelMetacounterDeletedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_METACOUNTER_DELETED_16,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelMetacounterUpdatedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_METACOUNTER_UPDATED_15,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelMetadataDeletedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_METADATA_DELETED_14,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelMetadataUpdatedAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_METADATA_UPDATED_13,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelUnfrozenAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_UNFROZEN_8,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventChannelUnhiddenAllowableValues()
    {
        return [
            self::EVENT_CHANNEL_UNHIDDEN_10,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventDeliveryReceiptUpdatedAllowableValues()
    {
        return [
            self::EVENT_DELIVERY_RECEIPT_UPDATED_27,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventMentionAllowableValues()
    {
        return [
            self::EVENT_MENTION_28,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventMessageDeletedAllowableValues()
    {
        return [
            self::EVENT_MESSAGE_DELETED_25,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventMessageReceivedAllowableValues()
    {
        return [
            self::EVENT_MESSAGE_RECEIVED_22,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventMessageSentAllowableValues()
    {
        return [
            self::EVENT_MESSAGE_SENT_23,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventMessageUpdatedAllowableValues()
    {
        return [
            self::EVENT_MESSAGE_UPDATED_24,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventOperatorUpdatedAllowableValues()
    {
        return [
            self::EVENT_OPERATOR_UPDATED_12,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventReactionUpdatedAllowableValues()
    {
        return [
            self::EVENT_REACTION_UPDATED_29,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventReadReceiptUpdatedAllowableValues()
    {
        return [
            self::EVENT_READ_RECEIPT_UPDATED_26,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventThreadInfoUpdatedAllowableValues()
    {
        return [
            self::EVENT_THREAD_INFO_UPDATED_30,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypingStatusUpdatedAllowableValues()
    {
        return [
            self::EVENT_TYPING_STATUS_UPDATED_11,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserBannedAllowableValues()
    {
        return [
            self::EVENT_USER_BANNED_20,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserDeclinedInvitationAllowableValues()
    {
        return [
            self::EVENT_USER_DECLINED_INVITATION_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserJoinedAllowableValues()
    {
        return [
            self::EVENT_USER_JOINED_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserLeftAllowableValues()
    {
        return [
            self::EVENT_USER_LEFT_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserMutedAllowableValues()
    {
        return [
            self::EVENT_USER_MUTED_18,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserReceivedInvitationAllowableValues()
    {
        return [
            self::EVENT_USER_RECEIVED_INVITATION_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserUnbannedAllowableValues()
    {
        return [
            self::EVENT_USER_UNBANNED_21,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventUserUnmutedAllowableValues()
    {
        return [
            self::EVENT_USER_UNMUTED_19,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalMessageCanceledAllowableValues()
    {
        return [
            self::LOCAL_MESSAGE_CANCELED_2002,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalMessageFailedAllowableValues()
    {
        return [
            self::LOCAL_MESSAGE_FAILED_2001,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalMessagePendingCreatedAllowableValues()
    {
        return [
            self::LOCAL_MESSAGE_PENDING_CREATED_2000,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalMessageResendStartedAllowableValues()
    {
        return [
            self::LOCAL_MESSAGE_RESEND_STARTED_2003,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageBackgroundAllowableValues()
    {
        return [
            self::MESSAGE_BACKGROUND_1002,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageChangelogAllowableValues()
    {
        return [
            self::MESSAGE_CHANGELOG_1004,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageCollectionFilterMismatchAllowableValues()
    {
        return [
            self::MESSAGE_COLLECTION_FILTER_MISMATCH_2004,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageFillAllowableValues()
    {
        return [
            self::MESSAGE_FILL_1003,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_background'] = $data['channel_background'] ?? null;
        $this->container['channel_changelog'] = $data['channel_changelog'] ?? null;
        $this->container['event_channel_changed'] = $data['event_channel_changed'] ?? null;
        $this->container['event_channel_deleted'] = $data['event_channel_deleted'] ?? null;
        $this->container['event_channel_enter'] = $data['event_channel_enter'] ?? null;
        $this->container['event_channel_exit'] = $data['event_channel_exit'] ?? null;
        $this->container['event_channel_frozen'] = $data['event_channel_frozen'] ?? null;
        $this->container['event_channel_hidden'] = $data['event_channel_hidden'] ?? null;
        $this->container['event_channel_metacounter_deleted'] = $data['event_channel_metacounter_deleted'] ?? null;
        $this->container['event_channel_metacounter_updated'] = $data['event_channel_metacounter_updated'] ?? null;
        $this->container['event_channel_metadata_deleted'] = $data['event_channel_metadata_deleted'] ?? null;
        $this->container['event_channel_metadata_updated'] = $data['event_channel_metadata_updated'] ?? null;
        $this->container['event_channel_unfrozen'] = $data['event_channel_unfrozen'] ?? null;
        $this->container['event_channel_unhidden'] = $data['event_channel_unhidden'] ?? null;
        $this->container['event_delivery_receipt_updated'] = $data['event_delivery_receipt_updated'] ?? null;
        $this->container['event_mention'] = $data['event_mention'] ?? null;
        $this->container['event_message_deleted'] = $data['event_message_deleted'] ?? null;
        $this->container['event_message_received'] = $data['event_message_received'] ?? null;
        $this->container['event_message_sent'] = $data['event_message_sent'] ?? null;
        $this->container['event_message_updated'] = $data['event_message_updated'] ?? null;
        $this->container['event_operator_updated'] = $data['event_operator_updated'] ?? null;
        $this->container['event_reaction_updated'] = $data['event_reaction_updated'] ?? null;
        $this->container['event_read_receipt_updated'] = $data['event_read_receipt_updated'] ?? null;
        $this->container['event_thread_info_updated'] = $data['event_thread_info_updated'] ?? null;
        $this->container['event_typing_status_updated'] = $data['event_typing_status_updated'] ?? null;
        $this->container['event_user_banned'] = $data['event_user_banned'] ?? null;
        $this->container['event_user_declined_invitation'] = $data['event_user_declined_invitation'] ?? null;
        $this->container['event_user_joined'] = $data['event_user_joined'] ?? null;
        $this->container['event_user_left'] = $data['event_user_left'] ?? null;
        $this->container['event_user_muted'] = $data['event_user_muted'] ?? null;
        $this->container['event_user_received_invitation'] = $data['event_user_received_invitation'] ?? null;
        $this->container['event_user_unbanned'] = $data['event_user_unbanned'] ?? null;
        $this->container['event_user_unmuted'] = $data['event_user_unmuted'] ?? null;
        $this->container['local_message_canceled'] = $data['local_message_canceled'] ?? null;
        $this->container['local_message_failed'] = $data['local_message_failed'] ?? null;
        $this->container['local_message_pending_created'] = $data['local_message_pending_created'] ?? null;
        $this->container['local_message_resend_started'] = $data['local_message_resend_started'] ?? null;
        $this->container['message_background'] = $data['message_background'] ?? null;
        $this->container['message_changelog'] = $data['message_changelog'] ?? null;
        $this->container['message_collection_filter_mismatch'] = $data['message_collection_filter_mismatch'] ?? null;
        $this->container['message_fill'] = $data['message_fill'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelBackgroundAllowableValues();
        if (!is_null($this->container['channel_background']) && !in_array($this->container['channel_background'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_background', must be one of '%s'",
                $this->container['channel_background'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelChangelogAllowableValues();
        if (!is_null($this->container['channel_changelog']) && !in_array($this->container['channel_changelog'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_changelog', must be one of '%s'",
                $this->container['channel_changelog'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelChangedAllowableValues();
        if (!is_null($this->container['event_channel_changed']) && !in_array($this->container['event_channel_changed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_changed', must be one of '%s'",
                $this->container['event_channel_changed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelDeletedAllowableValues();
        if (!is_null($this->container['event_channel_deleted']) && !in_array($this->container['event_channel_deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_deleted', must be one of '%s'",
                $this->container['event_channel_deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelEnterAllowableValues();
        if (!is_null($this->container['event_channel_enter']) && !in_array($this->container['event_channel_enter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_enter', must be one of '%s'",
                $this->container['event_channel_enter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelExitAllowableValues();
        if (!is_null($this->container['event_channel_exit']) && !in_array($this->container['event_channel_exit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_exit', must be one of '%s'",
                $this->container['event_channel_exit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelFrozenAllowableValues();
        if (!is_null($this->container['event_channel_frozen']) && !in_array($this->container['event_channel_frozen'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_frozen', must be one of '%s'",
                $this->container['event_channel_frozen'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelHiddenAllowableValues();
        if (!is_null($this->container['event_channel_hidden']) && !in_array($this->container['event_channel_hidden'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_hidden', must be one of '%s'",
                $this->container['event_channel_hidden'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelMetacounterDeletedAllowableValues();
        if (!is_null($this->container['event_channel_metacounter_deleted']) && !in_array($this->container['event_channel_metacounter_deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_metacounter_deleted', must be one of '%s'",
                $this->container['event_channel_metacounter_deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelMetacounterUpdatedAllowableValues();
        if (!is_null($this->container['event_channel_metacounter_updated']) && !in_array($this->container['event_channel_metacounter_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_metacounter_updated', must be one of '%s'",
                $this->container['event_channel_metacounter_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelMetadataDeletedAllowableValues();
        if (!is_null($this->container['event_channel_metadata_deleted']) && !in_array($this->container['event_channel_metadata_deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_metadata_deleted', must be one of '%s'",
                $this->container['event_channel_metadata_deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelMetadataUpdatedAllowableValues();
        if (!is_null($this->container['event_channel_metadata_updated']) && !in_array($this->container['event_channel_metadata_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_metadata_updated', must be one of '%s'",
                $this->container['event_channel_metadata_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelUnfrozenAllowableValues();
        if (!is_null($this->container['event_channel_unfrozen']) && !in_array($this->container['event_channel_unfrozen'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_unfrozen', must be one of '%s'",
                $this->container['event_channel_unfrozen'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventChannelUnhiddenAllowableValues();
        if (!is_null($this->container['event_channel_unhidden']) && !in_array($this->container['event_channel_unhidden'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_channel_unhidden', must be one of '%s'",
                $this->container['event_channel_unhidden'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventDeliveryReceiptUpdatedAllowableValues();
        if (!is_null($this->container['event_delivery_receipt_updated']) && !in_array($this->container['event_delivery_receipt_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_delivery_receipt_updated', must be one of '%s'",
                $this->container['event_delivery_receipt_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventMentionAllowableValues();
        if (!is_null($this->container['event_mention']) && !in_array($this->container['event_mention'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_mention', must be one of '%s'",
                $this->container['event_mention'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventMessageDeletedAllowableValues();
        if (!is_null($this->container['event_message_deleted']) && !in_array($this->container['event_message_deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_message_deleted', must be one of '%s'",
                $this->container['event_message_deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventMessageReceivedAllowableValues();
        if (!is_null($this->container['event_message_received']) && !in_array($this->container['event_message_received'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_message_received', must be one of '%s'",
                $this->container['event_message_received'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventMessageSentAllowableValues();
        if (!is_null($this->container['event_message_sent']) && !in_array($this->container['event_message_sent'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_message_sent', must be one of '%s'",
                $this->container['event_message_sent'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventMessageUpdatedAllowableValues();
        if (!is_null($this->container['event_message_updated']) && !in_array($this->container['event_message_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_message_updated', must be one of '%s'",
                $this->container['event_message_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventOperatorUpdatedAllowableValues();
        if (!is_null($this->container['event_operator_updated']) && !in_array($this->container['event_operator_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_operator_updated', must be one of '%s'",
                $this->container['event_operator_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventReactionUpdatedAllowableValues();
        if (!is_null($this->container['event_reaction_updated']) && !in_array($this->container['event_reaction_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_reaction_updated', must be one of '%s'",
                $this->container['event_reaction_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventReadReceiptUpdatedAllowableValues();
        if (!is_null($this->container['event_read_receipt_updated']) && !in_array($this->container['event_read_receipt_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_read_receipt_updated', must be one of '%s'",
                $this->container['event_read_receipt_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventThreadInfoUpdatedAllowableValues();
        if (!is_null($this->container['event_thread_info_updated']) && !in_array($this->container['event_thread_info_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_thread_info_updated', must be one of '%s'",
                $this->container['event_thread_info_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventTypingStatusUpdatedAllowableValues();
        if (!is_null($this->container['event_typing_status_updated']) && !in_array($this->container['event_typing_status_updated'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_typing_status_updated', must be one of '%s'",
                $this->container['event_typing_status_updated'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserBannedAllowableValues();
        if (!is_null($this->container['event_user_banned']) && !in_array($this->container['event_user_banned'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_banned', must be one of '%s'",
                $this->container['event_user_banned'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserDeclinedInvitationAllowableValues();
        if (!is_null($this->container['event_user_declined_invitation']) && !in_array($this->container['event_user_declined_invitation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_declined_invitation', must be one of '%s'",
                $this->container['event_user_declined_invitation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserJoinedAllowableValues();
        if (!is_null($this->container['event_user_joined']) && !in_array($this->container['event_user_joined'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_joined', must be one of '%s'",
                $this->container['event_user_joined'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserLeftAllowableValues();
        if (!is_null($this->container['event_user_left']) && !in_array($this->container['event_user_left'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_left', must be one of '%s'",
                $this->container['event_user_left'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserMutedAllowableValues();
        if (!is_null($this->container['event_user_muted']) && !in_array($this->container['event_user_muted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_muted', must be one of '%s'",
                $this->container['event_user_muted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserReceivedInvitationAllowableValues();
        if (!is_null($this->container['event_user_received_invitation']) && !in_array($this->container['event_user_received_invitation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_received_invitation', must be one of '%s'",
                $this->container['event_user_received_invitation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserUnbannedAllowableValues();
        if (!is_null($this->container['event_user_unbanned']) && !in_array($this->container['event_user_unbanned'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_unbanned', must be one of '%s'",
                $this->container['event_user_unbanned'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventUserUnmutedAllowableValues();
        if (!is_null($this->container['event_user_unmuted']) && !in_array($this->container['event_user_unmuted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_user_unmuted', must be one of '%s'",
                $this->container['event_user_unmuted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalMessageCanceledAllowableValues();
        if (!is_null($this->container['local_message_canceled']) && !in_array($this->container['local_message_canceled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_message_canceled', must be one of '%s'",
                $this->container['local_message_canceled'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalMessageFailedAllowableValues();
        if (!is_null($this->container['local_message_failed']) && !in_array($this->container['local_message_failed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_message_failed', must be one of '%s'",
                $this->container['local_message_failed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalMessagePendingCreatedAllowableValues();
        if (!is_null($this->container['local_message_pending_created']) && !in_array($this->container['local_message_pending_created'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_message_pending_created', must be one of '%s'",
                $this->container['local_message_pending_created'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalMessageResendStartedAllowableValues();
        if (!is_null($this->container['local_message_resend_started']) && !in_array($this->container['local_message_resend_started'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_message_resend_started', must be one of '%s'",
                $this->container['local_message_resend_started'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageBackgroundAllowableValues();
        if (!is_null($this->container['message_background']) && !in_array($this->container['message_background'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_background', must be one of '%s'",
                $this->container['message_background'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageChangelogAllowableValues();
        if (!is_null($this->container['message_changelog']) && !in_array($this->container['message_changelog'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_changelog', must be one of '%s'",
                $this->container['message_changelog'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageCollectionFilterMismatchAllowableValues();
        if (!is_null($this->container['message_collection_filter_mismatch']) && !in_array($this->container['message_collection_filter_mismatch'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_collection_filter_mismatch', must be one of '%s'",
                $this->container['message_collection_filter_mismatch'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageFillAllowableValues();
        if (!is_null($this->container['message_fill']) && !in_array($this->container['message_fill'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_fill', must be one of '%s'",
                $this->container['message_fill'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_background
     *
     * @return float|null
     */
    public function getChannelBackground()
    {
        return $this->container['channel_background'];
    }

    /**
     * Sets channel_background
     *
     * @param float|null $channel_background channel_background
     *
     * @return self
     */
    public function setChannelBackground($channel_background)
    {
        $allowedValues = $this->getChannelBackgroundAllowableValues();
        if (!is_null($channel_background) && !in_array($channel_background, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_background', must be one of '%s'",
                    $channel_background,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_background'] = $channel_background;

        return $this;
    }

    /**
     * Gets channel_changelog
     *
     * @return float|null
     */
    public function getChannelChangelog()
    {
        return $this->container['channel_changelog'];
    }

    /**
     * Sets channel_changelog
     *
     * @param float|null $channel_changelog channel_changelog
     *
     * @return self
     */
    public function setChannelChangelog($channel_changelog)
    {
        $allowedValues = $this->getChannelChangelogAllowableValues();
        if (!is_null($channel_changelog) && !in_array($channel_changelog, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_changelog', must be one of '%s'",
                    $channel_changelog,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_changelog'] = $channel_changelog;

        return $this;
    }

    /**
     * Gets event_channel_changed
     *
     * @return float|null
     */
    public function getEventChannelChanged()
    {
        return $this->container['event_channel_changed'];
    }

    /**
     * Sets event_channel_changed
     *
     * @param float|null $event_channel_changed event_channel_changed
     *
     * @return self
     */
    public function setEventChannelChanged($event_channel_changed)
    {
        $allowedValues = $this->getEventChannelChangedAllowableValues();
        if (!is_null($event_channel_changed) && !in_array($event_channel_changed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_changed', must be one of '%s'",
                    $event_channel_changed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_changed'] = $event_channel_changed;

        return $this;
    }

    /**
     * Gets event_channel_deleted
     *
     * @return float|null
     */
    public function getEventChannelDeleted()
    {
        return $this->container['event_channel_deleted'];
    }

    /**
     * Sets event_channel_deleted
     *
     * @param float|null $event_channel_deleted event_channel_deleted
     *
     * @return self
     */
    public function setEventChannelDeleted($event_channel_deleted)
    {
        $allowedValues = $this->getEventChannelDeletedAllowableValues();
        if (!is_null($event_channel_deleted) && !in_array($event_channel_deleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_deleted', must be one of '%s'",
                    $event_channel_deleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_deleted'] = $event_channel_deleted;

        return $this;
    }

    /**
     * Gets event_channel_enter
     *
     * @return float|null
     */
    public function getEventChannelEnter()
    {
        return $this->container['event_channel_enter'];
    }

    /**
     * Sets event_channel_enter
     *
     * @param float|null $event_channel_enter event_channel_enter
     *
     * @return self
     */
    public function setEventChannelEnter($event_channel_enter)
    {
        $allowedValues = $this->getEventChannelEnterAllowableValues();
        if (!is_null($event_channel_enter) && !in_array($event_channel_enter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_enter', must be one of '%s'",
                    $event_channel_enter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_enter'] = $event_channel_enter;

        return $this;
    }

    /**
     * Gets event_channel_exit
     *
     * @return float|null
     */
    public function getEventChannelExit()
    {
        return $this->container['event_channel_exit'];
    }

    /**
     * Sets event_channel_exit
     *
     * @param float|null $event_channel_exit event_channel_exit
     *
     * @return self
     */
    public function setEventChannelExit($event_channel_exit)
    {
        $allowedValues = $this->getEventChannelExitAllowableValues();
        if (!is_null($event_channel_exit) && !in_array($event_channel_exit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_exit', must be one of '%s'",
                    $event_channel_exit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_exit'] = $event_channel_exit;

        return $this;
    }

    /**
     * Gets event_channel_frozen
     *
     * @return float|null
     */
    public function getEventChannelFrozen()
    {
        return $this->container['event_channel_frozen'];
    }

    /**
     * Sets event_channel_frozen
     *
     * @param float|null $event_channel_frozen event_channel_frozen
     *
     * @return self
     */
    public function setEventChannelFrozen($event_channel_frozen)
    {
        $allowedValues = $this->getEventChannelFrozenAllowableValues();
        if (!is_null($event_channel_frozen) && !in_array($event_channel_frozen, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_frozen', must be one of '%s'",
                    $event_channel_frozen,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_frozen'] = $event_channel_frozen;

        return $this;
    }

    /**
     * Gets event_channel_hidden
     *
     * @return float|null
     */
    public function getEventChannelHidden()
    {
        return $this->container['event_channel_hidden'];
    }

    /**
     * Sets event_channel_hidden
     *
     * @param float|null $event_channel_hidden event_channel_hidden
     *
     * @return self
     */
    public function setEventChannelHidden($event_channel_hidden)
    {
        $allowedValues = $this->getEventChannelHiddenAllowableValues();
        if (!is_null($event_channel_hidden) && !in_array($event_channel_hidden, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_hidden', must be one of '%s'",
                    $event_channel_hidden,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_hidden'] = $event_channel_hidden;

        return $this;
    }

    /**
     * Gets event_channel_metacounter_deleted
     *
     * @return float|null
     */
    public function getEventChannelMetacounterDeleted()
    {
        return $this->container['event_channel_metacounter_deleted'];
    }

    /**
     * Sets event_channel_metacounter_deleted
     *
     * @param float|null $event_channel_metacounter_deleted event_channel_metacounter_deleted
     *
     * @return self
     */
    public function setEventChannelMetacounterDeleted($event_channel_metacounter_deleted)
    {
        $allowedValues = $this->getEventChannelMetacounterDeletedAllowableValues();
        if (!is_null($event_channel_metacounter_deleted) && !in_array($event_channel_metacounter_deleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_metacounter_deleted', must be one of '%s'",
                    $event_channel_metacounter_deleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_metacounter_deleted'] = $event_channel_metacounter_deleted;

        return $this;
    }

    /**
     * Gets event_channel_metacounter_updated
     *
     * @return float|null
     */
    public function getEventChannelMetacounterUpdated()
    {
        return $this->container['event_channel_metacounter_updated'];
    }

    /**
     * Sets event_channel_metacounter_updated
     *
     * @param float|null $event_channel_metacounter_updated event_channel_metacounter_updated
     *
     * @return self
     */
    public function setEventChannelMetacounterUpdated($event_channel_metacounter_updated)
    {
        $allowedValues = $this->getEventChannelMetacounterUpdatedAllowableValues();
        if (!is_null($event_channel_metacounter_updated) && !in_array($event_channel_metacounter_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_metacounter_updated', must be one of '%s'",
                    $event_channel_metacounter_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_metacounter_updated'] = $event_channel_metacounter_updated;

        return $this;
    }

    /**
     * Gets event_channel_metadata_deleted
     *
     * @return float|null
     */
    public function getEventChannelMetadataDeleted()
    {
        return $this->container['event_channel_metadata_deleted'];
    }

    /**
     * Sets event_channel_metadata_deleted
     *
     * @param float|null $event_channel_metadata_deleted event_channel_metadata_deleted
     *
     * @return self
     */
    public function setEventChannelMetadataDeleted($event_channel_metadata_deleted)
    {
        $allowedValues = $this->getEventChannelMetadataDeletedAllowableValues();
        if (!is_null($event_channel_metadata_deleted) && !in_array($event_channel_metadata_deleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_metadata_deleted', must be one of '%s'",
                    $event_channel_metadata_deleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_metadata_deleted'] = $event_channel_metadata_deleted;

        return $this;
    }

    /**
     * Gets event_channel_metadata_updated
     *
     * @return float|null
     */
    public function getEventChannelMetadataUpdated()
    {
        return $this->container['event_channel_metadata_updated'];
    }

    /**
     * Sets event_channel_metadata_updated
     *
     * @param float|null $event_channel_metadata_updated event_channel_metadata_updated
     *
     * @return self
     */
    public function setEventChannelMetadataUpdated($event_channel_metadata_updated)
    {
        $allowedValues = $this->getEventChannelMetadataUpdatedAllowableValues();
        if (!is_null($event_channel_metadata_updated) && !in_array($event_channel_metadata_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_metadata_updated', must be one of '%s'",
                    $event_channel_metadata_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_metadata_updated'] = $event_channel_metadata_updated;

        return $this;
    }

    /**
     * Gets event_channel_unfrozen
     *
     * @return float|null
     */
    public function getEventChannelUnfrozen()
    {
        return $this->container['event_channel_unfrozen'];
    }

    /**
     * Sets event_channel_unfrozen
     *
     * @param float|null $event_channel_unfrozen event_channel_unfrozen
     *
     * @return self
     */
    public function setEventChannelUnfrozen($event_channel_unfrozen)
    {
        $allowedValues = $this->getEventChannelUnfrozenAllowableValues();
        if (!is_null($event_channel_unfrozen) && !in_array($event_channel_unfrozen, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_unfrozen', must be one of '%s'",
                    $event_channel_unfrozen,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_unfrozen'] = $event_channel_unfrozen;

        return $this;
    }

    /**
     * Gets event_channel_unhidden
     *
     * @return float|null
     */
    public function getEventChannelUnhidden()
    {
        return $this->container['event_channel_unhidden'];
    }

    /**
     * Sets event_channel_unhidden
     *
     * @param float|null $event_channel_unhidden event_channel_unhidden
     *
     * @return self
     */
    public function setEventChannelUnhidden($event_channel_unhidden)
    {
        $allowedValues = $this->getEventChannelUnhiddenAllowableValues();
        if (!is_null($event_channel_unhidden) && !in_array($event_channel_unhidden, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_channel_unhidden', must be one of '%s'",
                    $event_channel_unhidden,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_channel_unhidden'] = $event_channel_unhidden;

        return $this;
    }

    /**
     * Gets event_delivery_receipt_updated
     *
     * @return float|null
     */
    public function getEventDeliveryReceiptUpdated()
    {
        return $this->container['event_delivery_receipt_updated'];
    }

    /**
     * Sets event_delivery_receipt_updated
     *
     * @param float|null $event_delivery_receipt_updated event_delivery_receipt_updated
     *
     * @return self
     */
    public function setEventDeliveryReceiptUpdated($event_delivery_receipt_updated)
    {
        $allowedValues = $this->getEventDeliveryReceiptUpdatedAllowableValues();
        if (!is_null($event_delivery_receipt_updated) && !in_array($event_delivery_receipt_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_delivery_receipt_updated', must be one of '%s'",
                    $event_delivery_receipt_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_delivery_receipt_updated'] = $event_delivery_receipt_updated;

        return $this;
    }

    /**
     * Gets event_mention
     *
     * @return float|null
     */
    public function getEventMention()
    {
        return $this->container['event_mention'];
    }

    /**
     * Sets event_mention
     *
     * @param float|null $event_mention event_mention
     *
     * @return self
     */
    public function setEventMention($event_mention)
    {
        $allowedValues = $this->getEventMentionAllowableValues();
        if (!is_null($event_mention) && !in_array($event_mention, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_mention', must be one of '%s'",
                    $event_mention,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_mention'] = $event_mention;

        return $this;
    }

    /**
     * Gets event_message_deleted
     *
     * @return float|null
     */
    public function getEventMessageDeleted()
    {
        return $this->container['event_message_deleted'];
    }

    /**
     * Sets event_message_deleted
     *
     * @param float|null $event_message_deleted event_message_deleted
     *
     * @return self
     */
    public function setEventMessageDeleted($event_message_deleted)
    {
        $allowedValues = $this->getEventMessageDeletedAllowableValues();
        if (!is_null($event_message_deleted) && !in_array($event_message_deleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_message_deleted', must be one of '%s'",
                    $event_message_deleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_message_deleted'] = $event_message_deleted;

        return $this;
    }

    /**
     * Gets event_message_received
     *
     * @return float|null
     */
    public function getEventMessageReceived()
    {
        return $this->container['event_message_received'];
    }

    /**
     * Sets event_message_received
     *
     * @param float|null $event_message_received event_message_received
     *
     * @return self
     */
    public function setEventMessageReceived($event_message_received)
    {
        $allowedValues = $this->getEventMessageReceivedAllowableValues();
        if (!is_null($event_message_received) && !in_array($event_message_received, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_message_received', must be one of '%s'",
                    $event_message_received,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_message_received'] = $event_message_received;

        return $this;
    }

    /**
     * Gets event_message_sent
     *
     * @return float|null
     */
    public function getEventMessageSent()
    {
        return $this->container['event_message_sent'];
    }

    /**
     * Sets event_message_sent
     *
     * @param float|null $event_message_sent event_message_sent
     *
     * @return self
     */
    public function setEventMessageSent($event_message_sent)
    {
        $allowedValues = $this->getEventMessageSentAllowableValues();
        if (!is_null($event_message_sent) && !in_array($event_message_sent, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_message_sent', must be one of '%s'",
                    $event_message_sent,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_message_sent'] = $event_message_sent;

        return $this;
    }

    /**
     * Gets event_message_updated
     *
     * @return float|null
     */
    public function getEventMessageUpdated()
    {
        return $this->container['event_message_updated'];
    }

    /**
     * Sets event_message_updated
     *
     * @param float|null $event_message_updated event_message_updated
     *
     * @return self
     */
    public function setEventMessageUpdated($event_message_updated)
    {
        $allowedValues = $this->getEventMessageUpdatedAllowableValues();
        if (!is_null($event_message_updated) && !in_array($event_message_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_message_updated', must be one of '%s'",
                    $event_message_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_message_updated'] = $event_message_updated;

        return $this;
    }

    /**
     * Gets event_operator_updated
     *
     * @return float|null
     */
    public function getEventOperatorUpdated()
    {
        return $this->container['event_operator_updated'];
    }

    /**
     * Sets event_operator_updated
     *
     * @param float|null $event_operator_updated event_operator_updated
     *
     * @return self
     */
    public function setEventOperatorUpdated($event_operator_updated)
    {
        $allowedValues = $this->getEventOperatorUpdatedAllowableValues();
        if (!is_null($event_operator_updated) && !in_array($event_operator_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_operator_updated', must be one of '%s'",
                    $event_operator_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_operator_updated'] = $event_operator_updated;

        return $this;
    }

    /**
     * Gets event_reaction_updated
     *
     * @return float|null
     */
    public function getEventReactionUpdated()
    {
        return $this->container['event_reaction_updated'];
    }

    /**
     * Sets event_reaction_updated
     *
     * @param float|null $event_reaction_updated event_reaction_updated
     *
     * @return self
     */
    public function setEventReactionUpdated($event_reaction_updated)
    {
        $allowedValues = $this->getEventReactionUpdatedAllowableValues();
        if (!is_null($event_reaction_updated) && !in_array($event_reaction_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_reaction_updated', must be one of '%s'",
                    $event_reaction_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_reaction_updated'] = $event_reaction_updated;

        return $this;
    }

    /**
     * Gets event_read_receipt_updated
     *
     * @return float|null
     */
    public function getEventReadReceiptUpdated()
    {
        return $this->container['event_read_receipt_updated'];
    }

    /**
     * Sets event_read_receipt_updated
     *
     * @param float|null $event_read_receipt_updated event_read_receipt_updated
     *
     * @return self
     */
    public function setEventReadReceiptUpdated($event_read_receipt_updated)
    {
        $allowedValues = $this->getEventReadReceiptUpdatedAllowableValues();
        if (!is_null($event_read_receipt_updated) && !in_array($event_read_receipt_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_read_receipt_updated', must be one of '%s'",
                    $event_read_receipt_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_read_receipt_updated'] = $event_read_receipt_updated;

        return $this;
    }

    /**
     * Gets event_thread_info_updated
     *
     * @return float|null
     */
    public function getEventThreadInfoUpdated()
    {
        return $this->container['event_thread_info_updated'];
    }

    /**
     * Sets event_thread_info_updated
     *
     * @param float|null $event_thread_info_updated event_thread_info_updated
     *
     * @return self
     */
    public function setEventThreadInfoUpdated($event_thread_info_updated)
    {
        $allowedValues = $this->getEventThreadInfoUpdatedAllowableValues();
        if (!is_null($event_thread_info_updated) && !in_array($event_thread_info_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_thread_info_updated', must be one of '%s'",
                    $event_thread_info_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_thread_info_updated'] = $event_thread_info_updated;

        return $this;
    }

    /**
     * Gets event_typing_status_updated
     *
     * @return float|null
     */
    public function getEventTypingStatusUpdated()
    {
        return $this->container['event_typing_status_updated'];
    }

    /**
     * Sets event_typing_status_updated
     *
     * @param float|null $event_typing_status_updated event_typing_status_updated
     *
     * @return self
     */
    public function setEventTypingStatusUpdated($event_typing_status_updated)
    {
        $allowedValues = $this->getEventTypingStatusUpdatedAllowableValues();
        if (!is_null($event_typing_status_updated) && !in_array($event_typing_status_updated, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_typing_status_updated', must be one of '%s'",
                    $event_typing_status_updated,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_typing_status_updated'] = $event_typing_status_updated;

        return $this;
    }

    /**
     * Gets event_user_banned
     *
     * @return float|null
     */
    public function getEventUserBanned()
    {
        return $this->container['event_user_banned'];
    }

    /**
     * Sets event_user_banned
     *
     * @param float|null $event_user_banned event_user_banned
     *
     * @return self
     */
    public function setEventUserBanned($event_user_banned)
    {
        $allowedValues = $this->getEventUserBannedAllowableValues();
        if (!is_null($event_user_banned) && !in_array($event_user_banned, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_banned', must be one of '%s'",
                    $event_user_banned,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_banned'] = $event_user_banned;

        return $this;
    }

    /**
     * Gets event_user_declined_invitation
     *
     * @return float|null
     */
    public function getEventUserDeclinedInvitation()
    {
        return $this->container['event_user_declined_invitation'];
    }

    /**
     * Sets event_user_declined_invitation
     *
     * @param float|null $event_user_declined_invitation event_user_declined_invitation
     *
     * @return self
     */
    public function setEventUserDeclinedInvitation($event_user_declined_invitation)
    {
        $allowedValues = $this->getEventUserDeclinedInvitationAllowableValues();
        if (!is_null($event_user_declined_invitation) && !in_array($event_user_declined_invitation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_declined_invitation', must be one of '%s'",
                    $event_user_declined_invitation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_declined_invitation'] = $event_user_declined_invitation;

        return $this;
    }

    /**
     * Gets event_user_joined
     *
     * @return float|null
     */
    public function getEventUserJoined()
    {
        return $this->container['event_user_joined'];
    }

    /**
     * Sets event_user_joined
     *
     * @param float|null $event_user_joined event_user_joined
     *
     * @return self
     */
    public function setEventUserJoined($event_user_joined)
    {
        $allowedValues = $this->getEventUserJoinedAllowableValues();
        if (!is_null($event_user_joined) && !in_array($event_user_joined, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_joined', must be one of '%s'",
                    $event_user_joined,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_joined'] = $event_user_joined;

        return $this;
    }

    /**
     * Gets event_user_left
     *
     * @return float|null
     */
    public function getEventUserLeft()
    {
        return $this->container['event_user_left'];
    }

    /**
     * Sets event_user_left
     *
     * @param float|null $event_user_left event_user_left
     *
     * @return self
     */
    public function setEventUserLeft($event_user_left)
    {
        $allowedValues = $this->getEventUserLeftAllowableValues();
        if (!is_null($event_user_left) && !in_array($event_user_left, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_left', must be one of '%s'",
                    $event_user_left,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_left'] = $event_user_left;

        return $this;
    }

    /**
     * Gets event_user_muted
     *
     * @return float|null
     */
    public function getEventUserMuted()
    {
        return $this->container['event_user_muted'];
    }

    /**
     * Sets event_user_muted
     *
     * @param float|null $event_user_muted event_user_muted
     *
     * @return self
     */
    public function setEventUserMuted($event_user_muted)
    {
        $allowedValues = $this->getEventUserMutedAllowableValues();
        if (!is_null($event_user_muted) && !in_array($event_user_muted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_muted', must be one of '%s'",
                    $event_user_muted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_muted'] = $event_user_muted;

        return $this;
    }

    /**
     * Gets event_user_received_invitation
     *
     * @return float|null
     */
    public function getEventUserReceivedInvitation()
    {
        return $this->container['event_user_received_invitation'];
    }

    /**
     * Sets event_user_received_invitation
     *
     * @param float|null $event_user_received_invitation event_user_received_invitation
     *
     * @return self
     */
    public function setEventUserReceivedInvitation($event_user_received_invitation)
    {
        $allowedValues = $this->getEventUserReceivedInvitationAllowableValues();
        if (!is_null($event_user_received_invitation) && !in_array($event_user_received_invitation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_received_invitation', must be one of '%s'",
                    $event_user_received_invitation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_received_invitation'] = $event_user_received_invitation;

        return $this;
    }

    /**
     * Gets event_user_unbanned
     *
     * @return float|null
     */
    public function getEventUserUnbanned()
    {
        return $this->container['event_user_unbanned'];
    }

    /**
     * Sets event_user_unbanned
     *
     * @param float|null $event_user_unbanned event_user_unbanned
     *
     * @return self
     */
    public function setEventUserUnbanned($event_user_unbanned)
    {
        $allowedValues = $this->getEventUserUnbannedAllowableValues();
        if (!is_null($event_user_unbanned) && !in_array($event_user_unbanned, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_unbanned', must be one of '%s'",
                    $event_user_unbanned,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_unbanned'] = $event_user_unbanned;

        return $this;
    }

    /**
     * Gets event_user_unmuted
     *
     * @return float|null
     */
    public function getEventUserUnmuted()
    {
        return $this->container['event_user_unmuted'];
    }

    /**
     * Sets event_user_unmuted
     *
     * @param float|null $event_user_unmuted event_user_unmuted
     *
     * @return self
     */
    public function setEventUserUnmuted($event_user_unmuted)
    {
        $allowedValues = $this->getEventUserUnmutedAllowableValues();
        if (!is_null($event_user_unmuted) && !in_array($event_user_unmuted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_user_unmuted', must be one of '%s'",
                    $event_user_unmuted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_user_unmuted'] = $event_user_unmuted;

        return $this;
    }

    /**
     * Gets local_message_canceled
     *
     * @return float|null
     */
    public function getLocalMessageCanceled()
    {
        return $this->container['local_message_canceled'];
    }

    /**
     * Sets local_message_canceled
     *
     * @param float|null $local_message_canceled local_message_canceled
     *
     * @return self
     */
    public function setLocalMessageCanceled($local_message_canceled)
    {
        $allowedValues = $this->getLocalMessageCanceledAllowableValues();
        if (!is_null($local_message_canceled) && !in_array($local_message_canceled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_message_canceled', must be one of '%s'",
                    $local_message_canceled,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_message_canceled'] = $local_message_canceled;

        return $this;
    }

    /**
     * Gets local_message_failed
     *
     * @return float|null
     */
    public function getLocalMessageFailed()
    {
        return $this->container['local_message_failed'];
    }

    /**
     * Sets local_message_failed
     *
     * @param float|null $local_message_failed local_message_failed
     *
     * @return self
     */
    public function setLocalMessageFailed($local_message_failed)
    {
        $allowedValues = $this->getLocalMessageFailedAllowableValues();
        if (!is_null($local_message_failed) && !in_array($local_message_failed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_message_failed', must be one of '%s'",
                    $local_message_failed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_message_failed'] = $local_message_failed;

        return $this;
    }

    /**
     * Gets local_message_pending_created
     *
     * @return float|null
     */
    public function getLocalMessagePendingCreated()
    {
        return $this->container['local_message_pending_created'];
    }

    /**
     * Sets local_message_pending_created
     *
     * @param float|null $local_message_pending_created local_message_pending_created
     *
     * @return self
     */
    public function setLocalMessagePendingCreated($local_message_pending_created)
    {
        $allowedValues = $this->getLocalMessagePendingCreatedAllowableValues();
        if (!is_null($local_message_pending_created) && !in_array($local_message_pending_created, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_message_pending_created', must be one of '%s'",
                    $local_message_pending_created,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_message_pending_created'] = $local_message_pending_created;

        return $this;
    }

    /**
     * Gets local_message_resend_started
     *
     * @return float|null
     */
    public function getLocalMessageResendStarted()
    {
        return $this->container['local_message_resend_started'];
    }

    /**
     * Sets local_message_resend_started
     *
     * @param float|null $local_message_resend_started local_message_resend_started
     *
     * @return self
     */
    public function setLocalMessageResendStarted($local_message_resend_started)
    {
        $allowedValues = $this->getLocalMessageResendStartedAllowableValues();
        if (!is_null($local_message_resend_started) && !in_array($local_message_resend_started, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_message_resend_started', must be one of '%s'",
                    $local_message_resend_started,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_message_resend_started'] = $local_message_resend_started;

        return $this;
    }

    /**
     * Gets message_background
     *
     * @return float|null
     */
    public function getMessageBackground()
    {
        return $this->container['message_background'];
    }

    /**
     * Sets message_background
     *
     * @param float|null $message_background message_background
     *
     * @return self
     */
    public function setMessageBackground($message_background)
    {
        $allowedValues = $this->getMessageBackgroundAllowableValues();
        if (!is_null($message_background) && !in_array($message_background, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_background', must be one of '%s'",
                    $message_background,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_background'] = $message_background;

        return $this;
    }

    /**
     * Gets message_changelog
     *
     * @return float|null
     */
    public function getMessageChangelog()
    {
        return $this->container['message_changelog'];
    }

    /**
     * Sets message_changelog
     *
     * @param float|null $message_changelog message_changelog
     *
     * @return self
     */
    public function setMessageChangelog($message_changelog)
    {
        $allowedValues = $this->getMessageChangelogAllowableValues();
        if (!is_null($message_changelog) && !in_array($message_changelog, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_changelog', must be one of '%s'",
                    $message_changelog,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_changelog'] = $message_changelog;

        return $this;
    }

    /**
     * Gets message_collection_filter_mismatch
     *
     * @return float|null
     */
    public function getMessageCollectionFilterMismatch()
    {
        return $this->container['message_collection_filter_mismatch'];
    }

    /**
     * Sets message_collection_filter_mismatch
     *
     * @param float|null $message_collection_filter_mismatch message_collection_filter_mismatch
     *
     * @return self
     */
    public function setMessageCollectionFilterMismatch($message_collection_filter_mismatch)
    {
        $allowedValues = $this->getMessageCollectionFilterMismatchAllowableValues();
        if (!is_null($message_collection_filter_mismatch) && !in_array($message_collection_filter_mismatch, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_collection_filter_mismatch', must be one of '%s'",
                    $message_collection_filter_mismatch,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_collection_filter_mismatch'] = $message_collection_filter_mismatch;

        return $this;
    }

    /**
     * Gets message_fill
     *
     * @return float|null
     */
    public function getMessageFill()
    {
        return $this->container['message_fill'];
    }

    /**
     * Sets message_fill
     *
     * @param float|null $message_fill message_fill
     *
     * @return self
     */
    public function setMessageFill($message_fill)
    {
        $allowedValues = $this->getMessageFillAllowableValues();
        if (!is_null($message_fill) && !in_array($message_fill, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_fill', must be one of '%s'",
                    $message_fill,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_fill'] = $message_fill;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


