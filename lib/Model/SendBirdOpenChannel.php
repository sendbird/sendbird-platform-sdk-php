<?php
/**
 * SendbirdOpenChannel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendbirdOpenChannel Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendbirdOpenChannel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sendbird.OpenChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_url' => 'string',
        'cover_url' => 'string',
        'created_at' => 'int',
        'custom_type' => 'string',
        'data' => 'string',
        'freeze' => 'bool',
        'is_dynamic_partitioned' => 'bool',
        'is_ephemeral' => 'bool',
        'max_length_message' => 'int',
        'name' => 'string',
        'operators' => '\Sendbird\Model\SendbirdBasicUserInfo[]',
        'participant_count' => 'int',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_url' => null,
        'cover_url' => null,
        'created_at' => 'int64',
        'custom_type' => null,
        'data' => null,
        'freeze' => null,
        'is_dynamic_partitioned' => null,
        'is_ephemeral' => null,
        'max_length_message' => null,
        'name' => null,
        'operators' => null,
        'participant_count' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_url' => 'channel_url',
        'cover_url' => 'cover_url',
        'created_at' => 'created_at',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'freeze' => 'freeze',
        'is_dynamic_partitioned' => 'is_dynamic_partitioned',
        'is_ephemeral' => 'is_ephemeral',
        'max_length_message' => 'max_length_message',
        'name' => 'name',
        'operators' => 'operators',
        'participant_count' => 'participant_count',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_url' => 'setChannelUrl',
        'cover_url' => 'setCoverUrl',
        'created_at' => 'setCreatedAt',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'freeze' => 'setFreeze',
        'is_dynamic_partitioned' => 'setIsDynamicPartitioned',
        'is_ephemeral' => 'setIsEphemeral',
        'max_length_message' => 'setMaxLengthMessage',
        'name' => 'setName',
        'operators' => 'setOperators',
        'participant_count' => 'setParticipantCount',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_url' => 'getChannelUrl',
        'cover_url' => 'getCoverUrl',
        'created_at' => 'getCreatedAt',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'freeze' => 'getFreeze',
        'is_dynamic_partitioned' => 'getIsDynamicPartitioned',
        'is_ephemeral' => 'getIsEphemeral',
        'max_length_message' => 'getMaxLengthMessage',
        'name' => 'getName',
        'operators' => 'getOperators',
        'participant_count' => 'getParticipantCount',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['freeze'] = $data['freeze'] ?? null;
        $this->container['is_dynamic_partitioned'] = $data['is_dynamic_partitioned'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['max_length_message'] = $data['max_length_message'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['operators'] = $data['operators'] ?? null;
        $this->container['participant_count'] = $data['participant_count'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel_url'] === null) {
            $invalidProperties[] = "'channel_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets freeze
     *
     * @return bool|null
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze
     *
     * @param bool|null $freeze freeze
     *
     * @return self
     */
    public function setFreeze($freeze)
    {
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets is_dynamic_partitioned
     *
     * @return bool|null
     */
    public function getIsDynamicPartitioned()
    {
        return $this->container['is_dynamic_partitioned'];
    }

    /**
     * Sets is_dynamic_partitioned
     *
     * @param bool|null $is_dynamic_partitioned is_dynamic_partitioned
     *
     * @return self
     */
    public function setIsDynamicPartitioned($is_dynamic_partitioned)
    {
        $this->container['is_dynamic_partitioned'] = $is_dynamic_partitioned;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets max_length_message
     *
     * @return int|null
     */
    public function getMaxLengthMessage()
    {
        return $this->container['max_length_message'];
    }

    /**
     * Sets max_length_message
     *
     * @param int|null $max_length_message max_length_message
     *
     * @return self
     */
    public function setMaxLengthMessage($max_length_message)
    {
        $this->container['max_length_message'] = $max_length_message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \Sendbird\Model\SendbirdBasicUserInfo[]|null
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \Sendbird\Model\SendbirdBasicUserInfo[]|null $operators operators
     *
     * @return self
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets participant_count
     *
     * @return int|null
     */
    public function getParticipantCount()
    {
        return $this->container['participant_count'];
    }

    /**
     * Sets participant_count
     *
     * @param int|null $participant_count participant_count
     *
     * @return self
     */
    public function setParticipantCount($participant_count)
    {
        $this->container['participant_count'] = $participant_count;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


