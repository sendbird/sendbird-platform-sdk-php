<?php
/**
 * SendBotSMessageData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBotSMessageData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBotSMessageData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sendBot_sMessageData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message' => 'string',
        'channel_url' => 'string',
        'custom_type' => 'string',
        'data' => 'string',
        'send_push' => 'bool',
        'mentioned' => 'int[]',
        'mark_as_read' => 'bool',
        'dedup_id' => 'string',
        'created_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message' => null,
        'channel_url' => null,
        'custom_type' => null,
        'data' => null,
        'send_push' => null,
        'mentioned' => null,
        'mark_as_read' => null,
        'dedup_id' => null,
        'created_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'channel_url' => 'channel_url',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'send_push' => 'send_push',
        'mentioned' => 'mentioned',
        'mark_as_read' => 'mark_as_read',
        'dedup_id' => 'dedup_id',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'channel_url' => 'setChannelUrl',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'send_push' => 'setSendPush',
        'mentioned' => 'setMentioned',
        'mark_as_read' => 'setMarkAsRead',
        'dedup_id' => 'setDedupId',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'channel_url' => 'getChannelUrl',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'send_push' => 'getSendPush',
        'mentioned' => 'getMentioned',
        'mark_as_read' => 'getMarkAsRead',
        'dedup_id' => 'getDedupId',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message'] = $data['message'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['send_push'] = $data['send_push'] ?? null;
        $this->container['mentioned'] = $data['mentioned'] ?? null;
        $this->container['mark_as_read'] = $data['mark_as_read'] ?? null;
        $this->container['dedup_id'] = $data['dedup_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['channel_url'] === null) {
            $invalidProperties[] = "'channel_url' can't be null";
        }
        if ($this->container['custom_type'] === null) {
            $invalidProperties[] = "'custom_type' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['send_push'] === null) {
            $invalidProperties[] = "'send_push' can't be null";
        }
        if ($this->container['mentioned'] === null) {
            $invalidProperties[] = "'mentioned' can't be null";
        }
        if ($this->container['mark_as_read'] === null) {
            $invalidProperties[] = "'mark_as_read' can't be null";
        }
        if ($this->container['dedup_id'] === null) {
            $invalidProperties[] = "'dedup_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Specifies the content of the message sent by the bot.
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url Specifies the URL of the channel where the message is sent to.
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string $custom_type Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Specifies additional message information such as custom font size, font type or `JSON` formatted string.
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets send_push
     *
     * @return bool
     */
    public function getSendPush()
    {
        return $this->container['send_push'];
    }

    /**
     * Sets send_push
     *
     * @param bool $send_push Determines whether to send a push notification for the message to the members of the channel (Default: true)
     *
     * @return self
     */
    public function setSendPush($send_push)
    {
        $this->container['send_push'] = $send_push;

        return $this;
    }

    /**
     * Gets mentioned
     *
     * @return int[]
     */
    public function getMentioned()
    {
        return $this->container['mentioned'];
    }

    /**
     * Sets mentioned
     *
     * @param int[] $mentioned Specifies an array of one or more IDs of the users who get a notification for the message.
     *
     * @return self
     */
    public function setMentioned($mentioned)
    {
        $this->container['mentioned'] = $mentioned;

        return $this;
    }

    /**
     * Gets mark_as_read
     *
     * @return bool
     */
    public function getMarkAsRead()
    {
        return $this->container['mark_as_read'];
    }

    /**
     * Sets mark_as_read
     *
     * @param bool $mark_as_read Determines whether to mark the message as read for the bot. If set to false, the bot's unread_count and read_receipt remain unchanged after the message is sent. (Default: true)
     *
     * @return self
     */
    public function setMarkAsRead($mark_as_read)
    {
        $this->container['mark_as_read'] = $mark_as_read;

        return $this;
    }

    /**
     * Gets dedup_id
     *
     * @return string
     */
    public function getDedupId()
    {
        return $this->container['dedup_id'];
    }

    /**
     * Sets dedup_id
     *
     * @param string $dedup_id Specifies the unique ID for the message to prevent the same message data from getting sent to the channel.
     *
     * @return self
     */
    public function setDedupId($dedup_id)
    {
        $this->container['dedup_id'] = $dedup_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


