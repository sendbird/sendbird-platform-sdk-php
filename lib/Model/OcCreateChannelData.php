<?php
/**
 * OcCreateChannelData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * OcCreateChannelData Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OcCreateChannelData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ocCreateChannelData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'channel_url' => 'string',
        'cover_url' => 'string',
        'cover_file' => '\SplFileObject',
        'custom_type' => 'string',
        'data' => 'string',
        'is_ephemeral' => 'bool',
        '_is_dynamic_partitioned_2_how_dynamic_partitioning_works' => 'bool',
        'operator_ids' => 'int[]',
        'operators' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'channel_url' => null,
        'cover_url' => null,
        'cover_file' => 'binary',
        'custom_type' => null,
        'data' => null,
        'is_ephemeral' => null,
        '_is_dynamic_partitioned_2_how_dynamic_partitioning_works' => null,
        'operator_ids' => null,
        'operators' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'channel_url' => 'channel_url',
        'cover_url' => 'cover_url',
        'cover_file' => 'cover_file',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'is_ephemeral' => 'is_ephemeral',
        '_is_dynamic_partitioned_2_how_dynamic_partitioning_works' => '[is_dynamic_partitioned](#2-how-dynamic-partitioning-works)',
        'operator_ids' => 'operator_ids',
        'operators' => 'operators'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'channel_url' => 'setChannelUrl',
        'cover_url' => 'setCoverUrl',
        'cover_file' => 'setCoverFile',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'is_ephemeral' => 'setIsEphemeral',
        '_is_dynamic_partitioned_2_how_dynamic_partitioning_works' => 'setIsDynamicPartitioned2HowDynamicPartitioningWorks',
        'operator_ids' => 'setOperatorIds',
        'operators' => 'setOperators'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'channel_url' => 'getChannelUrl',
        'cover_url' => 'getCoverUrl',
        'cover_file' => 'getCoverFile',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'is_ephemeral' => 'getIsEphemeral',
        '_is_dynamic_partitioned_2_how_dynamic_partitioning_works' => 'getIsDynamicPartitioned2HowDynamicPartitioningWorks',
        'operator_ids' => 'getOperatorIds',
        'operators' => 'getOperators'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['cover_file'] = $data['cover_file'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['_is_dynamic_partitioned_2_how_dynamic_partitioning_works'] = $data['_is_dynamic_partitioned_2_how_dynamic_partitioning_works'] ?? null;
        $this->container['operator_ids'] = $data['operator_ids'] ?? null;
        $this->container['operators'] = $data['operators'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['channel_url'] === null) {
            $invalidProperties[] = "'channel_url' can't be null";
        }
        if ($this->container['cover_url'] === null) {
            $invalidProperties[] = "'cover_url' can't be null";
        }
        if ($this->container['cover_file'] === null) {
            $invalidProperties[] = "'cover_file' can't be null";
        }
        if ($this->container['custom_type'] === null) {
            $invalidProperties[] = "'custom_type' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['is_ephemeral'] === null) {
            $invalidProperties[] = "'is_ephemeral' can't be null";
        }
        if ($this->container['_is_dynamic_partitioned_2_how_dynamic_partitioning_works'] === null) {
            $invalidProperties[] = "'_is_dynamic_partitioned_2_how_dynamic_partitioning_works' can't be null";
        }
        if ($this->container['operator_ids'] === null) {
            $invalidProperties[] = "'operator_ids' can't be null";
        }
        if ($this->container['operators'] === null) {
            $invalidProperties[] = "'operators' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Specifies the channel topic, or the name of the channel. The length is limited to 191 characters. (Default: open channel)
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url Specifies the URL of the channel. Only numbers, characters, and underscores are allowed. The length is 4 to 100 characters, inclusive. If not specified, a URL is automatically generated.
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string $cover_url Specifies the URL of the cover image. The length is limited to 2,048 characters.
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets cover_file
     *
     * @return \SplFileObject
     */
    public function getCoverFile()
    {
        return $this->container['cover_file'];
    }

    /**
     * Sets cover_file
     *
     * @param \SplFileObject $cover_file Uploads a file for the channel cover image.
     *
     * @return self
     */
    public function setCoverFile($cover_file)
    {
        $this->container['cover_file'] = $cover_file;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string $custom_type Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.<br /><br /> Custom types are also used within Sendbird's [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Specifies additional channel information such as a long description of the channel or `JSON` formatted string.
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool $is_ephemeral Determines whether to preserve the messages in the channel for the purpose of retrieving chat history or not. It set to true, the messages in the channel are not saved in the Sendbird database and the chat history can't be retrieved. (Default: false)
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets _is_dynamic_partitioned_2_how_dynamic_partitioning_works
     *
     * @return bool
     */
    public function getIsDynamicPartitioned2HowDynamicPartitioningWorks()
    {
        return $this->container['_is_dynamic_partitioned_2_how_dynamic_partitioning_works'];
    }

    /**
     * Sets _is_dynamic_partitioned_2_how_dynamic_partitioning_works
     *
     * @param bool $_is_dynamic_partitioned_2_how_dynamic_partitioning_works Determines whether the channel is an open channel with dynamic partitioning or not. If the value of this property is true, the open channel can create several subchannels in order to accommodate a massive number of usres. (Default: false)<br/><br/>  For the new Sendbird applications created after December 15, 2020, this property will be automatically set to true.
     *
     * @return self
     */
    public function setIsDynamicPartitioned2HowDynamicPartitioningWorks($_is_dynamic_partitioned_2_how_dynamic_partitioning_works)
    {
        $this->container['_is_dynamic_partitioned_2_how_dynamic_partitioning_works'] = $_is_dynamic_partitioned_2_how_dynamic_partitioning_works;

        return $this;
    }

    /**
     * Gets operator_ids
     *
     * @return int[]
     */
    public function getOperatorIds()
    {
        return $this->container['operator_ids'];
    }

    /**
     * Sets operator_ids
     *
     * @param int[] $operator_ids Specifies an array of one or more user IDs to register as operators of the channel. The maximum allowed number of operators per channel is 100. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.<br/><br/>  Operators cannot view messages that have been [moderated by](/docs/chat/v3/platform-api/guides/filter-and-moderation) the domain filter or profanity filter. Only the sender will be notified that the message has been blocked.
     *
     * @return self
     */
    public function setOperatorIds($operator_ids)
    {
        $this->container['operator_ids'] = $operator_ids;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return string[]
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param string[] $operators (Deprecated) Specifies the string IDs of the users registered as channel operators. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.
     *
     * @return self
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


