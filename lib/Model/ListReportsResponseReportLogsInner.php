<?php
/**
 * ListReportsResponseReportLogsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * ListReportsResponseReportLogsInner Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListReportsResponseReportLogsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'listReportsResponse_report_logs_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reporting_user' => '\Sendbird\Model\SendBirdUser',
        'report_type' => 'string',
        'report_category' => 'string',
        'offending_user' => '\Sendbird\Model\SendBirdUser',
        'reported_message' => '\Sendbird\Model\SendBirdMessageResponse',
        'channel' => '\Sendbird\Model\SendBirdChannelResponse',
        'report_description' => 'string',
        'created_at' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reporting_user' => null,
        'report_type' => null,
        'report_category' => null,
        'offending_user' => null,
        'reported_message' => null,
        'channel' => null,
        'report_description' => null,
        'created_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reporting_user' => 'reporting_user',
        'report_type' => 'report_type',
        'report_category' => 'report_category',
        'offending_user' => 'offending_user',
        'reported_message' => 'reported_message',
        'channel' => 'channel',
        'report_description' => 'report_description',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reporting_user' => 'setReportingUser',
        'report_type' => 'setReportType',
        'report_category' => 'setReportCategory',
        'offending_user' => 'setOffendingUser',
        'reported_message' => 'setReportedMessage',
        'channel' => 'setChannel',
        'report_description' => 'setReportDescription',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reporting_user' => 'getReportingUser',
        'report_type' => 'getReportType',
        'report_category' => 'getReportCategory',
        'offending_user' => 'getOffendingUser',
        'reported_message' => 'getReportedMessage',
        'channel' => 'getChannel',
        'report_description' => 'getReportDescription',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reporting_user'] = $data['reporting_user'] ?? null;
        $this->container['report_type'] = $data['report_type'] ?? null;
        $this->container['report_category'] = $data['report_category'] ?? null;
        $this->container['offending_user'] = $data['offending_user'] ?? null;
        $this->container['reported_message'] = $data['reported_message'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['report_description'] = $data['report_description'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reporting_user
     *
     * @return \Sendbird\Model\SendBirdUser|null
     */
    public function getReportingUser()
    {
        return $this->container['reporting_user'];
    }

    /**
     * Sets reporting_user
     *
     * @param \Sendbird\Model\SendBirdUser|null $reporting_user reporting_user
     *
     * @return self
     */
    public function setReportingUser($reporting_user)
    {
        $this->container['reporting_user'] = $reporting_user;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets report_category
     *
     * @return string|null
     */
    public function getReportCategory()
    {
        return $this->container['report_category'];
    }

    /**
     * Sets report_category
     *
     * @param string|null $report_category report_category
     *
     * @return self
     */
    public function setReportCategory($report_category)
    {
        $this->container['report_category'] = $report_category;

        return $this;
    }

    /**
     * Gets offending_user
     *
     * @return \Sendbird\Model\SendBirdUser|null
     */
    public function getOffendingUser()
    {
        return $this->container['offending_user'];
    }

    /**
     * Sets offending_user
     *
     * @param \Sendbird\Model\SendBirdUser|null $offending_user offending_user
     *
     * @return self
     */
    public function setOffendingUser($offending_user)
    {
        $this->container['offending_user'] = $offending_user;

        return $this;
    }

    /**
     * Gets reported_message
     *
     * @return \Sendbird\Model\SendBirdMessageResponse|null
     */
    public function getReportedMessage()
    {
        return $this->container['reported_message'];
    }

    /**
     * Sets reported_message
     *
     * @param \Sendbird\Model\SendBirdMessageResponse|null $reported_message reported_message
     *
     * @return self
     */
    public function setReportedMessage($reported_message)
    {
        $this->container['reported_message'] = $reported_message;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Sendbird\Model\SendBirdChannelResponse|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Sendbird\Model\SendBirdChannelResponse|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets report_description
     *
     * @return string|null
     */
    public function getReportDescription()
    {
        return $this->container['report_description'];
    }

    /**
     * Sets report_description
     *
     * @param string|null $report_description report_description
     *
     * @return self
     */
    public function setReportDescription($report_description)
    {
        $this->container['report_description'] = $report_description;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


