<?php
/**
 * SendBirdUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendBirdUser Class Doc Comment
 *
 * @category Class
 * @description User
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'require_auth_for_profile_image' => 'bool',
        'is_online' => 'bool',
        'user_id' => 'string',
        'access_token' => 'string',
        'has_ever_logged_in' => 'bool',
        'is_active' => 'bool',
        'last_seen_at' => 'int',
        'nickname' => 'string',
        'discovery_keys' => 'string[]',
        'session_tokens' => 'string[]',
        'preferred_languages' => 'string[]',
        'profile_url' => 'string',
        'created_at' => 'int',
        'phone_number' => 'string',
        'local' => 'string',
        'locale' => 'string',
        'is_hide_me_from_friends' => 'bool',
        'is_shadow_blocked' => 'bool',
        'is_created' => 'bool',
        'metadata' => '\Sendbird\Model\SBObject',
        'description' => 'string',
        'end_at' => 'float',
        'start_at' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'require_auth_for_profile_image' => null,
        'is_online' => null,
        'user_id' => null,
        'access_token' => null,
        'has_ever_logged_in' => null,
        'is_active' => null,
        'last_seen_at' => null,
        'nickname' => null,
        'discovery_keys' => null,
        'session_tokens' => null,
        'preferred_languages' => null,
        'profile_url' => null,
        'created_at' => null,
        'phone_number' => null,
        'local' => null,
        'locale' => null,
        'is_hide_me_from_friends' => null,
        'is_shadow_blocked' => null,
        'is_created' => null,
        'metadata' => null,
        'description' => null,
        'end_at' => null,
        'start_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'require_auth_for_profile_image' => 'require_auth_for_profile_image',
        'is_online' => 'is_online',
        'user_id' => 'user_id',
        'access_token' => 'access_token',
        'has_ever_logged_in' => 'has_ever_logged_in',
        'is_active' => 'is_active',
        'last_seen_at' => 'last_seen_at',
        'nickname' => 'nickname',
        'discovery_keys' => 'discovery_keys',
        'session_tokens' => 'session_tokens',
        'preferred_languages' => 'preferred_languages',
        'profile_url' => 'profile_url',
        'created_at' => 'created_at',
        'phone_number' => 'phone_number',
        'local' => 'local',
        'locale' => 'locale',
        'is_hide_me_from_friends' => 'is_hide_me_from_friends',
        'is_shadow_blocked' => 'is_shadow_blocked',
        'is_created' => 'is_created',
        'metadata' => 'metadata',
        'description' => 'description',
        'end_at' => 'end_at',
        'start_at' => 'start_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'require_auth_for_profile_image' => 'setRequireAuthForProfileImage',
        'is_online' => 'setIsOnline',
        'user_id' => 'setUserId',
        'access_token' => 'setAccessToken',
        'has_ever_logged_in' => 'setHasEverLoggedIn',
        'is_active' => 'setIsActive',
        'last_seen_at' => 'setLastSeenAt',
        'nickname' => 'setNickname',
        'discovery_keys' => 'setDiscoveryKeys',
        'session_tokens' => 'setSessionTokens',
        'preferred_languages' => 'setPreferredLanguages',
        'profile_url' => 'setProfileUrl',
        'created_at' => 'setCreatedAt',
        'phone_number' => 'setPhoneNumber',
        'local' => 'setLocal',
        'locale' => 'setLocale',
        'is_hide_me_from_friends' => 'setIsHideMeFromFriends',
        'is_shadow_blocked' => 'setIsShadowBlocked',
        'is_created' => 'setIsCreated',
        'metadata' => 'setMetadata',
        'description' => 'setDescription',
        'end_at' => 'setEndAt',
        'start_at' => 'setStartAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'require_auth_for_profile_image' => 'getRequireAuthForProfileImage',
        'is_online' => 'getIsOnline',
        'user_id' => 'getUserId',
        'access_token' => 'getAccessToken',
        'has_ever_logged_in' => 'getHasEverLoggedIn',
        'is_active' => 'getIsActive',
        'last_seen_at' => 'getLastSeenAt',
        'nickname' => 'getNickname',
        'discovery_keys' => 'getDiscoveryKeys',
        'session_tokens' => 'getSessionTokens',
        'preferred_languages' => 'getPreferredLanguages',
        'profile_url' => 'getProfileUrl',
        'created_at' => 'getCreatedAt',
        'phone_number' => 'getPhoneNumber',
        'local' => 'getLocal',
        'locale' => 'getLocale',
        'is_hide_me_from_friends' => 'getIsHideMeFromFriends',
        'is_shadow_blocked' => 'getIsShadowBlocked',
        'is_created' => 'getIsCreated',
        'metadata' => 'getMetadata',
        'description' => 'getDescription',
        'end_at' => 'getEndAt',
        'start_at' => 'getStartAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['require_auth_for_profile_image'] = $data['require_auth_for_profile_image'] ?? null;
        $this->container['is_online'] = $data['is_online'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['access_token'] = $data['access_token'] ?? null;
        $this->container['has_ever_logged_in'] = $data['has_ever_logged_in'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['last_seen_at'] = $data['last_seen_at'] ?? null;
        $this->container['nickname'] = $data['nickname'] ?? null;
        $this->container['discovery_keys'] = $data['discovery_keys'] ?? null;
        $this->container['session_tokens'] = $data['session_tokens'] ?? null;
        $this->container['preferred_languages'] = $data['preferred_languages'] ?? null;
        $this->container['profile_url'] = $data['profile_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['local'] = $data['local'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['is_hide_me_from_friends'] = $data['is_hide_me_from_friends'] ?? null;
        $this->container['is_shadow_blocked'] = $data['is_shadow_blocked'] ?? null;
        $this->container['is_created'] = $data['is_created'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['end_at'] = $data['end_at'] ?? null;
        $this->container['start_at'] = $data['start_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets require_auth_for_profile_image
     *
     * @return bool|null
     */
    public function getRequireAuthForProfileImage()
    {
        return $this->container['require_auth_for_profile_image'];
    }

    /**
     * Sets require_auth_for_profile_image
     *
     * @param bool|null $require_auth_for_profile_image require_auth_for_profile_image
     *
     * @return self
     */
    public function setRequireAuthForProfileImage($require_auth_for_profile_image)
    {
        $this->container['require_auth_for_profile_image'] = $require_auth_for_profile_image;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool|null
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool|null $is_online is_online
     *
     * @return self
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token access_token
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets has_ever_logged_in
     *
     * @return bool|null
     */
    public function getHasEverLoggedIn()
    {
        return $this->container['has_ever_logged_in'];
    }

    /**
     * Sets has_ever_logged_in
     *
     * @param bool|null $has_ever_logged_in has_ever_logged_in
     *
     * @return self
     */
    public function setHasEverLoggedIn($has_ever_logged_in)
    {
        $this->container['has_ever_logged_in'] = $has_ever_logged_in;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return int|null
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param int|null $last_seen_at last_seen_at
     *
     * @return self
     */
    public function setLastSeenAt($last_seen_at)
    {
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets discovery_keys
     *
     * @return string[]|null
     */
    public function getDiscoveryKeys()
    {
        return $this->container['discovery_keys'];
    }

    /**
     * Sets discovery_keys
     *
     * @param string[]|null $discovery_keys discovery_keys
     *
     * @return self
     */
    public function setDiscoveryKeys($discovery_keys)
    {
        $this->container['discovery_keys'] = $discovery_keys;

        return $this;
    }

    /**
     * Gets session_tokens
     *
     * @return string[]|null
     */
    public function getSessionTokens()
    {
        return $this->container['session_tokens'];
    }

    /**
     * Sets session_tokens
     *
     * @param string[]|null $session_tokens session_tokens
     *
     * @return self
     */
    public function setSessionTokens($session_tokens)
    {
        $this->container['session_tokens'] = $session_tokens;

        return $this;
    }

    /**
     * Gets preferred_languages
     *
     * @return string[]|null
     */
    public function getPreferredLanguages()
    {
        return $this->container['preferred_languages'];
    }

    /**
     * Sets preferred_languages
     *
     * @param string[]|null $preferred_languages preferred_languages
     *
     * @return self
     */
    public function setPreferredLanguages($preferred_languages)
    {
        $this->container['preferred_languages'] = $preferred_languages;

        return $this;
    }

    /**
     * Gets profile_url
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profile_url'];
    }

    /**
     * Sets profile_url
     *
     * @param string|null $profile_url profile_url
     *
     * @return self
     */
    public function setProfileUrl($profile_url)
    {
        $this->container['profile_url'] = $profile_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets local
     *
     * @return string|null
     */
    public function getLocal()
    {
        return $this->container['local'];
    }

    /**
     * Sets local
     *
     * @param string|null $local local
     *
     * @return self
     */
    public function setLocal($local)
    {
        $this->container['local'] = $local;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets is_hide_me_from_friends
     *
     * @return bool|null
     */
    public function getIsHideMeFromFriends()
    {
        return $this->container['is_hide_me_from_friends'];
    }

    /**
     * Sets is_hide_me_from_friends
     *
     * @param bool|null $is_hide_me_from_friends is_hide_me_from_friends
     *
     * @return self
     */
    public function setIsHideMeFromFriends($is_hide_me_from_friends)
    {
        $this->container['is_hide_me_from_friends'] = $is_hide_me_from_friends;

        return $this;
    }

    /**
     * Gets is_shadow_blocked
     *
     * @return bool|null
     */
    public function getIsShadowBlocked()
    {
        return $this->container['is_shadow_blocked'];
    }

    /**
     * Sets is_shadow_blocked
     *
     * @param bool|null $is_shadow_blocked is_shadow_blocked
     *
     * @return self
     */
    public function setIsShadowBlocked($is_shadow_blocked)
    {
        $this->container['is_shadow_blocked'] = $is_shadow_blocked;

        return $this;
    }

    /**
     * Gets is_created
     *
     * @return bool|null
     */
    public function getIsCreated()
    {
        return $this->container['is_created'];
    }

    /**
     * Sets is_created
     *
     * @param bool|null $is_created is_created
     *
     * @return self
     */
    public function setIsCreated($is_created)
    {
        $this->container['is_created'] = $is_created;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Sendbird\Model\SBObject|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Sendbird\Model\SBObject|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return float|null
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param float|null $end_at end_at
     *
     * @return self
     */
    public function setEndAt($end_at)
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return float|null
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param float|null $start_at start_at
     *
     * @return self
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


