<?php
/**
 * SendBirdMessageRetrievalParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdMessageRetrievalParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdMessageRetrievalParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.MessageRetrievalParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_type' => 'string',
        'channel_url' => 'string',
        'include_meta_array' => 'bool',
        'include_parent_message_info' => 'bool',
        'include_parent_message_text' => 'bool',
        'include_poll_details' => 'bool',
        'include_reactions' => 'bool',
        'include_thread_info' => 'bool',
        'message_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_type' => null,
        'channel_url' => null,
        'include_meta_array' => null,
        'include_parent_message_info' => null,
        'include_parent_message_text' => null,
        'include_poll_details' => null,
        'include_reactions' => null,
        'include_thread_info' => null,
        'message_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_type' => 'channelType',
        'channel_url' => 'channelUrl',
        'include_meta_array' => 'includeMetaArray',
        'include_parent_message_info' => 'includeParentMessageInfo',
        'include_parent_message_text' => 'includeParentMessageText',
        'include_poll_details' => 'includePollDetails',
        'include_reactions' => 'includeReactions',
        'include_thread_info' => 'includeThreadInfo',
        'message_id' => 'messageId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_type' => 'setChannelType',
        'channel_url' => 'setChannelUrl',
        'include_meta_array' => 'setIncludeMetaArray',
        'include_parent_message_info' => 'setIncludeParentMessageInfo',
        'include_parent_message_text' => 'setIncludeParentMessageText',
        'include_poll_details' => 'setIncludePollDetails',
        'include_reactions' => 'setIncludeReactions',
        'include_thread_info' => 'setIncludeThreadInfo',
        'message_id' => 'setMessageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_type' => 'getChannelType',
        'channel_url' => 'getChannelUrl',
        'include_meta_array' => 'getIncludeMetaArray',
        'include_parent_message_info' => 'getIncludeParentMessageInfo',
        'include_parent_message_text' => 'getIncludeParentMessageText',
        'include_poll_details' => 'getIncludePollDetails',
        'include_reactions' => 'getIncludeReactions',
        'include_thread_info' => 'getIncludeThreadInfo',
        'message_id' => 'getMessageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_type'] = $data['channel_type'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['include_meta_array'] = $data['include_meta_array'] ?? null;
        $this->container['include_parent_message_info'] = $data['include_parent_message_info'] ?? null;
        $this->container['include_parent_message_text'] = $data['include_parent_message_text'] ?? null;
        $this->container['include_poll_details'] = $data['include_poll_details'] ?? null;
        $this->container['include_reactions'] = $data['include_reactions'] ?? null;
        $this->container['include_thread_info'] = $data['include_thread_info'] ?? null;
        $this->container['message_id'] = $data['message_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_type
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param string|null $channel_type channel_type
     *
     * @return self
     */
    public function setChannelType($channel_type)
    {
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets include_meta_array
     *
     * @return bool|null
     */
    public function getIncludeMetaArray()
    {
        return $this->container['include_meta_array'];
    }

    /**
     * Sets include_meta_array
     *
     * @param bool|null $include_meta_array include_meta_array
     *
     * @return self
     */
    public function setIncludeMetaArray($include_meta_array)
    {
        $this->container['include_meta_array'] = $include_meta_array;

        return $this;
    }

    /**
     * Gets include_parent_message_info
     *
     * @return bool|null
     */
    public function getIncludeParentMessageInfo()
    {
        return $this->container['include_parent_message_info'];
    }

    /**
     * Sets include_parent_message_info
     *
     * @param bool|null $include_parent_message_info include_parent_message_info
     *
     * @return self
     */
    public function setIncludeParentMessageInfo($include_parent_message_info)
    {
        $this->container['include_parent_message_info'] = $include_parent_message_info;

        return $this;
    }

    /**
     * Gets include_parent_message_text
     *
     * @return bool|null
     */
    public function getIncludeParentMessageText()
    {
        return $this->container['include_parent_message_text'];
    }

    /**
     * Sets include_parent_message_text
     *
     * @param bool|null $include_parent_message_text include_parent_message_text
     *
     * @return self
     */
    public function setIncludeParentMessageText($include_parent_message_text)
    {
        $this->container['include_parent_message_text'] = $include_parent_message_text;

        return $this;
    }

    /**
     * Gets include_poll_details
     *
     * @return bool|null
     */
    public function getIncludePollDetails()
    {
        return $this->container['include_poll_details'];
    }

    /**
     * Sets include_poll_details
     *
     * @param bool|null $include_poll_details include_poll_details
     *
     * @return self
     */
    public function setIncludePollDetails($include_poll_details)
    {
        $this->container['include_poll_details'] = $include_poll_details;

        return $this;
    }

    /**
     * Gets include_reactions
     *
     * @return bool|null
     */
    public function getIncludeReactions()
    {
        return $this->container['include_reactions'];
    }

    /**
     * Sets include_reactions
     *
     * @param bool|null $include_reactions include_reactions
     *
     * @return self
     */
    public function setIncludeReactions($include_reactions)
    {
        $this->container['include_reactions'] = $include_reactions;

        return $this;
    }

    /**
     * Gets include_thread_info
     *
     * @return bool|null
     */
    public function getIncludeThreadInfo()
    {
        return $this->container['include_thread_info'];
    }

    /**
     * Sets include_thread_info
     *
     * @param bool|null $include_thread_info include_thread_info
     *
     * @return self
     */
    public function setIncludeThreadInfo($include_thread_info)
    {
        $this->container['include_thread_info'] = $include_thread_info;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return float|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param float|null $message_id message_id
     *
     * @return self
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


