<?php
/**
 * InlineResponse20065Bots
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * InlineResponse20065Bots Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20065Bots implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_65_bots';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bot' => '\Sendbird\Model\InlineResponse20065Bot',
        'bot_callback_url' => 'string',
        'enable_mark_as_read' => 'bool',
        'is_privacy_mode' => 'bool',
        'show_member' => 'bool',
        'channel_invitation_preference' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bot' => null,
        'bot_callback_url' => null,
        'enable_mark_as_read' => null,
        'is_privacy_mode' => null,
        'show_member' => null,
        'channel_invitation_preference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bot' => 'bot',
        'bot_callback_url' => 'bot_callback_url',
        'enable_mark_as_read' => 'enable_mark_as_read',
        'is_privacy_mode' => 'is_privacy_mode',
        'show_member' => 'show_member',
        'channel_invitation_preference' => 'channel_invitation_preference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bot' => 'setBot',
        'bot_callback_url' => 'setBotCallbackUrl',
        'enable_mark_as_read' => 'setEnableMarkAsRead',
        'is_privacy_mode' => 'setIsPrivacyMode',
        'show_member' => 'setShowMember',
        'channel_invitation_preference' => 'setChannelInvitationPreference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bot' => 'getBot',
        'bot_callback_url' => 'getBotCallbackUrl',
        'enable_mark_as_read' => 'getEnableMarkAsRead',
        'is_privacy_mode' => 'getIsPrivacyMode',
        'show_member' => 'getShowMember',
        'channel_invitation_preference' => 'getChannelInvitationPreference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bot'] = $data['bot'] ?? null;
        $this->container['bot_callback_url'] = $data['bot_callback_url'] ?? null;
        $this->container['enable_mark_as_read'] = $data['enable_mark_as_read'] ?? null;
        $this->container['is_privacy_mode'] = $data['is_privacy_mode'] ?? null;
        $this->container['show_member'] = $data['show_member'] ?? null;
        $this->container['channel_invitation_preference'] = $data['channel_invitation_preference'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bot
     *
     * @return \Sendbird\Model\InlineResponse20065Bot|null
     */
    public function getBot()
    {
        return $this->container['bot'];
    }

    /**
     * Sets bot
     *
     * @param \Sendbird\Model\InlineResponse20065Bot|null $bot bot
     *
     * @return self
     */
    public function setBot($bot)
    {
        $this->container['bot'] = $bot;

        return $this;
    }

    /**
     * Gets bot_callback_url
     *
     * @return string|null
     */
    public function getBotCallbackUrl()
    {
        return $this->container['bot_callback_url'];
    }

    /**
     * Sets bot_callback_url
     *
     * @param string|null $bot_callback_url bot_callback_url
     *
     * @return self
     */
    public function setBotCallbackUrl($bot_callback_url)
    {
        $this->container['bot_callback_url'] = $bot_callback_url;

        return $this;
    }

    /**
     * Gets enable_mark_as_read
     *
     * @return bool|null
     */
    public function getEnableMarkAsRead()
    {
        return $this->container['enable_mark_as_read'];
    }

    /**
     * Sets enable_mark_as_read
     *
     * @param bool|null $enable_mark_as_read enable_mark_as_read
     *
     * @return self
     */
    public function setEnableMarkAsRead($enable_mark_as_read)
    {
        $this->container['enable_mark_as_read'] = $enable_mark_as_read;

        return $this;
    }

    /**
     * Gets is_privacy_mode
     *
     * @return bool|null
     */
    public function getIsPrivacyMode()
    {
        return $this->container['is_privacy_mode'];
    }

    /**
     * Sets is_privacy_mode
     *
     * @param bool|null $is_privacy_mode is_privacy_mode
     *
     * @return self
     */
    public function setIsPrivacyMode($is_privacy_mode)
    {
        $this->container['is_privacy_mode'] = $is_privacy_mode;

        return $this;
    }

    /**
     * Gets show_member
     *
     * @return bool|null
     */
    public function getShowMember()
    {
        return $this->container['show_member'];
    }

    /**
     * Sets show_member
     *
     * @param bool|null $show_member show_member
     *
     * @return self
     */
    public function setShowMember($show_member)
    {
        $this->container['show_member'] = $show_member;

        return $this;
    }

    /**
     * Gets channel_invitation_preference
     *
     * @return float|null
     */
    public function getChannelInvitationPreference()
    {
        return $this->container['channel_invitation_preference'];
    }

    /**
     * Sets channel_invitation_preference
     *
     * @param float|null $channel_invitation_preference channel_invitation_preference
     *
     * @return self
     */
    public function setChannelInvitationPreference($channel_invitation_preference)
    {
        $this->container['channel_invitation_preference'] = $channel_invitation_preference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


