<?php
/**
 * RegisterAndScheduleDataExportData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * RegisterAndScheduleDataExportData Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RegisterAndScheduleDataExportData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'registerAndScheduleDataExportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_ts' => 'int',
        'end_ts' => 'int',
        'format' => 'string',
        'csv_delimiter' => 'string',
        'timezone' => 'string',
        'sender_ids' => 'string[]',
        'exclude_sender_ids' => 'string[]',
        'channel_urls' => 'string[]',
        'exclude_channel_urls' => 'string[]',
        'user_ids' => 'string[]',
        'show_read_receipt' => 'bool',
        'show_channel_metadata' => 'bool',
        'neighboring_message_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_ts' => null,
        'end_ts' => null,
        'format' => null,
        'csv_delimiter' => null,
        'timezone' => null,
        'sender_ids' => null,
        'exclude_sender_ids' => null,
        'channel_urls' => null,
        'exclude_channel_urls' => null,
        'user_ids' => null,
        'show_read_receipt' => null,
        'show_channel_metadata' => null,
        'neighboring_message_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_ts' => 'start_ts',
        'end_ts' => 'end_ts',
        'format' => 'format',
        'csv_delimiter' => 'csv_delimiter',
        'timezone' => 'timezone',
        'sender_ids' => 'sender_ids',
        'exclude_sender_ids' => 'exclude_sender_ids',
        'channel_urls' => 'channel_urls',
        'exclude_channel_urls' => 'exclude_channel_urls',
        'user_ids' => 'user_ids',
        'show_read_receipt' => 'show_read_receipt',
        'show_channel_metadata' => 'show_channel_metadata',
        'neighboring_message_limit' => 'neighboring_message_limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_ts' => 'setStartTs',
        'end_ts' => 'setEndTs',
        'format' => 'setFormat',
        'csv_delimiter' => 'setCsvDelimiter',
        'timezone' => 'setTimezone',
        'sender_ids' => 'setSenderIds',
        'exclude_sender_ids' => 'setExcludeSenderIds',
        'channel_urls' => 'setChannelUrls',
        'exclude_channel_urls' => 'setExcludeChannelUrls',
        'user_ids' => 'setUserIds',
        'show_read_receipt' => 'setShowReadReceipt',
        'show_channel_metadata' => 'setShowChannelMetadata',
        'neighboring_message_limit' => 'setNeighboringMessageLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_ts' => 'getStartTs',
        'end_ts' => 'getEndTs',
        'format' => 'getFormat',
        'csv_delimiter' => 'getCsvDelimiter',
        'timezone' => 'getTimezone',
        'sender_ids' => 'getSenderIds',
        'exclude_sender_ids' => 'getExcludeSenderIds',
        'channel_urls' => 'getChannelUrls',
        'exclude_channel_urls' => 'getExcludeChannelUrls',
        'user_ids' => 'getUserIds',
        'show_read_receipt' => 'getShowReadReceipt',
        'show_channel_metadata' => 'getShowChannelMetadata',
        'neighboring_message_limit' => 'getNeighboringMessageLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_ts'] = $data['start_ts'] ?? null;
        $this->container['end_ts'] = $data['end_ts'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['csv_delimiter'] = $data['csv_delimiter'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['sender_ids'] = $data['sender_ids'] ?? null;
        $this->container['exclude_sender_ids'] = $data['exclude_sender_ids'] ?? null;
        $this->container['channel_urls'] = $data['channel_urls'] ?? null;
        $this->container['exclude_channel_urls'] = $data['exclude_channel_urls'] ?? null;
        $this->container['user_ids'] = $data['user_ids'] ?? null;
        $this->container['show_read_receipt'] = $data['show_read_receipt'] ?? null;
        $this->container['show_channel_metadata'] = $data['show_channel_metadata'] ?? null;
        $this->container['neighboring_message_limit'] = $data['neighboring_message_limit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_ts'] === null) {
            $invalidProperties[] = "'start_ts' can't be null";
        }
        if ($this->container['end_ts'] === null) {
            $invalidProperties[] = "'end_ts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_ts
     *
     * @return int
     */
    public function getStartTs()
    {
        return $this->container['start_ts'];
    }

    /**
     * Sets start_ts
     *
     * @param int $start_ts Specifies the starting timestamp of a period for target objects' creation date, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. The creation time of messages, channels, and users will be in-between the start_ts and end_ts.
     *
     * @return self
     */
    public function setStartTs($start_ts)
    {
        $this->container['start_ts'] = $start_ts;

        return $this;
    }

    /**
     * Gets end_ts
     *
     * @return int
     */
    public function getEndTs()
    {
        return $this->container['end_ts'];
    }

    /**
     * Sets end_ts
     *
     * @param int $end_ts Specifies the ending timestamp of a period for target objects' creation date, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. The creation time of messages, channels, and users will be in-between the start_ts and end_ts.
     *
     * @return self
     */
    public function setEndTs($end_ts)
    {
        $this->container['end_ts'] = $end_ts;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format Specifies the format of the file to export the messages to. Acceptable values are json and csv. (Default: json)
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets csv_delimiter
     *
     * @return string|null
     */
    public function getCsvDelimiter()
    {
        return $this->container['csv_delimiter'];
    }

    /**
     * Sets csv_delimiter
     *
     * @param string|null $csv_delimiter Sets a single character delimiter to separate the values in each row of the csv file which stores two-dimensional arrays of the exported message data. Either English alphabets or special characters can be used as a delimiter, including a horizontal tab (\\t), a line feed (\\n), a vertical bar (\\
     *
     * @return self
     */
    public function setCsvDelimiter($csv_delimiter)
    {
        $this->container['csv_delimiter'] = $csv_delimiter;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Specifies the timezone to be applied to the timestamp of the exported messages. For example, US/Pacific, Asia/Seoul, Europe/London, etc. (Default: UTC)
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets sender_ids
     *
     * @return string[]|null
     */
    public function getSenderIds()
    {
        return $this->container['sender_ids'];
    }

    /**
     * Sets sender_ids
     *
     * @param string[]|null $sender_ids Specifies an array of the IDs of the users which are used to filter the messages by its sender for the export. This property is effective only when the data_type parameter is set to messages, and can be specified up to 10 IDs in the request. (Default: all messages sent by any user)
     *
     * @return self
     */
    public function setSenderIds($sender_ids)
    {
        $this->container['sender_ids'] = $sender_ids;

        return $this;
    }

    /**
     * Gets exclude_sender_ids
     *
     * @return string[]|null
     */
    public function getExcludeSenderIds()
    {
        return $this->container['exclude_sender_ids'];
    }

    /**
     * Sets exclude_sender_ids
     *
     * @param string[]|null $exclude_sender_ids Specifies an array of the IDs of the users which are used to exclude their sent messages from the export. This property is effective only when the data_type parameter is set to messages, and can be specified up to 10 IDs. (Default: all messages sent by any user)
     *
     * @return self
     */
    public function setExcludeSenderIds($exclude_sender_ids)
    {
        $this->container['exclude_sender_ids'] = $exclude_sender_ids;

        return $this;
    }

    /**
     * Gets channel_urls
     *
     * @return string[]|null
     */
    public function getChannelUrls()
    {
        return $this->container['channel_urls'];
    }

    /**
     * Sets channel_urls
     *
     * @param string[]|null $channel_urls Specifies an array of one or more URLs of channels to export the messages from. This property is effective only when the data_type parameter is set to messages or channels. (Default: all channels)
     *
     * @return self
     */
    public function setChannelUrls($channel_urls)
    {
        $this->container['channel_urls'] = $channel_urls;

        return $this;
    }

    /**
     * Gets exclude_channel_urls
     *
     * @return string[]|null
     */
    public function getExcludeChannelUrls()
    {
        return $this->container['exclude_channel_urls'];
    }

    /**
     * Sets exclude_channel_urls
     *
     * @param string[]|null $exclude_channel_urls Specifies an array of one or more URLs of channels to exclude when exporting the messages. This property is effective only when the data_type parameter is set to messages or channels. (Default: include all channels)
     *
     * @return self
     */
    public function setExcludeChannelUrls($exclude_channel_urls)
    {
        $this->container['exclude_channel_urls'] = $exclude_channel_urls;

        return $this;
    }

    /**
     * Gets user_ids
     *
     * @return string[]|null
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     *
     * @param string[]|null $user_ids Specifies an array of the IDs of the users to export their information. This property is effective only when the data_type parameter is set to users. (Default: all users)
     *
     * @return self
     */
    public function setUserIds($user_ids)
    {
        $this->container['user_ids'] = $user_ids;

        return $this;
    }

    /**
     * Gets show_read_receipt
     *
     * @return bool|null
     */
    public function getShowReadReceipt()
    {
        return $this->container['show_read_receipt'];
    }

    /**
     * Sets show_read_receipt
     *
     * @param bool|null $show_read_receipt Determines whether to include information about the read receipts of each channel in the exported data. The read receipt indicates the timestamps of when each user has last read the messages in the channel, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps). (Default: true)
     *
     * @return self
     */
    public function setShowReadReceipt($show_read_receipt)
    {
        $this->container['show_read_receipt'] = $show_read_receipt;

        return $this;
    }

    /**
     * Gets show_channel_metadata
     *
     * @return bool|null
     */
    public function getShowChannelMetadata()
    {
        return $this->container['show_channel_metadata'];
    }

    /**
     * Sets show_channel_metadata
     *
     * @param bool|null $show_channel_metadata Determines whether to include [channel metadata](/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata) in the result files.
     *
     * @return self
     */
    public function setShowChannelMetadata($show_channel_metadata)
    {
        $this->container['show_channel_metadata'] = $show_channel_metadata;

        return $this;
    }

    /**
     * Gets neighboring_message_limit
     *
     * @return int|null
     */
    public function getNeighboringMessageLimit()
    {
        return $this->container['neighboring_message_limit'];
    }

    /**
     * Sets neighboring_message_limit
     *
     * @param int|null $neighboring_message_limit Specifies the maximum number of other users' messages to be exported, which took place after the specified message of a user filtered by the sender_ids property. Even if there may be more messages that took place, if the quantity exceeds the number of the neighboring_message_limit, they are omitted. Only the messages that took place right after the specified message will be counted and exported. This can be used to better analyze the context. Acceptable values are 1 to 10, inclusive. (Default: 0)
     *
     * @return self
     */
    public function setNeighboringMessageLimit($neighboring_message_limit)
    {
        $this->container['neighboring_message_limit'] = $neighboring_message_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


