<?php
/**
 * SendBirdMessageSearchQueryOptions
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdMessageSearchQueryOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdMessageSearchQueryOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.MessageSearchQueryOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advanced_query' => 'bool',
        'channel_custom_type' => 'string',
        'channel_url' => 'string',
        'exact_match' => 'bool',
        'limit' => 'float',
        'message_timestamp_from' => 'float',
        'message_timestamp_to' => 'float',
        'order' => 'string',
        'reverse' => 'bool',
        'target_fields' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advanced_query' => null,
        'channel_custom_type' => null,
        'channel_url' => null,
        'exact_match' => null,
        'limit' => null,
        'message_timestamp_from' => null,
        'message_timestamp_to' => null,
        'order' => null,
        'reverse' => null,
        'target_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advanced_query' => 'advancedQuery',
        'channel_custom_type' => 'channelCustomType',
        'channel_url' => 'channelUrl',
        'exact_match' => 'exactMatch',
        'limit' => 'limit',
        'message_timestamp_from' => 'messageTimestampFrom',
        'message_timestamp_to' => 'messageTimestampTo',
        'order' => 'order',
        'reverse' => 'reverse',
        'target_fields' => 'targetFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advanced_query' => 'setAdvancedQuery',
        'channel_custom_type' => 'setChannelCustomType',
        'channel_url' => 'setChannelUrl',
        'exact_match' => 'setExactMatch',
        'limit' => 'setLimit',
        'message_timestamp_from' => 'setMessageTimestampFrom',
        'message_timestamp_to' => 'setMessageTimestampTo',
        'order' => 'setOrder',
        'reverse' => 'setReverse',
        'target_fields' => 'setTargetFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advanced_query' => 'getAdvancedQuery',
        'channel_custom_type' => 'getChannelCustomType',
        'channel_url' => 'getChannelUrl',
        'exact_match' => 'getExactMatch',
        'limit' => 'getLimit',
        'message_timestamp_from' => 'getMessageTimestampFrom',
        'message_timestamp_to' => 'getMessageTimestampTo',
        'order' => 'getOrder',
        'reverse' => 'getReverse',
        'target_fields' => 'getTargetFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ORDER_SCORE = 'score';
    const ORDER_TS = 'ts';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderAllowableValues()
    {
        return [
            self::ORDER_SCORE,
            self::ORDER_TS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advanced_query'] = $data['advanced_query'] ?? null;
        $this->container['channel_custom_type'] = $data['channel_custom_type'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['exact_match'] = $data['exact_match'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['message_timestamp_from'] = $data['message_timestamp_from'] ?? null;
        $this->container['message_timestamp_to'] = $data['message_timestamp_to'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['reverse'] = $data['reverse'] ?? null;
        $this->container['target_fields'] = $data['target_fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($this->container['order']) && !in_array($this->container['order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order', must be one of '%s'",
                $this->container['order'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advanced_query
     *
     * @return bool|null
     */
    public function getAdvancedQuery()
    {
        return $this->container['advanced_query'];
    }

    /**
     * Sets advanced_query
     *
     * @param bool|null $advanced_query advanced_query
     *
     * @return self
     */
    public function setAdvancedQuery($advanced_query)
    {
        $this->container['advanced_query'] = $advanced_query;

        return $this;
    }

    /**
     * Gets channel_custom_type
     *
     * @return string|null
     */
    public function getChannelCustomType()
    {
        return $this->container['channel_custom_type'];
    }

    /**
     * Sets channel_custom_type
     *
     * @param string|null $channel_custom_type channel_custom_type
     *
     * @return self
     */
    public function setChannelCustomType($channel_custom_type)
    {
        $this->container['channel_custom_type'] = $channel_custom_type;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets exact_match
     *
     * @return bool|null
     */
    public function getExactMatch()
    {
        return $this->container['exact_match'];
    }

    /**
     * Sets exact_match
     *
     * @param bool|null $exact_match exact_match
     *
     * @return self
     */
    public function setExactMatch($exact_match)
    {
        $this->container['exact_match'] = $exact_match;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return float|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param float|null $limit limit
     *
     * @return self
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets message_timestamp_from
     *
     * @return float|null
     */
    public function getMessageTimestampFrom()
    {
        return $this->container['message_timestamp_from'];
    }

    /**
     * Sets message_timestamp_from
     *
     * @param float|null $message_timestamp_from message_timestamp_from
     *
     * @return self
     */
    public function setMessageTimestampFrom($message_timestamp_from)
    {
        $this->container['message_timestamp_from'] = $message_timestamp_from;

        return $this;
    }

    /**
     * Gets message_timestamp_to
     *
     * @return float|null
     */
    public function getMessageTimestampTo()
    {
        return $this->container['message_timestamp_to'];
    }

    /**
     * Sets message_timestamp_to
     *
     * @param float|null $message_timestamp_to message_timestamp_to
     *
     * @return self
     */
    public function setMessageTimestampTo($message_timestamp_to)
    {
        $this->container['message_timestamp_to'] = $message_timestamp_to;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($order) && !in_array($order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order', must be one of '%s'",
                    $order,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets reverse
     *
     * @return bool|null
     */
    public function getReverse()
    {
        return $this->container['reverse'];
    }

    /**
     * Sets reverse
     *
     * @param bool|null $reverse reverse
     *
     * @return self
     */
    public function setReverse($reverse)
    {
        $this->container['reverse'] = $reverse;

        return $this;
    }

    /**
     * Gets target_fields
     *
     * @return string[]|null
     */
    public function getTargetFields()
    {
        return $this->container['target_fields'];
    }

    /**
     * Sets target_fields
     *
     * @param string[]|null $target_fields target_fields
     *
     * @return self
     */
    public function setTargetFields($target_fields)
    {
        $this->container['target_fields'] = $target_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


