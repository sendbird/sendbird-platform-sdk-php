<?php
/**
 * SendMessageData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendMessageData Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendMessageData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sendMessageData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'string',
        'channel_type' => 'string',
        'channel_url' => 'string',
        'message_type' => 'string',
        'message' => 'string',
        'custom_type' => 'string',
        'data' => 'string',
        'send_push' => 'bool',
        'mention_type' => 'string',
        'mentioned_user_ids' => 'string[]',
        'is_silent' => 'bool',
        'sorted_metaarray' => 'string',
        'created_at' => 'int',
        'dedup_id' => 'string',
        'apns_bundle_id' => 'string',
        'sound' => 'string',
        'volume' => 'float',
        'url' => 'string',
        'file' => 'string',
        'file_name' => 'string',
        'file_size' => 'float',
        'file_type' => 'string',
        'thumbnails' => 'string[]',
        'thumbnail1' => 'string',
        'thumbnail2' => 'string',
        'thumbnail3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => null,
        'channel_type' => null,
        'channel_url' => null,
        'message_type' => null,
        'message' => null,
        'custom_type' => null,
        'data' => null,
        'send_push' => null,
        'mention_type' => null,
        'mentioned_user_ids' => null,
        'is_silent' => null,
        'sorted_metaarray' => null,
        'created_at' => null,
        'dedup_id' => null,
        'apns_bundle_id' => null,
        'sound' => null,
        'volume' => null,
        'url' => null,
        'file' => null,
        'file_name' => null,
        'file_size' => null,
        'file_type' => null,
        'thumbnails' => null,
        'thumbnail1' => null,
        'thumbnail2' => null,
        'thumbnail3' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'channel_type' => 'channel_type',
        'channel_url' => 'channel_url',
        'message_type' => 'message_type',
        'message' => 'message',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'send_push' => 'send_push',
        'mention_type' => 'mention_type',
        'mentioned_user_ids' => 'mentioned_user_ids',
        'is_silent' => 'is_silent',
        'sorted_metaarray' => 'sorted_metaarray',
        'created_at' => 'created_at',
        'dedup_id' => 'dedup_id',
        'apns_bundle_id' => 'apns_bundle_id',
        'sound' => 'sound',
        'volume' => 'volume',
        'url' => 'url',
        'file' => 'file',
        'file_name' => 'file_name',
        'file_size' => 'file_size',
        'file_type' => 'file_type',
        'thumbnails' => 'thumbnails',
        'thumbnail1' => 'thumbnail1',
        'thumbnail2' => 'thumbnail2',
        'thumbnail3' => 'thumbnail3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'channel_type' => 'setChannelType',
        'channel_url' => 'setChannelUrl',
        'message_type' => 'setMessageType',
        'message' => 'setMessage',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'send_push' => 'setSendPush',
        'mention_type' => 'setMentionType',
        'mentioned_user_ids' => 'setMentionedUserIds',
        'is_silent' => 'setIsSilent',
        'sorted_metaarray' => 'setSortedMetaarray',
        'created_at' => 'setCreatedAt',
        'dedup_id' => 'setDedupId',
        'apns_bundle_id' => 'setApnsBundleId',
        'sound' => 'setSound',
        'volume' => 'setVolume',
        'url' => 'setUrl',
        'file' => 'setFile',
        'file_name' => 'setFileName',
        'file_size' => 'setFileSize',
        'file_type' => 'setFileType',
        'thumbnails' => 'setThumbnails',
        'thumbnail1' => 'setThumbnail1',
        'thumbnail2' => 'setThumbnail2',
        'thumbnail3' => 'setThumbnail3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'channel_type' => 'getChannelType',
        'channel_url' => 'getChannelUrl',
        'message_type' => 'getMessageType',
        'message' => 'getMessage',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'send_push' => 'getSendPush',
        'mention_type' => 'getMentionType',
        'mentioned_user_ids' => 'getMentionedUserIds',
        'is_silent' => 'getIsSilent',
        'sorted_metaarray' => 'getSortedMetaarray',
        'created_at' => 'getCreatedAt',
        'dedup_id' => 'getDedupId',
        'apns_bundle_id' => 'getApnsBundleId',
        'sound' => 'getSound',
        'volume' => 'getVolume',
        'url' => 'getUrl',
        'file' => 'getFile',
        'file_name' => 'getFileName',
        'file_size' => 'getFileSize',
        'file_type' => 'getFileType',
        'thumbnails' => 'getThumbnails',
        'thumbnail1' => 'getThumbnail1',
        'thumbnail2' => 'getThumbnail2',
        'thumbnail3' => 'getThumbnail3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['channel_type'] = $data['channel_type'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['message_type'] = $data['message_type'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['send_push'] = $data['send_push'] ?? null;
        $this->container['mention_type'] = $data['mention_type'] ?? null;
        $this->container['mentioned_user_ids'] = $data['mentioned_user_ids'] ?? null;
        $this->container['is_silent'] = $data['is_silent'] ?? null;
        $this->container['sorted_metaarray'] = $data['sorted_metaarray'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['dedup_id'] = $data['dedup_id'] ?? null;
        $this->container['apns_bundle_id'] = $data['apns_bundle_id'] ?? null;
        $this->container['sound'] = $data['sound'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
        $this->container['thumbnails'] = $data['thumbnails'] ?? null;
        $this->container['thumbnail1'] = $data['thumbnail1'] ?? null;
        $this->container['thumbnail2'] = $data['thumbnail2'] ?? null;
        $this->container['thumbnail3'] = $data['thumbnail3'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['message_type'] === null) {
            $invalidProperties[] = "'message_type' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Specifies the user ID of the sender.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets channel_type
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param string|null $channel_type Specifies the type of the channel. Either open_channels or group_channels.
     *
     * @return self
     */
    public function setChannelType($channel_type)
    {
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url Specifies the URL of the channel to send a message to.
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type Specifies the type of the message as MESG, FILE or ADMM
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Specifies the content of the message.
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.<br /><br /> Custom types are also used within Sendbird's [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Specifies additional message information such as custom font size, font type or `JSON` formatted string.
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets send_push
     *
     * @return bool|null
     */
    public function getSendPush()
    {
        return $this->container['send_push'];
    }

    /**
     * Sets send_push
     *
     * @param bool|null $send_push Determines whether to send a push notification for the message to the members of the channel (applicable to group channels only). Unlike text and file messages, a push notification for an admin message is not sent by default. (Default: true)
     *
     * @return self
     */
    public function setSendPush($send_push)
    {
        $this->container['send_push'] = $send_push;

        return $this;
    }

    /**
     * Gets mention_type
     *
     * @return string|null
     */
    public function getMentionType()
    {
        return $this->container['mention_type'];
    }

    /**
     * Sets mention_type
     *
     * @param string|null $mention_type Specifies the mentioning type which indicates the user scope who will get a notification for the message. Acceptable values are users and channel. If set to users, only the specified users with the mentioned_users property below will get notified. If set to channel, all users in the channel will get notified. (Default: users)
     *
     * @return self
     */
    public function setMentionType($mention_type)
    {
        $this->container['mention_type'] = $mention_type;

        return $this;
    }

    /**
     * Gets mentioned_user_ids
     *
     * @return string[]|null
     */
    public function getMentionedUserIds()
    {
        return $this->container['mentioned_user_ids'];
    }

    /**
     * Sets mentioned_user_ids
     *
     * @param string[]|null $mentioned_user_ids Specifies an array of one or more IDs of the users who will get a notification for the message.
     *
     * @return self
     */
    public function setMentionedUserIds($mentioned_user_ids)
    {
        $this->container['mentioned_user_ids'] = $mentioned_user_ids;

        return $this;
    }

    /**
     * Gets is_silent
     *
     * @return bool|null
     */
    public function getIsSilent()
    {
        return $this->container['is_silent'];
    }

    /**
     * Sets is_silent
     *
     * @param bool|null $is_silent Determines whether to send a message without updating some of the channel properties. If a message is sent in a channel, with this property set to true, the channel's last_message is updated only for the sender while its unread_message_count remains unchanged for all channel members. Also, the message doesn't send a push notification to message receivers. If the message is sent to a hidden channel, the channel still remains hidden. (Default: false)</br></br>  Once the value of this property is set, it can't be reverted.
     *
     * @return self
     */
    public function setIsSilent($is_silent)
    {
        $this->container['is_silent'] = $is_silent;

        return $this;
    }

    /**
     * Gets sorted_metaarray
     *
     * @return string|null
     */
    public function getSortedMetaarray()
    {
        return $this->container['sorted_metaarray'];
    }

    /**
     * Sets sorted_metaarray
     *
     * @param string|null $sorted_metaarray Specifies a `JSON` object of one or more key-values items which store additional message information. Each item consists of a key and the values in an array. Items are saved and will be returned in the exact order they've been specified.
     *
     * @return self
     */
    public function setSortedMetaarray($sorted_metaarray)
    {
        $this->container['sorted_metaarray'] = $sorted_metaarray;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. This property can be used when migrating the messages of other system to Sendbird server. If specified, the server sets the message's creation time as the property value.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dedup_id
     *
     * @return string|null
     */
    public function getDedupId()
    {
        return $this->container['dedup_id'];
    }

    /**
     * Sets dedup_id
     *
     * @param string|null $dedup_id Specifies the unique message ID created by other system. In general, this property is used to prevent the same message data from getting inserted when migrating the messages of the other system to Sendbird server. If specified, the server performs a duplicate check using the property value.
     *
     * @return self
     */
    public function setDedupId($dedup_id)
    {
        $this->container['dedup_id'] = $dedup_id;

        return $this;
    }

    /**
     * Gets apns_bundle_id
     *
     * @return string|null
     */
    public function getApnsBundleId()
    {
        return $this->container['apns_bundle_id'];
    }

    /**
     * Sets apns_bundle_id
     *
     * @param string|null $apns_bundle_id Specifies the bundle ID of the client app in order to send a push notification to iOS devices. You can find this in Settings > Chat > Notifications > Push notification services
     *
     * @return self
     */
    public function setApnsBundleId($apns_bundle_id)
    {
        $this->container['apns_bundle_id'] = $apns_bundle_id;

        return $this;
    }

    /**
     * Gets sound
     *
     * @return string|null
     */
    public function getSound()
    {
        return $this->container['sound'];
    }

    /**
     * Sets sound
     *
     * @param string|null $sound Specifies the name of the file that sounds for critical alerts.
     *
     * @return self
     */
    public function setSound($sound)
    {
        $this->container['sound'] = $sound;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume Specifies the volume of the critical alert sound. The volume ranges from 0.0 to 1.0, which indicates silent and full volume, respectively. (Default 1.0)
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return float|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param float|null $file_size file_size
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type file_type
     *
     * @return self
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return string[]|null
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param string[]|null $thumbnails thumbnails
     *
     * @return self
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets thumbnail1
     *
     * @return string|null
     */
    public function getThumbnail1()
    {
        return $this->container['thumbnail1'];
    }

    /**
     * Sets thumbnail1
     *
     * @param string|null $thumbnail1 thumbnail1
     *
     * @return self
     */
    public function setThumbnail1($thumbnail1)
    {
        $this->container['thumbnail1'] = $thumbnail1;

        return $this;
    }

    /**
     * Gets thumbnail2
     *
     * @return string|null
     */
    public function getThumbnail2()
    {
        return $this->container['thumbnail2'];
    }

    /**
     * Sets thumbnail2
     *
     * @param string|null $thumbnail2 thumbnail2
     *
     * @return self
     */
    public function setThumbnail2($thumbnail2)
    {
        $this->container['thumbnail2'] = $thumbnail2;

        return $this;
    }

    /**
     * Gets thumbnail3
     *
     * @return string|null
     */
    public function getThumbnail3()
    {
        return $this->container['thumbnail3'];
    }

    /**
     * Sets thumbnail3
     *
     * @param string|null $thumbnail3 thumbnail3
     *
     * @return self
     */
    public function setThumbnail3($thumbnail3)
    {
        $this->container['thumbnail3'] = $thumbnail3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


