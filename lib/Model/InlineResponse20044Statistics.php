<?php
/**
 * InlineResponse20044Statistics
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * InlineResponse20044Statistics Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20044Statistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_44_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_range' => 'string',
        'canceled_announcement_count' => 'float',
        'stopped_announcement_count' => 'float',
        'completed_announcement_count' => 'float',
        'total_announcement_count' => 'float',
        'target_channel_count' => 'float',
        'target_user_count' => 'float',
        'sent_channel_count' => 'float',
        'sent_user_count' => 'float',
        'open_rate' => 'float',
        'open_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_range' => null,
        'canceled_announcement_count' => null,
        'stopped_announcement_count' => null,
        'completed_announcement_count' => null,
        'total_announcement_count' => null,
        'target_channel_count' => null,
        'target_user_count' => null,
        'sent_channel_count' => null,
        'sent_user_count' => null,
        'open_rate' => null,
        'open_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_range' => 'date_range',
        'canceled_announcement_count' => 'canceled_announcement_count',
        'stopped_announcement_count' => 'stopped_announcement_count',
        'completed_announcement_count' => 'completed_announcement_count',
        'total_announcement_count' => 'total_announcement_count',
        'target_channel_count' => 'target_channel_count',
        'target_user_count' => 'target_user_count',
        'sent_channel_count' => 'sent_channel_count',
        'sent_user_count' => 'sent_user_count',
        'open_rate' => 'open_rate',
        'open_count' => 'open_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_range' => 'setDateRange',
        'canceled_announcement_count' => 'setCanceledAnnouncementCount',
        'stopped_announcement_count' => 'setStoppedAnnouncementCount',
        'completed_announcement_count' => 'setCompletedAnnouncementCount',
        'total_announcement_count' => 'setTotalAnnouncementCount',
        'target_channel_count' => 'setTargetChannelCount',
        'target_user_count' => 'setTargetUserCount',
        'sent_channel_count' => 'setSentChannelCount',
        'sent_user_count' => 'setSentUserCount',
        'open_rate' => 'setOpenRate',
        'open_count' => 'setOpenCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_range' => 'getDateRange',
        'canceled_announcement_count' => 'getCanceledAnnouncementCount',
        'stopped_announcement_count' => 'getStoppedAnnouncementCount',
        'completed_announcement_count' => 'getCompletedAnnouncementCount',
        'total_announcement_count' => 'getTotalAnnouncementCount',
        'target_channel_count' => 'getTargetChannelCount',
        'target_user_count' => 'getTargetUserCount',
        'sent_channel_count' => 'getSentChannelCount',
        'sent_user_count' => 'getSentUserCount',
        'open_rate' => 'getOpenRate',
        'open_count' => 'getOpenCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_range'] = $data['date_range'] ?? null;
        $this->container['canceled_announcement_count'] = $data['canceled_announcement_count'] ?? null;
        $this->container['stopped_announcement_count'] = $data['stopped_announcement_count'] ?? null;
        $this->container['completed_announcement_count'] = $data['completed_announcement_count'] ?? null;
        $this->container['total_announcement_count'] = $data['total_announcement_count'] ?? null;
        $this->container['target_channel_count'] = $data['target_channel_count'] ?? null;
        $this->container['target_user_count'] = $data['target_user_count'] ?? null;
        $this->container['sent_channel_count'] = $data['sent_channel_count'] ?? null;
        $this->container['sent_user_count'] = $data['sent_user_count'] ?? null;
        $this->container['open_rate'] = $data['open_rate'] ?? null;
        $this->container['open_count'] = $data['open_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_range
     *
     * @return string|null
     */
    public function getDateRange()
    {
        return $this->container['date_range'];
    }

    /**
     * Sets date_range
     *
     * @param string|null $date_range date_range
     *
     * @return self
     */
    public function setDateRange($date_range)
    {
        $this->container['date_range'] = $date_range;

        return $this;
    }

    /**
     * Gets canceled_announcement_count
     *
     * @return float|null
     */
    public function getCanceledAnnouncementCount()
    {
        return $this->container['canceled_announcement_count'];
    }

    /**
     * Sets canceled_announcement_count
     *
     * @param float|null $canceled_announcement_count canceled_announcement_count
     *
     * @return self
     */
    public function setCanceledAnnouncementCount($canceled_announcement_count)
    {
        $this->container['canceled_announcement_count'] = $canceled_announcement_count;

        return $this;
    }

    /**
     * Gets stopped_announcement_count
     *
     * @return float|null
     */
    public function getStoppedAnnouncementCount()
    {
        return $this->container['stopped_announcement_count'];
    }

    /**
     * Sets stopped_announcement_count
     *
     * @param float|null $stopped_announcement_count stopped_announcement_count
     *
     * @return self
     */
    public function setStoppedAnnouncementCount($stopped_announcement_count)
    {
        $this->container['stopped_announcement_count'] = $stopped_announcement_count;

        return $this;
    }

    /**
     * Gets completed_announcement_count
     *
     * @return float|null
     */
    public function getCompletedAnnouncementCount()
    {
        return $this->container['completed_announcement_count'];
    }

    /**
     * Sets completed_announcement_count
     *
     * @param float|null $completed_announcement_count completed_announcement_count
     *
     * @return self
     */
    public function setCompletedAnnouncementCount($completed_announcement_count)
    {
        $this->container['completed_announcement_count'] = $completed_announcement_count;

        return $this;
    }

    /**
     * Gets total_announcement_count
     *
     * @return float|null
     */
    public function getTotalAnnouncementCount()
    {
        return $this->container['total_announcement_count'];
    }

    /**
     * Sets total_announcement_count
     *
     * @param float|null $total_announcement_count total_announcement_count
     *
     * @return self
     */
    public function setTotalAnnouncementCount($total_announcement_count)
    {
        $this->container['total_announcement_count'] = $total_announcement_count;

        return $this;
    }

    /**
     * Gets target_channel_count
     *
     * @return float|null
     */
    public function getTargetChannelCount()
    {
        return $this->container['target_channel_count'];
    }

    /**
     * Sets target_channel_count
     *
     * @param float|null $target_channel_count target_channel_count
     *
     * @return self
     */
    public function setTargetChannelCount($target_channel_count)
    {
        $this->container['target_channel_count'] = $target_channel_count;

        return $this;
    }

    /**
     * Gets target_user_count
     *
     * @return float|null
     */
    public function getTargetUserCount()
    {
        return $this->container['target_user_count'];
    }

    /**
     * Sets target_user_count
     *
     * @param float|null $target_user_count target_user_count
     *
     * @return self
     */
    public function setTargetUserCount($target_user_count)
    {
        $this->container['target_user_count'] = $target_user_count;

        return $this;
    }

    /**
     * Gets sent_channel_count
     *
     * @return float|null
     */
    public function getSentChannelCount()
    {
        return $this->container['sent_channel_count'];
    }

    /**
     * Sets sent_channel_count
     *
     * @param float|null $sent_channel_count sent_channel_count
     *
     * @return self
     */
    public function setSentChannelCount($sent_channel_count)
    {
        $this->container['sent_channel_count'] = $sent_channel_count;

        return $this;
    }

    /**
     * Gets sent_user_count
     *
     * @return float|null
     */
    public function getSentUserCount()
    {
        return $this->container['sent_user_count'];
    }

    /**
     * Sets sent_user_count
     *
     * @param float|null $sent_user_count sent_user_count
     *
     * @return self
     */
    public function setSentUserCount($sent_user_count)
    {
        $this->container['sent_user_count'] = $sent_user_count;

        return $this;
    }

    /**
     * Gets open_rate
     *
     * @return float|null
     */
    public function getOpenRate()
    {
        return $this->container['open_rate'];
    }

    /**
     * Sets open_rate
     *
     * @param float|null $open_rate open_rate
     *
     * @return self
     */
    public function setOpenRate($open_rate)
    {
        $this->container['open_rate'] = $open_rate;

        return $this;
    }

    /**
     * Gets open_count
     *
     * @return float|null
     */
    public function getOpenCount()
    {
        return $this->container['open_count'];
    }

    /**
     * Sets open_count
     *
     * @param float|null $open_count open_count
     *
     * @return self
     */
    public function setOpenCount($open_count)
    {
        $this->container['open_count'] = $open_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


