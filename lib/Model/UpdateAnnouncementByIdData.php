<?php
/**
 * UpdateAnnouncementByIdData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateAnnouncementByIdData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdateAnnouncementByIdData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateAnnouncementByIdData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unique_id' => 'string',
        'action' => 'string',
        'announcement_group' => 'string',
        'create_channel' => 'bool',
        'create_channel_options_name' => 'string',
        'create_channel_options_cover_url' => 'string',
        'create_channel_options_custom_type' => 'string',
        'create_channel_options_data' => 'string',
        'create_channel_options_distinct' => 'string',
        'message_user_id' => 'string',
        'message_content' => 'string',
        'message_data' => 'string',
        'enable_push' => 'bool',
        'scheduled_at' => 'int',
        'end_at' => 'int',
        'cease_at' => 'string',
        'resume_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unique_id' => null,
        'action' => null,
        'announcement_group' => null,
        'create_channel' => null,
        'create_channel_options_name' => null,
        'create_channel_options_cover_url' => null,
        'create_channel_options_custom_type' => null,
        'create_channel_options_data' => null,
        'create_channel_options_distinct' => null,
        'message_user_id' => null,
        'message_content' => null,
        'message_data' => null,
        'enable_push' => null,
        'scheduled_at' => null,
        'end_at' => null,
        'cease_at' => null,
        'resume_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unique_id' => 'unique_id',
        'action' => 'action',
        'announcement_group' => 'announcement_group',
        'create_channel' => 'create_channel',
        'create_channel_options_name' => 'create_channel_options.name',
        'create_channel_options_cover_url' => 'create_channel_options.cover_url',
        'create_channel_options_custom_type' => 'create_channel_options.custom_type',
        'create_channel_options_data' => 'create_channel_options.data',
        'create_channel_options_distinct' => 'create_channel_options.distinct',
        'message_user_id' => 'message.user_id',
        'message_content' => 'message.content',
        'message_data' => 'message.data',
        'enable_push' => 'enable_push',
        'scheduled_at' => 'scheduled_at',
        'end_at' => 'end_at',
        'cease_at' => 'cease_at',
        'resume_at' => 'resume_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unique_id' => 'setUniqueId',
        'action' => 'setAction',
        'announcement_group' => 'setAnnouncementGroup',
        'create_channel' => 'setCreateChannel',
        'create_channel_options_name' => 'setCreateChannelOptionsName',
        'create_channel_options_cover_url' => 'setCreateChannelOptionsCoverUrl',
        'create_channel_options_custom_type' => 'setCreateChannelOptionsCustomType',
        'create_channel_options_data' => 'setCreateChannelOptionsData',
        'create_channel_options_distinct' => 'setCreateChannelOptionsDistinct',
        'message_user_id' => 'setMessageUserId',
        'message_content' => 'setMessageContent',
        'message_data' => 'setMessageData',
        'enable_push' => 'setEnablePush',
        'scheduled_at' => 'setScheduledAt',
        'end_at' => 'setEndAt',
        'cease_at' => 'setCeaseAt',
        'resume_at' => 'setResumeAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unique_id' => 'getUniqueId',
        'action' => 'getAction',
        'announcement_group' => 'getAnnouncementGroup',
        'create_channel' => 'getCreateChannel',
        'create_channel_options_name' => 'getCreateChannelOptionsName',
        'create_channel_options_cover_url' => 'getCreateChannelOptionsCoverUrl',
        'create_channel_options_custom_type' => 'getCreateChannelOptionsCustomType',
        'create_channel_options_data' => 'getCreateChannelOptionsData',
        'create_channel_options_distinct' => 'getCreateChannelOptionsDistinct',
        'message_user_id' => 'getMessageUserId',
        'message_content' => 'getMessageContent',
        'message_data' => 'getMessageData',
        'enable_push' => 'getEnablePush',
        'scheduled_at' => 'getScheduledAt',
        'end_at' => 'getEndAt',
        'cease_at' => 'getCeaseAt',
        'resume_at' => 'getResumeAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unique_id'] = $data['unique_id'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['announcement_group'] = $data['announcement_group'] ?? null;
        $this->container['create_channel'] = $data['create_channel'] ?? null;
        $this->container['create_channel_options_name'] = $data['create_channel_options_name'] ?? null;
        $this->container['create_channel_options_cover_url'] = $data['create_channel_options_cover_url'] ?? null;
        $this->container['create_channel_options_custom_type'] = $data['create_channel_options_custom_type'] ?? null;
        $this->container['create_channel_options_data'] = $data['create_channel_options_data'] ?? null;
        $this->container['create_channel_options_distinct'] = $data['create_channel_options_distinct'] ?? null;
        $this->container['message_user_id'] = $data['message_user_id'] ?? null;
        $this->container['message_content'] = $data['message_content'] ?? null;
        $this->container['message_data'] = $data['message_data'] ?? null;
        $this->container['enable_push'] = $data['enable_push'] ?? null;
        $this->container['scheduled_at'] = $data['scheduled_at'] ?? null;
        $this->container['end_at'] = $data['end_at'] ?? null;
        $this->container['cease_at'] = $data['cease_at'] ?? null;
        $this->container['resume_at'] = $data['resume_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unique_id'] === null) {
            $invalidProperties[] = "'unique_id' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['announcement_group'] === null) {
            $invalidProperties[] = "'announcement_group' can't be null";
        }
        if ($this->container['create_channel'] === null) {
            $invalidProperties[] = "'create_channel' can't be null";
        }
        if ($this->container['create_channel_options_name'] === null) {
            $invalidProperties[] = "'create_channel_options_name' can't be null";
        }
        if ($this->container['create_channel_options_cover_url'] === null) {
            $invalidProperties[] = "'create_channel_options_cover_url' can't be null";
        }
        if ($this->container['create_channel_options_custom_type'] === null) {
            $invalidProperties[] = "'create_channel_options_custom_type' can't be null";
        }
        if ($this->container['create_channel_options_data'] === null) {
            $invalidProperties[] = "'create_channel_options_data' can't be null";
        }
        if ($this->container['create_channel_options_distinct'] === null) {
            $invalidProperties[] = "'create_channel_options_distinct' can't be null";
        }
        if ($this->container['message_user_id'] === null) {
            $invalidProperties[] = "'message_user_id' can't be null";
        }
        if ($this->container['message_content'] === null) {
            $invalidProperties[] = "'message_content' can't be null";
        }
        if ($this->container['message_data'] === null) {
            $invalidProperties[] = "'message_data' can't be null";
        }
        if ($this->container['enable_push'] === null) {
            $invalidProperties[] = "'enable_push' can't be null";
        }
        if ($this->container['scheduled_at'] === null) {
            $invalidProperties[] = "'scheduled_at' can't be null";
        }
        if ($this->container['end_at'] === null) {
            $invalidProperties[] = "'end_at' can't be null";
        }
        if ($this->container['cease_at'] === null) {
            $invalidProperties[] = "'cease_at' can't be null";
        }
        if ($this->container['resume_at'] === null) {
            $invalidProperties[] = "'resume_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id Specifies the unique ID of the announcement to update.
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Specifies an action to take on the announcement. If this property is updated, other specified properties in the request are not effective. Acceptable values are limited to remove, pause, resume, and cancel. The [Announcement actions](#2-update-an-announcement-3-how-to-change-announcement-status) table explains each action in detail.
     *
     * @return self
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets announcement_group
     *
     * @return string
     */
    public function getAnnouncementGroup()
    {
        return $this->container['announcement_group'];
    }

    /**
     * Sets announcement_group
     *
     * @param string $announcement_group Specifies the name of an announcement group to retrieve. If not specified, all announcements are returned, regardless of their group.
     *
     * @return self
     */
    public function setAnnouncementGroup($announcement_group)
    {
        $this->container['announcement_group'] = $announcement_group;

        return $this;
    }

    /**
     * Gets create_channel
     *
     * @return bool
     */
    public function getCreateChannel()
    {
        return $this->container['create_channel'];
    }

    /**
     * Sets create_channel
     *
     * @param bool $create_channel Determines whether to create a new channel if there is no existing channel that matches with the target options including target_at and target_list.
     *
     * @return self
     */
    public function setCreateChannel($create_channel)
    {
        $this->container['create_channel'] = $create_channel;

        return $this;
    }

    /**
     * Gets create_channel_options_name
     *
     * @return string
     */
    public function getCreateChannelOptionsName()
    {
        return $this->container['create_channel_options_name'];
    }

    /**
     * Sets create_channel_options_name
     *
     * @param string $create_channel_options_name Specifies the name of the channel. (Default: Group Channel)
     *
     * @return self
     */
    public function setCreateChannelOptionsName($create_channel_options_name)
    {
        $this->container['create_channel_options_name'] = $create_channel_options_name;

        return $this;
    }

    /**
     * Gets create_channel_options_cover_url
     *
     * @return string
     */
    public function getCreateChannelOptionsCoverUrl()
    {
        return $this->container['create_channel_options_cover_url'];
    }

    /**
     * Sets create_channel_options_cover_url
     *
     * @param string $create_channel_options_cover_url Specifies the URL of the cover image.
     *
     * @return self
     */
    public function setCreateChannelOptionsCoverUrl($create_channel_options_cover_url)
    {
        $this->container['create_channel_options_cover_url'] = $create_channel_options_cover_url;

        return $this;
    }

    /**
     * Gets create_channel_options_custom_type
     *
     * @return string
     */
    public function getCreateChannelOptionsCustomType()
    {
        return $this->container['create_channel_options_custom_type'];
    }

    /**
     * Sets create_channel_options_custom_type
     *
     * @param string $create_channel_options_custom_type Specifies the custom channel type.
     *
     * @return self
     */
    public function setCreateChannelOptionsCustomType($create_channel_options_custom_type)
    {
        $this->container['create_channel_options_custom_type'] = $create_channel_options_custom_type;

        return $this;
    }

    /**
     * Gets create_channel_options_data
     *
     * @return string
     */
    public function getCreateChannelOptionsData()
    {
        return $this->container['create_channel_options_data'];
    }

    /**
     * Sets create_channel_options_data
     *
     * @param string $create_channel_options_data Specifies additional channel information such as a long description of the channel or `JSON` formatted string.
     *
     * @return self
     */
    public function setCreateChannelOptionsData($create_channel_options_data)
    {
        $this->container['create_channel_options_data'] = $create_channel_options_data;

        return $this;
    }

    /**
     * Gets create_channel_options_distinct
     *
     * @return string
     */
    public function getCreateChannelOptionsDistinct()
    {
        return $this->container['create_channel_options_distinct'];
    }

    /**
     * Sets create_channel_options_distinct
     *
     * @param string $create_channel_options_distinct Determines whether to create a [distinct](/docs/chat/v3/platform-api/guides/channel-types#2-group-channel) channel. (Default: true)
     *
     * @return self
     */
    public function setCreateChannelOptionsDistinct($create_channel_options_distinct)
    {
        $this->container['create_channel_options_distinct'] = $create_channel_options_distinct;

        return $this;
    }

    /**
     * Gets message_user_id
     *
     * @return string
     */
    public function getMessageUserId()
    {
        return $this->container['message_user_id'];
    }

    /**
     * Sets message_user_id
     *
     * @param string $message_user_id Specifies the unique ID of the announcement sender.
     *
     * @return self
     */
    public function setMessageUserId($message_user_id)
    {
        $this->container['message_user_id'] = $message_user_id;

        return $this;
    }

    /**
     * Gets message_content
     *
     * @return string
     */
    public function getMessageContent()
    {
        return $this->container['message_content'];
    }

    /**
     * Sets message_content
     *
     * @param string $message_content Specifies the content of the message.
     *
     * @return self
     */
    public function setMessageContent($message_content)
    {
        $this->container['message_content'] = $message_content;

        return $this;
    }

    /**
     * Gets message_data
     *
     * @return string
     */
    public function getMessageData()
    {
        return $this->container['message_data'];
    }

    /**
     * Sets message_data
     *
     * @param string $message_data Specifies additional message information such as custom font size, font type or `JSON` formatted string.
     *
     * @return self
     */
    public function setMessageData($message_data)
    {
        $this->container['message_data'] = $message_data;

        return $this;
    }

    /**
     * Gets enable_push
     *
     * @return bool
     */
    public function getEnablePush()
    {
        return $this->container['enable_push'];
    }

    /**
     * Sets enable_push
     *
     * @param bool $enable_push Determines whether to turn on push notification for the announcement. If set to true, push notifications will be sent for announcements.
     *
     * @return self
     */
    public function setEnablePush($enable_push)
    {
        $this->container['enable_push'] = $enable_push;

        return $this;
    }

    /**
     * Gets scheduled_at
     *
     * @return int
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     *
     * @param int $scheduled_at Specifies the time to start the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. (Default: current timestamp)
     *
     * @return self
     */
    public function setScheduledAt($scheduled_at)
    {
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return int
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param int $end_at Specifies the time to permanently end the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format, even if the announcement is not sent to all its targets.
     *
     * @return self
     */
    public function setEndAt($end_at)
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets cease_at
     *
     * @return string
     */
    public function getCeaseAt()
    {
        return $this->container['cease_at'];
    }

    /**
     * Sets cease_at
     *
     * @param string $cease_at Specifies the time to temporarily put the announcement on hold in UTC. The string is represented in HHMM format. This property should be specified in conjunction with the resume_at below.
     *
     * @return self
     */
    public function setCeaseAt($cease_at)
    {
        $this->container['cease_at'] = $cease_at;

        return $this;
    }

    /**
     * Gets resume_at
     *
     * @return string
     */
    public function getResumeAt()
    {
        return $this->container['resume_at'];
    }

    /**
     * Sets resume_at
     *
     * @param string $resume_at Specifies the time to automatically resume the on-hold announcement in UTC. The string is represented in HHMM format. This property should be specified in conjunction with the cease_at above.
     *
     * @return self
     */
    public function setResumeAt($resume_at)
    {
        $this->container['resume_at'] = $resume_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


