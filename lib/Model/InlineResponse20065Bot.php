<?php
/**
 * InlineResponse20065Bot
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * InlineResponse20065Bot Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20065Bot implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_65_bot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bot_token' => 'string',
        'bot_profile_url' => 'string',
        'bot_userid' => 'string',
        'bot_nickname' => 'string',
        'bot_type' => 'string',
        'bot_metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bot_token' => null,
        'bot_profile_url' => null,
        'bot_userid' => null,
        'bot_nickname' => null,
        'bot_type' => null,
        'bot_metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bot_token' => 'bot_token',
        'bot_profile_url' => 'bot_profile_url',
        'bot_userid' => 'bot_userid',
        'bot_nickname' => 'bot_nickname',
        'bot_type' => 'bot_type',
        'bot_metadata' => 'bot_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bot_token' => 'setBotToken',
        'bot_profile_url' => 'setBotProfileUrl',
        'bot_userid' => 'setBotUserid',
        'bot_nickname' => 'setBotNickname',
        'bot_type' => 'setBotType',
        'bot_metadata' => 'setBotMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bot_token' => 'getBotToken',
        'bot_profile_url' => 'getBotProfileUrl',
        'bot_userid' => 'getBotUserid',
        'bot_nickname' => 'getBotNickname',
        'bot_type' => 'getBotType',
        'bot_metadata' => 'getBotMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bot_token'] = $data['bot_token'] ?? null;
        $this->container['bot_profile_url'] = $data['bot_profile_url'] ?? null;
        $this->container['bot_userid'] = $data['bot_userid'] ?? null;
        $this->container['bot_nickname'] = $data['bot_nickname'] ?? null;
        $this->container['bot_type'] = $data['bot_type'] ?? null;
        $this->container['bot_metadata'] = $data['bot_metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bot_token
     *
     * @return string|null
     */
    public function getBotToken()
    {
        return $this->container['bot_token'];
    }

    /**
     * Sets bot_token
     *
     * @param string|null $bot_token bot_token
     *
     * @return self
     */
    public function setBotToken($bot_token)
    {
        $this->container['bot_token'] = $bot_token;

        return $this;
    }

    /**
     * Gets bot_profile_url
     *
     * @return string|null
     */
    public function getBotProfileUrl()
    {
        return $this->container['bot_profile_url'];
    }

    /**
     * Sets bot_profile_url
     *
     * @param string|null $bot_profile_url bot_profile_url
     *
     * @return self
     */
    public function setBotProfileUrl($bot_profile_url)
    {
        $this->container['bot_profile_url'] = $bot_profile_url;

        return $this;
    }

    /**
     * Gets bot_userid
     *
     * @return string|null
     */
    public function getBotUserid()
    {
        return $this->container['bot_userid'];
    }

    /**
     * Sets bot_userid
     *
     * @param string|null $bot_userid bot_userid
     *
     * @return self
     */
    public function setBotUserid($bot_userid)
    {
        $this->container['bot_userid'] = $bot_userid;

        return $this;
    }

    /**
     * Gets bot_nickname
     *
     * @return string|null
     */
    public function getBotNickname()
    {
        return $this->container['bot_nickname'];
    }

    /**
     * Sets bot_nickname
     *
     * @param string|null $bot_nickname bot_nickname
     *
     * @return self
     */
    public function setBotNickname($bot_nickname)
    {
        $this->container['bot_nickname'] = $bot_nickname;

        return $this;
    }

    /**
     * Gets bot_type
     *
     * @return string|null
     */
    public function getBotType()
    {
        return $this->container['bot_type'];
    }

    /**
     * Sets bot_type
     *
     * @param string|null $bot_type bot_type
     *
     * @return self
     */
    public function setBotType($bot_type)
    {
        $this->container['bot_type'] = $bot_type;

        return $this;
    }

    /**
     * Gets bot_metadata
     *
     * @return object|null
     */
    public function getBotMetadata()
    {
        return $this->container['bot_metadata'];
    }

    /**
     * Sets bot_metadata
     *
     * @param object|null $bot_metadata bot_metadata
     *
     * @return self
     */
    public function setBotMetadata($bot_metadata)
    {
        $this->container['bot_metadata'] = $bot_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


