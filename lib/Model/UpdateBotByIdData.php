<?php
/**
 * UpdateBotByIdData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * UpdateBotByIdData Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdateBotByIdData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateBotByIdData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bot_userid' => 'string',
        'bot_nickname' => 'string',
        'bot_profile_url' => 'string',
        'bot_callback_url' => 'string',
        'is_privacy_mode' => 'bool',
        'enable_mark_as_read' => 'bool',
        'show_member' => 'bool',
        'channel_invitation_preference' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bot_userid' => null,
        'bot_nickname' => null,
        'bot_profile_url' => null,
        'bot_callback_url' => null,
        'is_privacy_mode' => null,
        'enable_mark_as_read' => null,
        'show_member' => null,
        'channel_invitation_preference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bot_userid' => 'bot_userid',
        'bot_nickname' => 'bot_nickname',
        'bot_profile_url' => 'bot_profile_url',
        'bot_callback_url' => 'bot_callback_url',
        'is_privacy_mode' => 'is_privacy_mode',
        'enable_mark_as_read' => 'enable_mark_as_read',
        'show_member' => 'show_member',
        'channel_invitation_preference' => 'channel_invitation_preference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bot_userid' => 'setBotUserid',
        'bot_nickname' => 'setBotNickname',
        'bot_profile_url' => 'setBotProfileUrl',
        'bot_callback_url' => 'setBotCallbackUrl',
        'is_privacy_mode' => 'setIsPrivacyMode',
        'enable_mark_as_read' => 'setEnableMarkAsRead',
        'show_member' => 'setShowMember',
        'channel_invitation_preference' => 'setChannelInvitationPreference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bot_userid' => 'getBotUserid',
        'bot_nickname' => 'getBotNickname',
        'bot_profile_url' => 'getBotProfileUrl',
        'bot_callback_url' => 'getBotCallbackUrl',
        'is_privacy_mode' => 'getIsPrivacyMode',
        'enable_mark_as_read' => 'getEnableMarkAsRead',
        'show_member' => 'getShowMember',
        'channel_invitation_preference' => 'getChannelInvitationPreference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bot_userid'] = $data['bot_userid'] ?? null;
        $this->container['bot_nickname'] = $data['bot_nickname'] ?? null;
        $this->container['bot_profile_url'] = $data['bot_profile_url'] ?? null;
        $this->container['bot_callback_url'] = $data['bot_callback_url'] ?? null;
        $this->container['is_privacy_mode'] = $data['is_privacy_mode'] ?? null;
        $this->container['enable_mark_as_read'] = $data['enable_mark_as_read'] ?? null;
        $this->container['show_member'] = $data['show_member'] ?? null;
        $this->container['channel_invitation_preference'] = $data['channel_invitation_preference'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bot_userid'] === null) {
            $invalidProperties[] = "'bot_userid' can't be null";
        }
        if ($this->container['bot_nickname'] === null) {
            $invalidProperties[] = "'bot_nickname' can't be null";
        }
        if ($this->container['bot_profile_url'] === null) {
            $invalidProperties[] = "'bot_profile_url' can't be null";
        }
        if ($this->container['bot_callback_url'] === null) {
            $invalidProperties[] = "'bot_callback_url' can't be null";
        }
        if ($this->container['is_privacy_mode'] === null) {
            $invalidProperties[] = "'is_privacy_mode' can't be null";
        }
        if ($this->container['enable_mark_as_read'] === null) {
            $invalidProperties[] = "'enable_mark_as_read' can't be null";
        }
        if ($this->container['show_member'] === null) {
            $invalidProperties[] = "'show_member' can't be null";
        }
        if ($this->container['channel_invitation_preference'] === null) {
            $invalidProperties[] = "'channel_invitation_preference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bot_userid
     *
     * @return string
     */
    public function getBotUserid()
    {
        return $this->container['bot_userid'];
    }

    /**
     * Sets bot_userid
     *
     * @param string $bot_userid Specifies the ID of the bot to update.
     *
     * @return self
     */
    public function setBotUserid($bot_userid)
    {
        $this->container['bot_userid'] = $bot_userid;

        return $this;
    }

    /**
     * Gets bot_nickname
     *
     * @return string
     */
    public function getBotNickname()
    {
        return $this->container['bot_nickname'];
    }

    /**
     * Sets bot_nickname
     *
     * @param string $bot_nickname Specifies the bot's nickname. The length is limited to 80 characters.
     *
     * @return self
     */
    public function setBotNickname($bot_nickname)
    {
        $this->container['bot_nickname'] = $bot_nickname;

        return $this;
    }

    /**
     * Gets bot_profile_url
     *
     * @return string
     */
    public function getBotProfileUrl()
    {
        return $this->container['bot_profile_url'];
    }

    /**
     * Sets bot_profile_url
     *
     * @param string $bot_profile_url Specifies the URL of the bot's profile image. The size is limited to 2,048 characters.
     *
     * @return self
     */
    public function setBotProfileUrl($bot_profile_url)
    {
        $this->container['bot_profile_url'] = $bot_profile_url;

        return $this;
    }

    /**
     * Gets bot_callback_url
     *
     * @return string
     */
    public function getBotCallbackUrl()
    {
        return $this->container['bot_callback_url'];
    }

    /**
     * Sets bot_callback_url
     *
     * @param string $bot_callback_url Specifies the server URL where bot is located to receive all events, requests, and data forwarded from an application. For security reasons, it is highly recommended that you use an SSL server. The length is limited to 1,024 characters.
     *
     * @return self
     */
    public function setBotCallbackUrl($bot_callback_url)
    {
        $this->container['bot_callback_url'] = $bot_callback_url;

        return $this;
    }

    /**
     * Gets is_privacy_mode
     *
     * @return bool
     */
    public function getIsPrivacyMode()
    {
        return $this->container['is_privacy_mode'];
    }

    /**
     * Sets is_privacy_mode
     *
     * @param bool $is_privacy_mode In the channels of where the bot is a member, determines whether to only forward the messages with the specific conditions to the bot or forword all messages to the bot, for privacy concerns. If set to true, only messages that start with a '/' or mention the bot_userid are forwarded to the bot. If set to false, all messages are forwarded.
     *
     * @return self
     */
    public function setIsPrivacyMode($is_privacy_mode)
    {
        $this->container['is_privacy_mode'] = $is_privacy_mode;

        return $this;
    }

    /**
     * Gets enable_mark_as_read
     *
     * @return bool
     */
    public function getEnableMarkAsRead()
    {
        return $this->container['enable_mark_as_read'];
    }

    /**
     * Sets enable_mark_as_read
     *
     * @param bool $enable_mark_as_read Determines whether to mark the bot's message as read upon sending it. (Default: true)
     *
     * @return self
     */
    public function setEnableMarkAsRead($enable_mark_as_read)
    {
        $this->container['enable_mark_as_read'] = $enable_mark_as_read;

        return $this;
    }

    /**
     * Gets show_member
     *
     * @return bool
     */
    public function getShowMember()
    {
        return $this->container['show_member'];
    }

    /**
     * Sets show_member
     *
     * @param bool $show_member Determines whether to include information about the members of each channel in a callback response. (Default: false)
     *
     * @return self
     */
    public function setShowMember($show_member)
    {
        $this->container['show_member'] = $show_member;

        return $this;
    }

    /**
     * Gets channel_invitation_preference
     *
     * @return int
     */
    public function getChannelInvitationPreference()
    {
        return $this->container['channel_invitation_preference'];
    }

    /**
     * Sets channel_invitation_preference
     *
     * @param int $channel_invitation_preference Determines whether the bot automatically joins the channel when invited or joins the channel after manually accepting an invitation using the API. If set to 0, it automatically joins the channel. If set to 1, the latter takes place. (Default: 0)
     *
     * @return self
     */
    public function setChannelInvitationPreference($channel_invitation_preference)
    {
        $this->container['channel_invitation_preference'] = $channel_invitation_preference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


