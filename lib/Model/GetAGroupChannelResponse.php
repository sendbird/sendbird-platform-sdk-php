<?php
/**
 * GetAGroupChannelResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * GetAGroupChannelResponse Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetAGroupChannelResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getAGroupChannelResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => '\Sendbird\Model\SendbirdGroupChannelDetailChannel',
        'channel_url' => 'string',
        'count_preference' => 'string',
        'cover_url' => 'string',
        'created_at' => 'int',
        'created_by' => '\Sendbird\Model\SendbirdBasicUserInfo',
        'custom_type' => 'string',
        'data' => 'string',
        'delivery_receipt' => 'object',
        'disappearing_message' => '\Sendbird\Model\SendbirdDisappearingMessage',
        'freeze' => 'bool',
        'has_ai_bot' => 'bool',
        'has_bot' => 'bool',
        'hidden_state' => 'string',
        'ignore_profanity_filter' => 'bool',
        'invited_at' => 'int',
        'inviter' => '\Sendbird\Model\SendbirdBasicUserInfo',
        'is_access_code_required' => 'bool',
        'is_broadcast' => 'bool',
        'is_discoverable' => 'bool',
        'is_distinct' => 'bool',
        'is_ephemeral' => 'bool',
        'is_exclusive' => 'bool',
        'is_hidden' => 'bool',
        'is_muted' => 'bool',
        'is_public' => 'bool',
        'is_push_enabled' => 'bool',
        'is_super' => 'bool',
        'joined_member_count' => 'int',
        'joined_ts' => 'int',
        'last_message' => '\Sendbird\Model\SendbirdMessageResponse',
        'max_length_message' => 'int',
        'member_count' => 'int',
        'member_state' => 'string',
        'members' => '\Sendbird\Model\SendbirdMember[]',
        'message_survival_seconds' => 'int',
        'metadata' => 'object',
        'my_role' => 'string',
        'name' => 'string',
        'push_trigger_option' => '\Sendbird\Model\SendbirdPushTriggerOption',
        'read_receipt' => 'array<string,int>',
        'sms_fallback' => '\Sendbird\Model\SendbirdSmsFallback',
        'ts_message_offset' => 'int',
        'unread_mention_count' => 'int',
        'unread_message_count' => 'int',
        'user_last_read' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'channel_url' => null,
        'count_preference' => null,
        'cover_url' => null,
        'created_at' => 'int64',
        'created_by' => null,
        'custom_type' => null,
        'data' => null,
        'delivery_receipt' => null,
        'disappearing_message' => null,
        'freeze' => null,
        'has_ai_bot' => null,
        'has_bot' => null,
        'hidden_state' => null,
        'ignore_profanity_filter' => null,
        'invited_at' => 'int64',
        'inviter' => null,
        'is_access_code_required' => null,
        'is_broadcast' => null,
        'is_discoverable' => null,
        'is_distinct' => null,
        'is_ephemeral' => null,
        'is_exclusive' => null,
        'is_hidden' => null,
        'is_muted' => null,
        'is_public' => null,
        'is_push_enabled' => null,
        'is_super' => null,
        'joined_member_count' => null,
        'joined_ts' => 'int64',
        'last_message' => null,
        'max_length_message' => null,
        'member_count' => null,
        'member_state' => null,
        'members' => null,
        'message_survival_seconds' => null,
        'metadata' => null,
        'my_role' => null,
        'name' => null,
        'push_trigger_option' => null,
        'read_receipt' => 'int64',
        'sms_fallback' => null,
        'ts_message_offset' => 'int64',
        'unread_mention_count' => null,
        'unread_message_count' => null,
        'user_last_read' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'channel_url' => 'channel_url',
        'count_preference' => 'count_preference',
        'cover_url' => 'cover_url',
        'created_at' => 'created_at',
        'created_by' => 'created_by',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'delivery_receipt' => 'delivery_receipt',
        'disappearing_message' => 'disappearing_message',
        'freeze' => 'freeze',
        'has_ai_bot' => 'has_ai_bot',
        'has_bot' => 'has_bot',
        'hidden_state' => 'hidden_state',
        'ignore_profanity_filter' => 'ignore_profanity_filter',
        'invited_at' => 'invited_at',
        'inviter' => 'inviter',
        'is_access_code_required' => 'is_access_code_required',
        'is_broadcast' => 'is_broadcast',
        'is_discoverable' => 'is_discoverable',
        'is_distinct' => 'is_distinct',
        'is_ephemeral' => 'is_ephemeral',
        'is_exclusive' => 'is_exclusive',
        'is_hidden' => 'is_hidden',
        'is_muted' => 'is_muted',
        'is_public' => 'is_public',
        'is_push_enabled' => 'is_push_enabled',
        'is_super' => 'is_super',
        'joined_member_count' => 'joined_member_count',
        'joined_ts' => 'joined_ts',
        'last_message' => 'last_message',
        'max_length_message' => 'max_length_message',
        'member_count' => 'member_count',
        'member_state' => 'member_state',
        'members' => 'members',
        'message_survival_seconds' => 'message_survival_seconds',
        'metadata' => 'metadata',
        'my_role' => 'my_role',
        'name' => 'name',
        'push_trigger_option' => 'push_trigger_option',
        'read_receipt' => 'read_receipt',
        'sms_fallback' => 'sms_fallback',
        'ts_message_offset' => 'ts_message_offset',
        'unread_mention_count' => 'unread_mention_count',
        'unread_message_count' => 'unread_message_count',
        'user_last_read' => 'user_last_read'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'channel_url' => 'setChannelUrl',
        'count_preference' => 'setCountPreference',
        'cover_url' => 'setCoverUrl',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'delivery_receipt' => 'setDeliveryReceipt',
        'disappearing_message' => 'setDisappearingMessage',
        'freeze' => 'setFreeze',
        'has_ai_bot' => 'setHasAiBot',
        'has_bot' => 'setHasBot',
        'hidden_state' => 'setHiddenState',
        'ignore_profanity_filter' => 'setIgnoreProfanityFilter',
        'invited_at' => 'setInvitedAt',
        'inviter' => 'setInviter',
        'is_access_code_required' => 'setIsAccessCodeRequired',
        'is_broadcast' => 'setIsBroadcast',
        'is_discoverable' => 'setIsDiscoverable',
        'is_distinct' => 'setIsDistinct',
        'is_ephemeral' => 'setIsEphemeral',
        'is_exclusive' => 'setIsExclusive',
        'is_hidden' => 'setIsHidden',
        'is_muted' => 'setIsMuted',
        'is_public' => 'setIsPublic',
        'is_push_enabled' => 'setIsPushEnabled',
        'is_super' => 'setIsSuper',
        'joined_member_count' => 'setJoinedMemberCount',
        'joined_ts' => 'setJoinedTs',
        'last_message' => 'setLastMessage',
        'max_length_message' => 'setMaxLengthMessage',
        'member_count' => 'setMemberCount',
        'member_state' => 'setMemberState',
        'members' => 'setMembers',
        'message_survival_seconds' => 'setMessageSurvivalSeconds',
        'metadata' => 'setMetadata',
        'my_role' => 'setMyRole',
        'name' => 'setName',
        'push_trigger_option' => 'setPushTriggerOption',
        'read_receipt' => 'setReadReceipt',
        'sms_fallback' => 'setSmsFallback',
        'ts_message_offset' => 'setTsMessageOffset',
        'unread_mention_count' => 'setUnreadMentionCount',
        'unread_message_count' => 'setUnreadMessageCount',
        'user_last_read' => 'setUserLastRead'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'channel_url' => 'getChannelUrl',
        'count_preference' => 'getCountPreference',
        'cover_url' => 'getCoverUrl',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'delivery_receipt' => 'getDeliveryReceipt',
        'disappearing_message' => 'getDisappearingMessage',
        'freeze' => 'getFreeze',
        'has_ai_bot' => 'getHasAiBot',
        'has_bot' => 'getHasBot',
        'hidden_state' => 'getHiddenState',
        'ignore_profanity_filter' => 'getIgnoreProfanityFilter',
        'invited_at' => 'getInvitedAt',
        'inviter' => 'getInviter',
        'is_access_code_required' => 'getIsAccessCodeRequired',
        'is_broadcast' => 'getIsBroadcast',
        'is_discoverable' => 'getIsDiscoverable',
        'is_distinct' => 'getIsDistinct',
        'is_ephemeral' => 'getIsEphemeral',
        'is_exclusive' => 'getIsExclusive',
        'is_hidden' => 'getIsHidden',
        'is_muted' => 'getIsMuted',
        'is_public' => 'getIsPublic',
        'is_push_enabled' => 'getIsPushEnabled',
        'is_super' => 'getIsSuper',
        'joined_member_count' => 'getJoinedMemberCount',
        'joined_ts' => 'getJoinedTs',
        'last_message' => 'getLastMessage',
        'max_length_message' => 'getMaxLengthMessage',
        'member_count' => 'getMemberCount',
        'member_state' => 'getMemberState',
        'members' => 'getMembers',
        'message_survival_seconds' => 'getMessageSurvivalSeconds',
        'metadata' => 'getMetadata',
        'my_role' => 'getMyRole',
        'name' => 'getName',
        'push_trigger_option' => 'getPushTriggerOption',
        'read_receipt' => 'getReadReceipt',
        'sms_fallback' => 'getSmsFallback',
        'ts_message_offset' => 'getTsMessageOffset',
        'unread_mention_count' => 'getUnreadMentionCount',
        'unread_message_count' => 'getUnreadMessageCount',
        'user_last_read' => 'getUserLastRead'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COUNT_PREFERENCE_FALSE = 'false';
    public const COUNT_PREFERENCE_ALL = 'all';
    public const COUNT_PREFERENCE_UNREAD_MESSAGE_COUNT_ONLY = 'unread_message_count_only';
    public const COUNT_PREFERENCE_UNREAD_MENTIONED_COUNT_ONLY = 'unread_mentioned_count_only';
    public const HIDDEN_STATE_HIDDEN_ALLOW_AUTO_UNHIDE = 'hidden_allow_auto_unhide';
    public const HIDDEN_STATE_HIDDEN_PREVENT_AUTO_UNHIDE = 'hidden_prevent_auto_unhide';
    public const HIDDEN_STATE_UNHIDDEN = 'unhidden';
    public const MEMBER_STATE_INVITED = 'invited';
    public const MEMBER_STATE_JOINED = 'joined';
    public const MEMBER_STATE_NONE = 'none';
    public const MY_ROLE_EMPTY = '';
    public const MY_ROLE_NONE = 'none';
    public const MY_ROLE_OPERATOR = 'operator';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountPreferenceAllowableValues()
    {
        return [
            self::COUNT_PREFERENCE_FALSE,
            self::COUNT_PREFERENCE_ALL,
            self::COUNT_PREFERENCE_UNREAD_MESSAGE_COUNT_ONLY,
            self::COUNT_PREFERENCE_UNREAD_MENTIONED_COUNT_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHiddenStateAllowableValues()
    {
        return [
            self::HIDDEN_STATE_HIDDEN_ALLOW_AUTO_UNHIDE,
            self::HIDDEN_STATE_HIDDEN_PREVENT_AUTO_UNHIDE,
            self::HIDDEN_STATE_UNHIDDEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMemberStateAllowableValues()
    {
        return [
            self::MEMBER_STATE_INVITED,
            self::MEMBER_STATE_JOINED,
            self::MEMBER_STATE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMyRoleAllowableValues()
    {
        return [
            self::MY_ROLE_EMPTY,
            self::MY_ROLE_NONE,
            self::MY_ROLE_OPERATOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['count_preference'] = $data['count_preference'] ?? null;
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['delivery_receipt'] = $data['delivery_receipt'] ?? null;
        $this->container['disappearing_message'] = $data['disappearing_message'] ?? null;
        $this->container['freeze'] = $data['freeze'] ?? null;
        $this->container['has_ai_bot'] = $data['has_ai_bot'] ?? null;
        $this->container['has_bot'] = $data['has_bot'] ?? null;
        $this->container['hidden_state'] = $data['hidden_state'] ?? null;
        $this->container['ignore_profanity_filter'] = $data['ignore_profanity_filter'] ?? null;
        $this->container['invited_at'] = $data['invited_at'] ?? null;
        $this->container['inviter'] = $data['inviter'] ?? null;
        $this->container['is_access_code_required'] = $data['is_access_code_required'] ?? null;
        $this->container['is_broadcast'] = $data['is_broadcast'] ?? null;
        $this->container['is_discoverable'] = $data['is_discoverable'] ?? null;
        $this->container['is_distinct'] = $data['is_distinct'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['is_exclusive'] = $data['is_exclusive'] ?? null;
        $this->container['is_hidden'] = $data['is_hidden'] ?? null;
        $this->container['is_muted'] = $data['is_muted'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['is_push_enabled'] = $data['is_push_enabled'] ?? null;
        $this->container['is_super'] = $data['is_super'] ?? null;
        $this->container['joined_member_count'] = $data['joined_member_count'] ?? null;
        $this->container['joined_ts'] = $data['joined_ts'] ?? null;
        $this->container['last_message'] = $data['last_message'] ?? null;
        $this->container['max_length_message'] = $data['max_length_message'] ?? null;
        $this->container['member_count'] = $data['member_count'] ?? null;
        $this->container['member_state'] = $data['member_state'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['message_survival_seconds'] = $data['message_survival_seconds'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['my_role'] = $data['my_role'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['push_trigger_option'] = $data['push_trigger_option'] ?? null;
        $this->container['read_receipt'] = $data['read_receipt'] ?? null;
        $this->container['sms_fallback'] = $data['sms_fallback'] ?? null;
        $this->container['ts_message_offset'] = $data['ts_message_offset'] ?? null;
        $this->container['unread_mention_count'] = $data['unread_mention_count'] ?? null;
        $this->container['unread_message_count'] = $data['unread_message_count'] ?? null;
        $this->container['user_last_read'] = $data['user_last_read'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel_url'] === null) {
            $invalidProperties[] = "'channel_url' can't be null";
        }
        $allowedValues = $this->getCountPreferenceAllowableValues();
        if (!is_null($this->container['count_preference']) && !in_array($this->container['count_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'count_preference', must be one of '%s'",
                $this->container['count_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHiddenStateAllowableValues();
        if (!is_null($this->container['hidden_state']) && !in_array($this->container['hidden_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hidden_state', must be one of '%s'",
                $this->container['hidden_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMemberStateAllowableValues();
        if (!is_null($this->container['member_state']) && !in_array($this->container['member_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'member_state', must be one of '%s'",
                $this->container['member_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMyRoleAllowableValues();
        if (!is_null($this->container['my_role']) && !in_array($this->container['my_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'my_role', must be one of '%s'",
                $this->container['my_role'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \Sendbird\Model\SendbirdGroupChannelDetailChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Sendbird\Model\SendbirdGroupChannelDetailChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets count_preference
     *
     * @return string|null
     */
    public function getCountPreference()
    {
        return $this->container['count_preference'];
    }

    /**
     * Sets count_preference
     *
     * @param string|null $count_preference count_preference
     *
     * @return self
     */
    public function setCountPreference($count_preference)
    {
        $allowedValues = $this->getCountPreferenceAllowableValues();
        if (!is_null($count_preference) && !in_array($count_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'count_preference', must be one of '%s'",
                    $count_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['count_preference'] = $count_preference;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Sendbird\Model\SendbirdBasicUserInfo|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Sendbird\Model\SendbirdBasicUserInfo|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets delivery_receipt
     *
     * @return object|null
     */
    public function getDeliveryReceipt()
    {
        return $this->container['delivery_receipt'];
    }

    /**
     * Sets delivery_receipt
     *
     * @param object|null $delivery_receipt delivery_receipt
     *
     * @return self
     */
    public function setDeliveryReceipt($delivery_receipt)
    {
        $this->container['delivery_receipt'] = $delivery_receipt;

        return $this;
    }

    /**
     * Gets disappearing_message
     *
     * @return \Sendbird\Model\SendbirdDisappearingMessage|null
     */
    public function getDisappearingMessage()
    {
        return $this->container['disappearing_message'];
    }

    /**
     * Sets disappearing_message
     *
     * @param \Sendbird\Model\SendbirdDisappearingMessage|null $disappearing_message disappearing_message
     *
     * @return self
     */
    public function setDisappearingMessage($disappearing_message)
    {
        $this->container['disappearing_message'] = $disappearing_message;

        return $this;
    }

    /**
     * Gets freeze
     *
     * @return bool|null
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze
     *
     * @param bool|null $freeze freeze
     *
     * @return self
     */
    public function setFreeze($freeze)
    {
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets has_ai_bot
     *
     * @return bool|null
     */
    public function getHasAiBot()
    {
        return $this->container['has_ai_bot'];
    }

    /**
     * Sets has_ai_bot
     *
     * @param bool|null $has_ai_bot has_ai_bot
     *
     * @return self
     */
    public function setHasAiBot($has_ai_bot)
    {
        $this->container['has_ai_bot'] = $has_ai_bot;

        return $this;
    }

    /**
     * Gets has_bot
     *
     * @return bool|null
     */
    public function getHasBot()
    {
        return $this->container['has_bot'];
    }

    /**
     * Sets has_bot
     *
     * @param bool|null $has_bot has_bot
     *
     * @return self
     */
    public function setHasBot($has_bot)
    {
        $this->container['has_bot'] = $has_bot;

        return $this;
    }

    /**
     * Gets hidden_state
     *
     * @return string|null
     */
    public function getHiddenState()
    {
        return $this->container['hidden_state'];
    }

    /**
     * Sets hidden_state
     *
     * @param string|null $hidden_state hidden_state
     *
     * @return self
     */
    public function setHiddenState($hidden_state)
    {
        $allowedValues = $this->getHiddenStateAllowableValues();
        if (!is_null($hidden_state) && !in_array($hidden_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hidden_state', must be one of '%s'",
                    $hidden_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hidden_state'] = $hidden_state;

        return $this;
    }

    /**
     * Gets ignore_profanity_filter
     *
     * @return bool|null
     */
    public function getIgnoreProfanityFilter()
    {
        return $this->container['ignore_profanity_filter'];
    }

    /**
     * Sets ignore_profanity_filter
     *
     * @param bool|null $ignore_profanity_filter ignore_profanity_filter
     *
     * @return self
     */
    public function setIgnoreProfanityFilter($ignore_profanity_filter)
    {
        $this->container['ignore_profanity_filter'] = $ignore_profanity_filter;

        return $this;
    }

    /**
     * Gets invited_at
     *
     * @return int|null
     */
    public function getInvitedAt()
    {
        return $this->container['invited_at'];
    }

    /**
     * Sets invited_at
     *
     * @param int|null $invited_at invited_at
     *
     * @return self
     */
    public function setInvitedAt($invited_at)
    {
        $this->container['invited_at'] = $invited_at;

        return $this;
    }

    /**
     * Gets inviter
     *
     * @return \Sendbird\Model\SendbirdBasicUserInfo|null
     */
    public function getInviter()
    {
        return $this->container['inviter'];
    }

    /**
     * Sets inviter
     *
     * @param \Sendbird\Model\SendbirdBasicUserInfo|null $inviter inviter
     *
     * @return self
     */
    public function setInviter($inviter)
    {
        $this->container['inviter'] = $inviter;

        return $this;
    }

    /**
     * Gets is_access_code_required
     *
     * @return bool|null
     */
    public function getIsAccessCodeRequired()
    {
        return $this->container['is_access_code_required'];
    }

    /**
     * Sets is_access_code_required
     *
     * @param bool|null $is_access_code_required is_access_code_required
     *
     * @return self
     */
    public function setIsAccessCodeRequired($is_access_code_required)
    {
        $this->container['is_access_code_required'] = $is_access_code_required;

        return $this;
    }

    /**
     * Gets is_broadcast
     *
     * @return bool|null
     */
    public function getIsBroadcast()
    {
        return $this->container['is_broadcast'];
    }

    /**
     * Sets is_broadcast
     *
     * @param bool|null $is_broadcast is_broadcast
     *
     * @return self
     */
    public function setIsBroadcast($is_broadcast)
    {
        $this->container['is_broadcast'] = $is_broadcast;

        return $this;
    }

    /**
     * Gets is_discoverable
     *
     * @return bool|null
     */
    public function getIsDiscoverable()
    {
        return $this->container['is_discoverable'];
    }

    /**
     * Sets is_discoverable
     *
     * @param bool|null $is_discoverable is_discoverable
     *
     * @return self
     */
    public function setIsDiscoverable($is_discoverable)
    {
        $this->container['is_discoverable'] = $is_discoverable;

        return $this;
    }

    /**
     * Gets is_distinct
     *
     * @return bool|null
     */
    public function getIsDistinct()
    {
        return $this->container['is_distinct'];
    }

    /**
     * Sets is_distinct
     *
     * @param bool|null $is_distinct is_distinct
     *
     * @return self
     */
    public function setIsDistinct($is_distinct)
    {
        $this->container['is_distinct'] = $is_distinct;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets is_exclusive
     *
     * @return bool|null
     */
    public function getIsExclusive()
    {
        return $this->container['is_exclusive'];
    }

    /**
     * Sets is_exclusive
     *
     * @param bool|null $is_exclusive is_exclusive
     *
     * @return self
     */
    public function setIsExclusive($is_exclusive)
    {
        $this->container['is_exclusive'] = $is_exclusive;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_muted
     *
     * @return bool|null
     */
    public function getIsMuted()
    {
        return $this->container['is_muted'];
    }

    /**
     * Sets is_muted
     *
     * @param bool|null $is_muted is_muted
     *
     * @return self
     */
    public function setIsMuted($is_muted)
    {
        $this->container['is_muted'] = $is_muted;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_push_enabled
     *
     * @return bool|null
     */
    public function getIsPushEnabled()
    {
        return $this->container['is_push_enabled'];
    }

    /**
     * Sets is_push_enabled
     *
     * @param bool|null $is_push_enabled is_push_enabled
     *
     * @return self
     */
    public function setIsPushEnabled($is_push_enabled)
    {
        $this->container['is_push_enabled'] = $is_push_enabled;

        return $this;
    }

    /**
     * Gets is_super
     *
     * @return bool|null
     */
    public function getIsSuper()
    {
        return $this->container['is_super'];
    }

    /**
     * Sets is_super
     *
     * @param bool|null $is_super is_super
     *
     * @return self
     */
    public function setIsSuper($is_super)
    {
        $this->container['is_super'] = $is_super;

        return $this;
    }

    /**
     * Gets joined_member_count
     *
     * @return int|null
     */
    public function getJoinedMemberCount()
    {
        return $this->container['joined_member_count'];
    }

    /**
     * Sets joined_member_count
     *
     * @param int|null $joined_member_count joined_member_count
     *
     * @return self
     */
    public function setJoinedMemberCount($joined_member_count)
    {
        $this->container['joined_member_count'] = $joined_member_count;

        return $this;
    }

    /**
     * Gets joined_ts
     *
     * @return int|null
     */
    public function getJoinedTs()
    {
        return $this->container['joined_ts'];
    }

    /**
     * Sets joined_ts
     *
     * @param int|null $joined_ts joined_ts
     *
     * @return self
     */
    public function setJoinedTs($joined_ts)
    {
        $this->container['joined_ts'] = $joined_ts;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return \Sendbird\Model\SendbirdMessageResponse|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param \Sendbird\Model\SendbirdMessageResponse|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets max_length_message
     *
     * @return int|null
     */
    public function getMaxLengthMessage()
    {
        return $this->container['max_length_message'];
    }

    /**
     * Sets max_length_message
     *
     * @param int|null $max_length_message max_length_message
     *
     * @return self
     */
    public function setMaxLengthMessage($max_length_message)
    {
        $this->container['max_length_message'] = $max_length_message;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int|null
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int|null $member_count member_count
     *
     * @return self
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets member_state
     *
     * @return string|null
     */
    public function getMemberState()
    {
        return $this->container['member_state'];
    }

    /**
     * Sets member_state
     *
     * @param string|null $member_state member_state
     *
     * @return self
     */
    public function setMemberState($member_state)
    {
        $allowedValues = $this->getMemberStateAllowableValues();
        if (!is_null($member_state) && !in_array($member_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'member_state', must be one of '%s'",
                    $member_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['member_state'] = $member_state;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Sendbird\Model\SendbirdMember[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Sendbird\Model\SendbirdMember[]|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets message_survival_seconds
     *
     * @return int|null
     */
    public function getMessageSurvivalSeconds()
    {
        return $this->container['message_survival_seconds'];
    }

    /**
     * Sets message_survival_seconds
     *
     * @param int|null $message_survival_seconds message_survival_seconds
     *
     * @return self
     */
    public function setMessageSurvivalSeconds($message_survival_seconds)
    {
        $this->container['message_survival_seconds'] = $message_survival_seconds;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets my_role
     *
     * @return string|null
     */
    public function getMyRole()
    {
        return $this->container['my_role'];
    }

    /**
     * Sets my_role
     *
     * @param string|null $my_role my_role
     *
     * @return self
     */
    public function setMyRole($my_role)
    {
        $allowedValues = $this->getMyRoleAllowableValues();
        if (!is_null($my_role) && !in_array($my_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'my_role', must be one of '%s'",
                    $my_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['my_role'] = $my_role;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets push_trigger_option
     *
     * @return \Sendbird\Model\SendbirdPushTriggerOption|null
     */
    public function getPushTriggerOption()
    {
        return $this->container['push_trigger_option'];
    }

    /**
     * Sets push_trigger_option
     *
     * @param \Sendbird\Model\SendbirdPushTriggerOption|null $push_trigger_option push_trigger_option
     *
     * @return self
     */
    public function setPushTriggerOption($push_trigger_option)
    {
        $this->container['push_trigger_option'] = $push_trigger_option;

        return $this;
    }

    /**
     * Gets read_receipt
     *
     * @return array<string,int>|null
     */
    public function getReadReceipt()
    {
        return $this->container['read_receipt'];
    }

    /**
     * Sets read_receipt
     *
     * @param array<string,int>|null $read_receipt read_receipt
     *
     * @return self
     */
    public function setReadReceipt($read_receipt)
    {
        $this->container['read_receipt'] = $read_receipt;

        return $this;
    }

    /**
     * Gets sms_fallback
     *
     * @return \Sendbird\Model\SendbirdSmsFallback|null
     */
    public function getSmsFallback()
    {
        return $this->container['sms_fallback'];
    }

    /**
     * Sets sms_fallback
     *
     * @param \Sendbird\Model\SendbirdSmsFallback|null $sms_fallback sms_fallback
     *
     * @return self
     */
    public function setSmsFallback($sms_fallback)
    {
        $this->container['sms_fallback'] = $sms_fallback;

        return $this;
    }

    /**
     * Gets ts_message_offset
     *
     * @return int|null
     */
    public function getTsMessageOffset()
    {
        return $this->container['ts_message_offset'];
    }

    /**
     * Sets ts_message_offset
     *
     * @param int|null $ts_message_offset ts_message_offset
     *
     * @return self
     */
    public function setTsMessageOffset($ts_message_offset)
    {
        $this->container['ts_message_offset'] = $ts_message_offset;

        return $this;
    }

    /**
     * Gets unread_mention_count
     *
     * @return int|null
     */
    public function getUnreadMentionCount()
    {
        return $this->container['unread_mention_count'];
    }

    /**
     * Sets unread_mention_count
     *
     * @param int|null $unread_mention_count unread_mention_count
     *
     * @return self
     */
    public function setUnreadMentionCount($unread_mention_count)
    {
        $this->container['unread_mention_count'] = $unread_mention_count;

        return $this;
    }

    /**
     * Gets unread_message_count
     *
     * @return int|null
     */
    public function getUnreadMessageCount()
    {
        return $this->container['unread_message_count'];
    }

    /**
     * Sets unread_message_count
     *
     * @param int|null $unread_message_count unread_message_count
     *
     * @return self
     */
    public function setUnreadMessageCount($unread_message_count)
    {
        $this->container['unread_message_count'] = $unread_message_count;

        return $this;
    }

    /**
     * Gets user_last_read
     *
     * @return int|null
     */
    public function getUserLastRead()
    {
        return $this->container['user_last_read'];
    }

    /**
     * Sets user_last_read
     *
     * @param int|null $user_last_read user_last_read
     *
     * @return self
     */
    public function setUserLastRead($user_last_read)
    {
        $this->container['user_last_read'] = $user_last_read;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


