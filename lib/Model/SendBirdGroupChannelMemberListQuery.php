<?php
/**
 * SendBirdGroupChannelMemberListQuery
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdGroupChannelMemberListQuery Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdGroupChannelMemberListQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.GroupChannelMemberListQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'has_next' => 'bool',
        'is_loading' => 'bool',
        'limit' => 'float',
        'member_state_filter' => 'string',
        'muted_member_filter' => 'string',
        'nickname_starts_with_filter' => 'string',
        'operator_filter' => 'string',
        'order' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'has_next' => null,
        'is_loading' => null,
        'limit' => null,
        'member_state_filter' => null,
        'muted_member_filter' => null,
        'nickname_starts_with_filter' => null,
        'operator_filter' => null,
        'order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_next' => 'hasNext',
        'is_loading' => 'isLoading',
        'limit' => 'limit',
        'member_state_filter' => 'memberStateFilter',
        'muted_member_filter' => 'mutedMemberFilter',
        'nickname_starts_with_filter' => 'nicknameStartsWithFilter',
        'operator_filter' => 'operatorFilter',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_next' => 'setHasNext',
        'is_loading' => 'setIsLoading',
        'limit' => 'setLimit',
        'member_state_filter' => 'setMemberStateFilter',
        'muted_member_filter' => 'setMutedMemberFilter',
        'nickname_starts_with_filter' => 'setNicknameStartsWithFilter',
        'operator_filter' => 'setOperatorFilter',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_next' => 'getHasNext',
        'is_loading' => 'getIsLoading',
        'limit' => 'getLimit',
        'member_state_filter' => 'getMemberStateFilter',
        'muted_member_filter' => 'getMutedMemberFilter',
        'nickname_starts_with_filter' => 'getNicknameStartsWithFilter',
        'operator_filter' => 'getOperatorFilter',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MEMBER_STATE_FILTER_ALL = 'all';
    const MEMBER_STATE_FILTER_INVITED_BY_FRIEND = 'invited_by_friend';
    const MEMBER_STATE_FILTER_INVITED_BY_NON_FRIEND = 'invited_by_non_friend';
    const MEMBER_STATE_FILTER_INVITED_ONLY = 'invited_only';
    const MEMBER_STATE_FILTER_JOINED_ONLY = 'joined_only';
    const MUTED_MEMBER_FILTER_ALL = 'all';
    const MUTED_MEMBER_FILTER_MUTED = 'muted';
    const MUTED_MEMBER_FILTER_UNMUTED = 'unmuted';
    const OPERATOR_FILTER_ALL = 'all';
    const OPERATOR_FILTER_NONOPERATOR = 'nonoperator';
    const OPERATOR_FILTER_OPERATOR = 'operator';
    const ORDER_MEMBER_NICKNAME_ALPHABETICAL = 'member_nickname_alphabetical';
    const ORDER_OPERATOR_THEN_MEMBER_ALPHABETICAL = 'operator_then_member_alphabetical';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMemberStateFilterAllowableValues()
    {
        return [
            self::MEMBER_STATE_FILTER_ALL,
            self::MEMBER_STATE_FILTER_INVITED_BY_FRIEND,
            self::MEMBER_STATE_FILTER_INVITED_BY_NON_FRIEND,
            self::MEMBER_STATE_FILTER_INVITED_ONLY,
            self::MEMBER_STATE_FILTER_JOINED_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMutedMemberFilterAllowableValues()
    {
        return [
            self::MUTED_MEMBER_FILTER_ALL,
            self::MUTED_MEMBER_FILTER_MUTED,
            self::MUTED_MEMBER_FILTER_UNMUTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorFilterAllowableValues()
    {
        return [
            self::OPERATOR_FILTER_ALL,
            self::OPERATOR_FILTER_NONOPERATOR,
            self::OPERATOR_FILTER_OPERATOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderAllowableValues()
    {
        return [
            self::ORDER_MEMBER_NICKNAME_ALPHABETICAL,
            self::ORDER_OPERATOR_THEN_MEMBER_ALPHABETICAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_next'] = $data['has_next'] ?? null;
        $this->container['is_loading'] = $data['is_loading'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['member_state_filter'] = $data['member_state_filter'] ?? null;
        $this->container['muted_member_filter'] = $data['muted_member_filter'] ?? null;
        $this->container['nickname_starts_with_filter'] = $data['nickname_starts_with_filter'] ?? null;
        $this->container['operator_filter'] = $data['operator_filter'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMemberStateFilterAllowableValues();
        if (!is_null($this->container['member_state_filter']) && !in_array($this->container['member_state_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'member_state_filter', must be one of '%s'",
                $this->container['member_state_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMutedMemberFilterAllowableValues();
        if (!is_null($this->container['muted_member_filter']) && !in_array($this->container['muted_member_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'muted_member_filter', must be one of '%s'",
                $this->container['muted_member_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperatorFilterAllowableValues();
        if (!is_null($this->container['operator_filter']) && !in_array($this->container['operator_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'operator_filter', must be one of '%s'",
                $this->container['operator_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($this->container['order']) && !in_array($this->container['order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order', must be one of '%s'",
                $this->container['order'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_next
     *
     * @return bool|null
     */
    public function getHasNext()
    {
        return $this->container['has_next'];
    }

    /**
     * Sets has_next
     *
     * @param bool|null $has_next has_next
     *
     * @return self
     */
    public function setHasNext($has_next)
    {
        $this->container['has_next'] = $has_next;

        return $this;
    }

    /**
     * Gets is_loading
     *
     * @return bool|null
     */
    public function getIsLoading()
    {
        return $this->container['is_loading'];
    }

    /**
     * Sets is_loading
     *
     * @param bool|null $is_loading is_loading
     *
     * @return self
     */
    public function setIsLoading($is_loading)
    {
        $this->container['is_loading'] = $is_loading;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return float|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param float|null $limit limit
     *
     * @return self
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets member_state_filter
     *
     * @return string|null
     */
    public function getMemberStateFilter()
    {
        return $this->container['member_state_filter'];
    }

    /**
     * Sets member_state_filter
     *
     * @param string|null $member_state_filter member_state_filter
     *
     * @return self
     */
    public function setMemberStateFilter($member_state_filter)
    {
        $allowedValues = $this->getMemberStateFilterAllowableValues();
        if (!is_null($member_state_filter) && !in_array($member_state_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'member_state_filter', must be one of '%s'",
                    $member_state_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['member_state_filter'] = $member_state_filter;

        return $this;
    }

    /**
     * Gets muted_member_filter
     *
     * @return string|null
     */
    public function getMutedMemberFilter()
    {
        return $this->container['muted_member_filter'];
    }

    /**
     * Sets muted_member_filter
     *
     * @param string|null $muted_member_filter muted_member_filter
     *
     * @return self
     */
    public function setMutedMemberFilter($muted_member_filter)
    {
        $allowedValues = $this->getMutedMemberFilterAllowableValues();
        if (!is_null($muted_member_filter) && !in_array($muted_member_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'muted_member_filter', must be one of '%s'",
                    $muted_member_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['muted_member_filter'] = $muted_member_filter;

        return $this;
    }

    /**
     * Gets nickname_starts_with_filter
     *
     * @return string|null
     */
    public function getNicknameStartsWithFilter()
    {
        return $this->container['nickname_starts_with_filter'];
    }

    /**
     * Sets nickname_starts_with_filter
     *
     * @param string|null $nickname_starts_with_filter nickname_starts_with_filter
     *
     * @return self
     */
    public function setNicknameStartsWithFilter($nickname_starts_with_filter)
    {
        $this->container['nickname_starts_with_filter'] = $nickname_starts_with_filter;

        return $this;
    }

    /**
     * Gets operator_filter
     *
     * @return string|null
     */
    public function getOperatorFilter()
    {
        return $this->container['operator_filter'];
    }

    /**
     * Sets operator_filter
     *
     * @param string|null $operator_filter operator_filter
     *
     * @return self
     */
    public function setOperatorFilter($operator_filter)
    {
        $allowedValues = $this->getOperatorFilterAllowableValues();
        if (!is_null($operator_filter) && !in_array($operator_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'operator_filter', must be one of '%s'",
                    $operator_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator_filter'] = $operator_filter;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($order) && !in_array($order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order', must be one of '%s'",
                    $order,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


