<?php
/**
 * SendBirdGroupChannelFilter
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdGroupChannelFilter Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdGroupChannelFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.GroupChannelFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_name_contains_filter' => 'string',
        'channel_urls_filter' => 'string[]',
        'custom_type_starts_with_filter' => 'string',
        'custom_types_filter' => 'string[]',
        'hidden_channel_filter' => 'string',
        'include_empty' => 'bool',
        'include_frozen' => 'bool',
        'include_meta_data' => 'bool',
        'member_state_filter' => 'string',
        'nickname_contains_filter' => 'string',
        'public_channel_filter' => 'string',
        'search_filter' => '\OpenAPI\Client\Model\SendBirdGroupChannelFilterSearchFilter',
        'super_channel_filter' => 'string',
        'unread_channel_filter' => 'string',
        'user_ids_filter' => '\OpenAPI\Client\Model\SendBirdGroupChannelFilterUserIdsFilter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_name_contains_filter' => null,
        'channel_urls_filter' => null,
        'custom_type_starts_with_filter' => null,
        'custom_types_filter' => null,
        'hidden_channel_filter' => null,
        'include_empty' => null,
        'include_frozen' => null,
        'include_meta_data' => null,
        'member_state_filter' => null,
        'nickname_contains_filter' => null,
        'public_channel_filter' => null,
        'search_filter' => null,
        'super_channel_filter' => null,
        'unread_channel_filter' => null,
        'user_ids_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_name_contains_filter' => 'channelNameContainsFilter',
        'channel_urls_filter' => 'channelUrlsFilter',
        'custom_type_starts_with_filter' => 'customTypeStartsWithFilter',
        'custom_types_filter' => 'customTypesFilter',
        'hidden_channel_filter' => 'hiddenChannelFilter',
        'include_empty' => 'includeEmpty',
        'include_frozen' => 'includeFrozen',
        'include_meta_data' => 'includeMetaData',
        'member_state_filter' => 'memberStateFilter',
        'nickname_contains_filter' => 'nicknameContainsFilter',
        'public_channel_filter' => 'publicChannelFilter',
        'search_filter' => 'searchFilter',
        'super_channel_filter' => 'superChannelFilter',
        'unread_channel_filter' => 'unreadChannelFilter',
        'user_ids_filter' => 'userIdsFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_name_contains_filter' => 'setChannelNameContainsFilter',
        'channel_urls_filter' => 'setChannelUrlsFilter',
        'custom_type_starts_with_filter' => 'setCustomTypeStartsWithFilter',
        'custom_types_filter' => 'setCustomTypesFilter',
        'hidden_channel_filter' => 'setHiddenChannelFilter',
        'include_empty' => 'setIncludeEmpty',
        'include_frozen' => 'setIncludeFrozen',
        'include_meta_data' => 'setIncludeMetaData',
        'member_state_filter' => 'setMemberStateFilter',
        'nickname_contains_filter' => 'setNicknameContainsFilter',
        'public_channel_filter' => 'setPublicChannelFilter',
        'search_filter' => 'setSearchFilter',
        'super_channel_filter' => 'setSuperChannelFilter',
        'unread_channel_filter' => 'setUnreadChannelFilter',
        'user_ids_filter' => 'setUserIdsFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_name_contains_filter' => 'getChannelNameContainsFilter',
        'channel_urls_filter' => 'getChannelUrlsFilter',
        'custom_type_starts_with_filter' => 'getCustomTypeStartsWithFilter',
        'custom_types_filter' => 'getCustomTypesFilter',
        'hidden_channel_filter' => 'getHiddenChannelFilter',
        'include_empty' => 'getIncludeEmpty',
        'include_frozen' => 'getIncludeFrozen',
        'include_meta_data' => 'getIncludeMetaData',
        'member_state_filter' => 'getMemberStateFilter',
        'nickname_contains_filter' => 'getNicknameContainsFilter',
        'public_channel_filter' => 'getPublicChannelFilter',
        'search_filter' => 'getSearchFilter',
        'super_channel_filter' => 'getSuperChannelFilter',
        'unread_channel_filter' => 'getUnreadChannelFilter',
        'user_ids_filter' => 'getUserIdsFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HIDDEN_CHANNEL_FILTER_HIDDEN_ALLOW_AUTO_UNHIDE = 'hidden_allow_auto_unhide';
    const HIDDEN_CHANNEL_FILTER_HIDDEN_ONLY = 'hidden_only';
    const HIDDEN_CHANNEL_FILTER_HIDDEN_PREVENT_AUTO_UNHIDE = 'hidden_prevent_auto_unhide';
    const HIDDEN_CHANNEL_FILTER_UNHIDDEN_ONLY = 'unhidden_only';
    const MEMBER_STATE_FILTER_ALL = 'all';
    const MEMBER_STATE_FILTER_INVITED_BY_FRIEND = 'invited_by_friend';
    const MEMBER_STATE_FILTER_INVITED_BY_NON_FRIEND = 'invited_by_non_friend';
    const MEMBER_STATE_FILTER_INVITED_ONLY = 'invited_only';
    const MEMBER_STATE_FILTER_JOINED_ONLY = 'joined_only';
    const PUBLIC_CHANNEL_FILTER_ALL = 'all';
    const PUBLIC_CHANNEL_FILTER__PRIVATE = 'private';
    const PUBLIC_CHANNEL_FILTER__PUBLIC = 'public';
    const SUPER_CHANNEL_FILTER_ALL = 'all';
    const SUPER_CHANNEL_FILTER_NONSUPER = 'nonsuper';
    const SUPER_CHANNEL_FILTER_SUPER = 'super';
    const UNREAD_CHANNEL_FILTER_ALL = 'all';
    const UNREAD_CHANNEL_FILTER_UNREAD_MESSAGE = 'unread_message';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHiddenChannelFilterAllowableValues()
    {
        return [
            self::HIDDEN_CHANNEL_FILTER_HIDDEN_ALLOW_AUTO_UNHIDE,
            self::HIDDEN_CHANNEL_FILTER_HIDDEN_ONLY,
            self::HIDDEN_CHANNEL_FILTER_HIDDEN_PREVENT_AUTO_UNHIDE,
            self::HIDDEN_CHANNEL_FILTER_UNHIDDEN_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMemberStateFilterAllowableValues()
    {
        return [
            self::MEMBER_STATE_FILTER_ALL,
            self::MEMBER_STATE_FILTER_INVITED_BY_FRIEND,
            self::MEMBER_STATE_FILTER_INVITED_BY_NON_FRIEND,
            self::MEMBER_STATE_FILTER_INVITED_ONLY,
            self::MEMBER_STATE_FILTER_JOINED_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublicChannelFilterAllowableValues()
    {
        return [
            self::PUBLIC_CHANNEL_FILTER_ALL,
            self::PUBLIC_CHANNEL_FILTER__PRIVATE,
            self::PUBLIC_CHANNEL_FILTER__PUBLIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuperChannelFilterAllowableValues()
    {
        return [
            self::SUPER_CHANNEL_FILTER_ALL,
            self::SUPER_CHANNEL_FILTER_NONSUPER,
            self::SUPER_CHANNEL_FILTER_SUPER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnreadChannelFilterAllowableValues()
    {
        return [
            self::UNREAD_CHANNEL_FILTER_ALL,
            self::UNREAD_CHANNEL_FILTER_UNREAD_MESSAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_name_contains_filter'] = $data['channel_name_contains_filter'] ?? null;
        $this->container['channel_urls_filter'] = $data['channel_urls_filter'] ?? null;
        $this->container['custom_type_starts_with_filter'] = $data['custom_type_starts_with_filter'] ?? null;
        $this->container['custom_types_filter'] = $data['custom_types_filter'] ?? null;
        $this->container['hidden_channel_filter'] = $data['hidden_channel_filter'] ?? null;
        $this->container['include_empty'] = $data['include_empty'] ?? null;
        $this->container['include_frozen'] = $data['include_frozen'] ?? null;
        $this->container['include_meta_data'] = $data['include_meta_data'] ?? null;
        $this->container['member_state_filter'] = $data['member_state_filter'] ?? null;
        $this->container['nickname_contains_filter'] = $data['nickname_contains_filter'] ?? null;
        $this->container['public_channel_filter'] = $data['public_channel_filter'] ?? null;
        $this->container['search_filter'] = $data['search_filter'] ?? null;
        $this->container['super_channel_filter'] = $data['super_channel_filter'] ?? null;
        $this->container['unread_channel_filter'] = $data['unread_channel_filter'] ?? null;
        $this->container['user_ids_filter'] = $data['user_ids_filter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHiddenChannelFilterAllowableValues();
        if (!is_null($this->container['hidden_channel_filter']) && !in_array($this->container['hidden_channel_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hidden_channel_filter', must be one of '%s'",
                $this->container['hidden_channel_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMemberStateFilterAllowableValues();
        if (!is_null($this->container['member_state_filter']) && !in_array($this->container['member_state_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'member_state_filter', must be one of '%s'",
                $this->container['member_state_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublicChannelFilterAllowableValues();
        if (!is_null($this->container['public_channel_filter']) && !in_array($this->container['public_channel_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'public_channel_filter', must be one of '%s'",
                $this->container['public_channel_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSuperChannelFilterAllowableValues();
        if (!is_null($this->container['super_channel_filter']) && !in_array($this->container['super_channel_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'super_channel_filter', must be one of '%s'",
                $this->container['super_channel_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnreadChannelFilterAllowableValues();
        if (!is_null($this->container['unread_channel_filter']) && !in_array($this->container['unread_channel_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unread_channel_filter', must be one of '%s'",
                $this->container['unread_channel_filter'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_name_contains_filter
     *
     * @return string|null
     */
    public function getChannelNameContainsFilter()
    {
        return $this->container['channel_name_contains_filter'];
    }

    /**
     * Sets channel_name_contains_filter
     *
     * @param string|null $channel_name_contains_filter channel_name_contains_filter
     *
     * @return self
     */
    public function setChannelNameContainsFilter($channel_name_contains_filter)
    {
        $this->container['channel_name_contains_filter'] = $channel_name_contains_filter;

        return $this;
    }

    /**
     * Gets channel_urls_filter
     *
     * @return string[]|null
     */
    public function getChannelUrlsFilter()
    {
        return $this->container['channel_urls_filter'];
    }

    /**
     * Sets channel_urls_filter
     *
     * @param string[]|null $channel_urls_filter channel_urls_filter
     *
     * @return self
     */
    public function setChannelUrlsFilter($channel_urls_filter)
    {
        $this->container['channel_urls_filter'] = $channel_urls_filter;

        return $this;
    }

    /**
     * Gets custom_type_starts_with_filter
     *
     * @return string|null
     */
    public function getCustomTypeStartsWithFilter()
    {
        return $this->container['custom_type_starts_with_filter'];
    }

    /**
     * Sets custom_type_starts_with_filter
     *
     * @param string|null $custom_type_starts_with_filter custom_type_starts_with_filter
     *
     * @return self
     */
    public function setCustomTypeStartsWithFilter($custom_type_starts_with_filter)
    {
        $this->container['custom_type_starts_with_filter'] = $custom_type_starts_with_filter;

        return $this;
    }

    /**
     * Gets custom_types_filter
     *
     * @return string[]|null
     */
    public function getCustomTypesFilter()
    {
        return $this->container['custom_types_filter'];
    }

    /**
     * Sets custom_types_filter
     *
     * @param string[]|null $custom_types_filter custom_types_filter
     *
     * @return self
     */
    public function setCustomTypesFilter($custom_types_filter)
    {
        $this->container['custom_types_filter'] = $custom_types_filter;

        return $this;
    }

    /**
     * Gets hidden_channel_filter
     *
     * @return string|null
     */
    public function getHiddenChannelFilter()
    {
        return $this->container['hidden_channel_filter'];
    }

    /**
     * Sets hidden_channel_filter
     *
     * @param string|null $hidden_channel_filter hidden_channel_filter
     *
     * @return self
     */
    public function setHiddenChannelFilter($hidden_channel_filter)
    {
        $allowedValues = $this->getHiddenChannelFilterAllowableValues();
        if (!is_null($hidden_channel_filter) && !in_array($hidden_channel_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hidden_channel_filter', must be one of '%s'",
                    $hidden_channel_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hidden_channel_filter'] = $hidden_channel_filter;

        return $this;
    }

    /**
     * Gets include_empty
     *
     * @return bool|null
     */
    public function getIncludeEmpty()
    {
        return $this->container['include_empty'];
    }

    /**
     * Sets include_empty
     *
     * @param bool|null $include_empty include_empty
     *
     * @return self
     */
    public function setIncludeEmpty($include_empty)
    {
        $this->container['include_empty'] = $include_empty;

        return $this;
    }

    /**
     * Gets include_frozen
     *
     * @return bool|null
     */
    public function getIncludeFrozen()
    {
        return $this->container['include_frozen'];
    }

    /**
     * Sets include_frozen
     *
     * @param bool|null $include_frozen include_frozen
     *
     * @return self
     */
    public function setIncludeFrozen($include_frozen)
    {
        $this->container['include_frozen'] = $include_frozen;

        return $this;
    }

    /**
     * Gets include_meta_data
     *
     * @return bool|null
     */
    public function getIncludeMetaData()
    {
        return $this->container['include_meta_data'];
    }

    /**
     * Sets include_meta_data
     *
     * @param bool|null $include_meta_data include_meta_data
     *
     * @return self
     */
    public function setIncludeMetaData($include_meta_data)
    {
        $this->container['include_meta_data'] = $include_meta_data;

        return $this;
    }

    /**
     * Gets member_state_filter
     *
     * @return string|null
     */
    public function getMemberStateFilter()
    {
        return $this->container['member_state_filter'];
    }

    /**
     * Sets member_state_filter
     *
     * @param string|null $member_state_filter member_state_filter
     *
     * @return self
     */
    public function setMemberStateFilter($member_state_filter)
    {
        $allowedValues = $this->getMemberStateFilterAllowableValues();
        if (!is_null($member_state_filter) && !in_array($member_state_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'member_state_filter', must be one of '%s'",
                    $member_state_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['member_state_filter'] = $member_state_filter;

        return $this;
    }

    /**
     * Gets nickname_contains_filter
     *
     * @return string|null
     */
    public function getNicknameContainsFilter()
    {
        return $this->container['nickname_contains_filter'];
    }

    /**
     * Sets nickname_contains_filter
     *
     * @param string|null $nickname_contains_filter nickname_contains_filter
     *
     * @return self
     */
    public function setNicknameContainsFilter($nickname_contains_filter)
    {
        $this->container['nickname_contains_filter'] = $nickname_contains_filter;

        return $this;
    }

    /**
     * Gets public_channel_filter
     *
     * @return string|null
     */
    public function getPublicChannelFilter()
    {
        return $this->container['public_channel_filter'];
    }

    /**
     * Sets public_channel_filter
     *
     * @param string|null $public_channel_filter public_channel_filter
     *
     * @return self
     */
    public function setPublicChannelFilter($public_channel_filter)
    {
        $allowedValues = $this->getPublicChannelFilterAllowableValues();
        if (!is_null($public_channel_filter) && !in_array($public_channel_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'public_channel_filter', must be one of '%s'",
                    $public_channel_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['public_channel_filter'] = $public_channel_filter;

        return $this;
    }

    /**
     * Gets search_filter
     *
     * @return \OpenAPI\Client\Model\SendBirdGroupChannelFilterSearchFilter|null
     */
    public function getSearchFilter()
    {
        return $this->container['search_filter'];
    }

    /**
     * Sets search_filter
     *
     * @param \OpenAPI\Client\Model\SendBirdGroupChannelFilterSearchFilter|null $search_filter search_filter
     *
     * @return self
     */
    public function setSearchFilter($search_filter)
    {
        $this->container['search_filter'] = $search_filter;

        return $this;
    }

    /**
     * Gets super_channel_filter
     *
     * @return string|null
     */
    public function getSuperChannelFilter()
    {
        return $this->container['super_channel_filter'];
    }

    /**
     * Sets super_channel_filter
     *
     * @param string|null $super_channel_filter super_channel_filter
     *
     * @return self
     */
    public function setSuperChannelFilter($super_channel_filter)
    {
        $allowedValues = $this->getSuperChannelFilterAllowableValues();
        if (!is_null($super_channel_filter) && !in_array($super_channel_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'super_channel_filter', must be one of '%s'",
                    $super_channel_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['super_channel_filter'] = $super_channel_filter;

        return $this;
    }

    /**
     * Gets unread_channel_filter
     *
     * @return string|null
     */
    public function getUnreadChannelFilter()
    {
        return $this->container['unread_channel_filter'];
    }

    /**
     * Sets unread_channel_filter
     *
     * @param string|null $unread_channel_filter unread_channel_filter
     *
     * @return self
     */
    public function setUnreadChannelFilter($unread_channel_filter)
    {
        $allowedValues = $this->getUnreadChannelFilterAllowableValues();
        if (!is_null($unread_channel_filter) && !in_array($unread_channel_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unread_channel_filter', must be one of '%s'",
                    $unread_channel_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unread_channel_filter'] = $unread_channel_filter;

        return $this;
    }

    /**
     * Gets user_ids_filter
     *
     * @return \OpenAPI\Client\Model\SendBirdGroupChannelFilterUserIdsFilter|null
     */
    public function getUserIdsFilter()
    {
        return $this->container['user_ids_filter'];
    }

    /**
     * Sets user_ids_filter
     *
     * @param \OpenAPI\Client\Model\SendBirdGroupChannelFilterUserIdsFilter|null $user_ids_filter user_ids_filter
     *
     * @return self
     */
    public function setUserIdsFilter($user_ids_filter)
    {
        $this->container['user_ids_filter'] = $user_ids_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


