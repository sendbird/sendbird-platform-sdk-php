<?php
/**
 * SendBirdAppInfo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdAppInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdAppInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.AppInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_attributes' => 'string[]',
        'emoji_hash' => 'string',
        'is_using_reaction' => 'bool',
        'premium_feature_list' => 'string[]',
        'upload_size_limit' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_attributes' => null,
        'emoji_hash' => null,
        'is_using_reaction' => null,
        'premium_feature_list' => null,
        'upload_size_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_attributes' => 'applicationAttributes',
        'emoji_hash' => 'emojiHash',
        'is_using_reaction' => 'isUsingReaction',
        'premium_feature_list' => 'premiumFeatureList',
        'upload_size_limit' => 'uploadSizeLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_attributes' => 'setApplicationAttributes',
        'emoji_hash' => 'setEmojiHash',
        'is_using_reaction' => 'setIsUsingReaction',
        'premium_feature_list' => 'setPremiumFeatureList',
        'upload_size_limit' => 'setUploadSizeLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_attributes' => 'getApplicationAttributes',
        'emoji_hash' => 'getEmojiHash',
        'is_using_reaction' => 'getIsUsingReaction',
        'premium_feature_list' => 'getPremiumFeatureList',
        'upload_size_limit' => 'getUploadSizeLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_attributes'] = $data['application_attributes'] ?? null;
        $this->container['emoji_hash'] = $data['emoji_hash'] ?? null;
        $this->container['is_using_reaction'] = $data['is_using_reaction'] ?? null;
        $this->container['premium_feature_list'] = $data['premium_feature_list'] ?? null;
        $this->container['upload_size_limit'] = $data['upload_size_limit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_attributes
     *
     * @return string[]|null
     */
    public function getApplicationAttributes()
    {
        return $this->container['application_attributes'];
    }

    /**
     * Sets application_attributes
     *
     * @param string[]|null $application_attributes application_attributes
     *
     * @return self
     */
    public function setApplicationAttributes($application_attributes)
    {
        $this->container['application_attributes'] = $application_attributes;

        return $this;
    }

    /**
     * Gets emoji_hash
     *
     * @return string|null
     */
    public function getEmojiHash()
    {
        return $this->container['emoji_hash'];
    }

    /**
     * Sets emoji_hash
     *
     * @param string|null $emoji_hash emoji_hash
     *
     * @return self
     */
    public function setEmojiHash($emoji_hash)
    {
        $this->container['emoji_hash'] = $emoji_hash;

        return $this;
    }

    /**
     * Gets is_using_reaction
     *
     * @return bool|null
     */
    public function getIsUsingReaction()
    {
        return $this->container['is_using_reaction'];
    }

    /**
     * Sets is_using_reaction
     *
     * @param bool|null $is_using_reaction is_using_reaction
     *
     * @return self
     */
    public function setIsUsingReaction($is_using_reaction)
    {
        $this->container['is_using_reaction'] = $is_using_reaction;

        return $this;
    }

    /**
     * Gets premium_feature_list
     *
     * @return string[]|null
     */
    public function getPremiumFeatureList()
    {
        return $this->container['premium_feature_list'];
    }

    /**
     * Sets premium_feature_list
     *
     * @param string[]|null $premium_feature_list premium_feature_list
     *
     * @return self
     */
    public function setPremiumFeatureList($premium_feature_list)
    {
        $this->container['premium_feature_list'] = $premium_feature_list;

        return $this;
    }

    /**
     * Gets upload_size_limit
     *
     * @return float|null
     */
    public function getUploadSizeLimit()
    {
        return $this->container['upload_size_limit'];
    }

    /**
     * Sets upload_size_limit
     *
     * @param float|null $upload_size_limit upload_size_limit
     *
     * @return self
     */
    public function setUploadSizeLimit($upload_size_limit)
    {
        $this->container['upload_size_limit'] = $upload_size_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


