<?php
/**
 * SendBirdBaseMessageInstance
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdBaseMessageInstance Class Doc Comment
 *
 * @category Class
 * @description Message
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdBaseMessageInstance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.BaseMessageInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apple_critical_alert_options' => '\OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions',
        'channel_type' => 'string',
        'channel_url' => 'string',
        'created_at' => 'float',
        'custom_type' => 'string',
        'data' => 'string',
        'is_reply_to_channel' => 'bool',
        'mention_type' => 'string',
        'mentioned_users' => '\OpenAPI\Client\Model\SendBirdUser[]',
        'message_id' => 'float',
        'message_type' => 'string',
        'meta_array' => '\OpenAPI\Client\Model\Object',
        'meta_arrays' => '\OpenAPI\Client\Model\SendBirdMessageMetaArray[]',
        'og_meta_data' => '\OpenAPI\Client\Model\SendBirdOGMetaData',
        'parent_message' => 'AnyOfSendBirdAdminMessageSendBirdUserMessageSendBirdFileMessage',
        'parent_message_id' => 'float',
        'parent_message_text' => 'string',
        'reactions' => '\OpenAPI\Client\Model\SendBirdReaction[]',
        'sending_status' => 'string',
        'silent' => 'bool',
        'thread_info' => '\OpenAPI\Client\Model\SendBirdThreadInfo',
        'updated_at' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apple_critical_alert_options' => null,
        'channel_type' => null,
        'channel_url' => null,
        'created_at' => null,
        'custom_type' => null,
        'data' => null,
        'is_reply_to_channel' => null,
        'mention_type' => null,
        'mentioned_users' => null,
        'message_id' => null,
        'message_type' => null,
        'meta_array' => null,
        'meta_arrays' => null,
        'og_meta_data' => null,
        'parent_message' => null,
        'parent_message_id' => null,
        'parent_message_text' => null,
        'reactions' => null,
        'sending_status' => null,
        'silent' => null,
        'thread_info' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apple_critical_alert_options' => 'appleCriticalAlertOptions',
        'channel_type' => 'channelType',
        'channel_url' => 'channelUrl',
        'created_at' => 'createdAt',
        'custom_type' => 'customType',
        'data' => 'data',
        'is_reply_to_channel' => 'isReplyToChannel',
        'mention_type' => 'mentionType',
        'mentioned_users' => 'mentionedUsers',
        'message_id' => 'messageId',
        'message_type' => 'messageType',
        'meta_array' => 'metaArray',
        'meta_arrays' => 'metaArrays',
        'og_meta_data' => 'ogMetaData',
        'parent_message' => 'parentMessage',
        'parent_message_id' => 'parentMessageId',
        'parent_message_text' => 'parentMessageText',
        'reactions' => 'reactions',
        'sending_status' => 'sendingStatus',
        'silent' => 'silent',
        'thread_info' => 'threadInfo',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apple_critical_alert_options' => 'setAppleCriticalAlertOptions',
        'channel_type' => 'setChannelType',
        'channel_url' => 'setChannelUrl',
        'created_at' => 'setCreatedAt',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'is_reply_to_channel' => 'setIsReplyToChannel',
        'mention_type' => 'setMentionType',
        'mentioned_users' => 'setMentionedUsers',
        'message_id' => 'setMessageId',
        'message_type' => 'setMessageType',
        'meta_array' => 'setMetaArray',
        'meta_arrays' => 'setMetaArrays',
        'og_meta_data' => 'setOgMetaData',
        'parent_message' => 'setParentMessage',
        'parent_message_id' => 'setParentMessageId',
        'parent_message_text' => 'setParentMessageText',
        'reactions' => 'setReactions',
        'sending_status' => 'setSendingStatus',
        'silent' => 'setSilent',
        'thread_info' => 'setThreadInfo',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apple_critical_alert_options' => 'getAppleCriticalAlertOptions',
        'channel_type' => 'getChannelType',
        'channel_url' => 'getChannelUrl',
        'created_at' => 'getCreatedAt',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'is_reply_to_channel' => 'getIsReplyToChannel',
        'mention_type' => 'getMentionType',
        'mentioned_users' => 'getMentionedUsers',
        'message_id' => 'getMessageId',
        'message_type' => 'getMessageType',
        'meta_array' => 'getMetaArray',
        'meta_arrays' => 'getMetaArrays',
        'og_meta_data' => 'getOgMetaData',
        'parent_message' => 'getParentMessage',
        'parent_message_id' => 'getParentMessageId',
        'parent_message_text' => 'getParentMessageText',
        'reactions' => 'getReactions',
        'sending_status' => 'getSendingStatus',
        'silent' => 'getSilent',
        'thread_info' => 'getThreadInfo',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MESSAGE_TYPE_ADMIN = 'admin';
    const MESSAGE_TYPE_BASE = 'base';
    const MESSAGE_TYPE_FILE = 'file';
    const MESSAGE_TYPE_USER = 'user';
    const SENDING_STATUS_CANCELED = 'canceled';
    const SENDING_STATUS_FAILED = 'failed';
    const SENDING_STATUS_NONE = 'none';
    const SENDING_STATUS_PENDING = 'pending';
    const SENDING_STATUS_SUCCEEDED = 'succeeded';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_ADMIN,
            self::MESSAGE_TYPE_BASE,
            self::MESSAGE_TYPE_FILE,
            self::MESSAGE_TYPE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendingStatusAllowableValues()
    {
        return [
            self::SENDING_STATUS_CANCELED,
            self::SENDING_STATUS_FAILED,
            self::SENDING_STATUS_NONE,
            self::SENDING_STATUS_PENDING,
            self::SENDING_STATUS_SUCCEEDED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apple_critical_alert_options'] = $data['apple_critical_alert_options'] ?? null;
        $this->container['channel_type'] = $data['channel_type'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['is_reply_to_channel'] = $data['is_reply_to_channel'] ?? null;
        $this->container['mention_type'] = $data['mention_type'] ?? null;
        $this->container['mentioned_users'] = $data['mentioned_users'] ?? null;
        $this->container['message_id'] = $data['message_id'] ?? null;
        $this->container['message_type'] = $data['message_type'] ?? null;
        $this->container['meta_array'] = $data['meta_array'] ?? null;
        $this->container['meta_arrays'] = $data['meta_arrays'] ?? null;
        $this->container['og_meta_data'] = $data['og_meta_data'] ?? null;
        $this->container['parent_message'] = $data['parent_message'] ?? null;
        $this->container['parent_message_id'] = $data['parent_message_id'] ?? null;
        $this->container['parent_message_text'] = $data['parent_message_text'] ?? null;
        $this->container['reactions'] = $data['reactions'] ?? null;
        $this->container['sending_status'] = $data['sending_status'] ?? null;
        $this->container['silent'] = $data['silent'] ?? null;
        $this->container['thread_info'] = $data['thread_info'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_type', must be one of '%s'",
                $this->container['message_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!is_null($this->container['sending_status']) && !in_array($this->container['sending_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sending_status', must be one of '%s'",
                $this->container['sending_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apple_critical_alert_options
     *
     * @return \OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions|null
     */
    public function getAppleCriticalAlertOptions()
    {
        return $this->container['apple_critical_alert_options'];
    }

    /**
     * Sets apple_critical_alert_options
     *
     * @param \OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions|null $apple_critical_alert_options apple_critical_alert_options
     *
     * @return self
     */
    public function setAppleCriticalAlertOptions($apple_critical_alert_options)
    {
        $this->container['apple_critical_alert_options'] = $apple_critical_alert_options;

        return $this;
    }

    /**
     * Gets channel_type
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param string|null $channel_type channel_type
     *
     * @return self
     */
    public function setChannelType($channel_type)
    {
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets is_reply_to_channel
     *
     * @return bool|null
     */
    public function getIsReplyToChannel()
    {
        return $this->container['is_reply_to_channel'];
    }

    /**
     * Sets is_reply_to_channel
     *
     * @param bool|null $is_reply_to_channel is_reply_to_channel
     *
     * @return self
     */
    public function setIsReplyToChannel($is_reply_to_channel)
    {
        $this->container['is_reply_to_channel'] = $is_reply_to_channel;

        return $this;
    }

    /**
     * Gets mention_type
     *
     * @return string|null
     */
    public function getMentionType()
    {
        return $this->container['mention_type'];
    }

    /**
     * Sets mention_type
     *
     * @param string|null $mention_type mention_type
     *
     * @return self
     */
    public function setMentionType($mention_type)
    {
        $this->container['mention_type'] = $mention_type;

        return $this;
    }

    /**
     * Gets mentioned_users
     *
     * @return \OpenAPI\Client\Model\SendBirdUser[]|null
     */
    public function getMentionedUsers()
    {
        return $this->container['mentioned_users'];
    }

    /**
     * Sets mentioned_users
     *
     * @param \OpenAPI\Client\Model\SendBirdUser[]|null $mentioned_users mentioned_users
     *
     * @return self
     */
    public function setMentionedUsers($mentioned_users)
    {
        $this->container['mentioned_users'] = $mentioned_users;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return float|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param float|null $message_id message_id
     *
     * @return self
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string|null
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string|null $message_type message_type
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($message_type) && !in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_type', must be one of '%s'",
                    $message_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets meta_array
     *
     * @return \OpenAPI\Client\Model\Object|null
     */
    public function getMetaArray()
    {
        return $this->container['meta_array'];
    }

    /**
     * Sets meta_array
     *
     * @param \OpenAPI\Client\Model\Object|null $meta_array meta_array
     *
     * @return self
     */
    public function setMetaArray($meta_array)
    {
        $this->container['meta_array'] = $meta_array;

        return $this;
    }

    /**
     * Gets meta_arrays
     *
     * @return \OpenAPI\Client\Model\SendBirdMessageMetaArray[]|null
     */
    public function getMetaArrays()
    {
        return $this->container['meta_arrays'];
    }

    /**
     * Sets meta_arrays
     *
     * @param \OpenAPI\Client\Model\SendBirdMessageMetaArray[]|null $meta_arrays meta_arrays
     *
     * @return self
     */
    public function setMetaArrays($meta_arrays)
    {
        $this->container['meta_arrays'] = $meta_arrays;

        return $this;
    }

    /**
     * Gets og_meta_data
     *
     * @return \OpenAPI\Client\Model\SendBirdOGMetaData|null
     */
    public function getOgMetaData()
    {
        return $this->container['og_meta_data'];
    }

    /**
     * Sets og_meta_data
     *
     * @param \OpenAPI\Client\Model\SendBirdOGMetaData|null $og_meta_data og_meta_data
     *
     * @return self
     */
    public function setOgMetaData($og_meta_data)
    {
        $this->container['og_meta_data'] = $og_meta_data;

        return $this;
    }

    /**
     * Gets parent_message
     *
     * @return AnyOfSendBirdAdminMessageSendBirdUserMessageSendBirdFileMessage|null
     */
    public function getParentMessage()
    {
        return $this->container['parent_message'];
    }

    /**
     * Sets parent_message
     *
     * @param AnyOfSendBirdAdminMessageSendBirdUserMessageSendBirdFileMessage|null $parent_message parent_message
     *
     * @return self
     */
    public function setParentMessage($parent_message)
    {
        $this->container['parent_message'] = $parent_message;

        return $this;
    }

    /**
     * Gets parent_message_id
     *
     * @return float|null
     */
    public function getParentMessageId()
    {
        return $this->container['parent_message_id'];
    }

    /**
     * Sets parent_message_id
     *
     * @param float|null $parent_message_id parent_message_id
     *
     * @return self
     */
    public function setParentMessageId($parent_message_id)
    {
        $this->container['parent_message_id'] = $parent_message_id;

        return $this;
    }

    /**
     * Gets parent_message_text
     *
     * @return string|null
     */
    public function getParentMessageText()
    {
        return $this->container['parent_message_text'];
    }

    /**
     * Sets parent_message_text
     *
     * @param string|null $parent_message_text parent_message_text
     *
     * @return self
     */
    public function setParentMessageText($parent_message_text)
    {
        $this->container['parent_message_text'] = $parent_message_text;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \OpenAPI\Client\Model\SendBirdReaction[]|null
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \OpenAPI\Client\Model\SendBirdReaction[]|null $reactions reactions
     *
     * @return self
     */
    public function setReactions($reactions)
    {
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets sending_status
     *
     * @return string|null
     */
    public function getSendingStatus()
    {
        return $this->container['sending_status'];
    }

    /**
     * Sets sending_status
     *
     * @param string|null $sending_status sending_status
     *
     * @return self
     */
    public function setSendingStatus($sending_status)
    {
        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!is_null($sending_status) && !in_array($sending_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sending_status', must be one of '%s'",
                    $sending_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sending_status'] = $sending_status;

        return $this;
    }

    /**
     * Gets silent
     *
     * @return bool|null
     */
    public function getSilent()
    {
        return $this->container['silent'];
    }

    /**
     * Sets silent
     *
     * @param bool|null $silent silent
     *
     * @return self
     */
    public function setSilent($silent)
    {
        $this->container['silent'] = $silent;

        return $this;
    }

    /**
     * Gets thread_info
     *
     * @return \OpenAPI\Client\Model\SendBirdThreadInfo|null
     */
    public function getThreadInfo()
    {
        return $this->container['thread_info'];
    }

    /**
     * Sets thread_info
     *
     * @param \OpenAPI\Client\Model\SendBirdThreadInfo|null $thread_info thread_info
     *
     * @return self
     */
    public function setThreadInfo($thread_info)
    {
        $this->container['thread_info'] = $thread_info;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return float|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param float|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


