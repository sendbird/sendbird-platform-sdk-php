<?php
/**
 * ListBotsResponseBotsInnerAi
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * ListBotsResponseBotsInnerAi Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListBotsResponseBotsInnerAi implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'listBotsResponse_bots_inner_ai';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backend' => 'string',
        'feedback' => 'bool',
        'frequency_penalty' => 'int',
        'instruction_mode' => 'mixed',
        'max_tokens' => 'int',
        'model' => 'string',
        'presence_penalty' => 'int',
        'stream' => 'bool',
        'system_message' => 'string',
        'system_message_for_context_prefix' => 'string',
        'temperature' => 'float',
        'top_p' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backend' => null,
        'feedback' => null,
        'frequency_penalty' => null,
        'instruction_mode' => null,
        'max_tokens' => null,
        'model' => null,
        'presence_penalty' => null,
        'stream' => null,
        'system_message' => null,
        'system_message_for_context_prefix' => null,
        'temperature' => null,
        'top_p' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backend' => 'backend',
        'feedback' => 'feedback',
        'frequency_penalty' => 'frequency_penalty',
        'instruction_mode' => 'instruction_mode',
        'max_tokens' => 'max_tokens',
        'model' => 'model',
        'presence_penalty' => 'presence_penalty',
        'stream' => 'stream',
        'system_message' => 'system_message',
        'system_message_for_context_prefix' => 'system_message_for_context_prefix',
        'temperature' => 'temperature',
        'top_p' => 'top_p'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backend' => 'setBackend',
        'feedback' => 'setFeedback',
        'frequency_penalty' => 'setFrequencyPenalty',
        'instruction_mode' => 'setInstructionMode',
        'max_tokens' => 'setMaxTokens',
        'model' => 'setModel',
        'presence_penalty' => 'setPresencePenalty',
        'stream' => 'setStream',
        'system_message' => 'setSystemMessage',
        'system_message_for_context_prefix' => 'setSystemMessageForContextPrefix',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backend' => 'getBackend',
        'feedback' => 'getFeedback',
        'frequency_penalty' => 'getFrequencyPenalty',
        'instruction_mode' => 'getInstructionMode',
        'max_tokens' => 'getMaxTokens',
        'model' => 'getModel',
        'presence_penalty' => 'getPresencePenalty',
        'stream' => 'getStream',
        'system_message' => 'getSystemMessage',
        'system_message_for_context_prefix' => 'getSystemMessageForContextPrefix',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backend'] = $data['backend'] ?? null;
        $this->container['feedback'] = $data['feedback'] ?? null;
        $this->container['frequency_penalty'] = $data['frequency_penalty'] ?? null;
        $this->container['instruction_mode'] = $data['instruction_mode'] ?? null;
        $this->container['max_tokens'] = $data['max_tokens'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['presence_penalty'] = $data['presence_penalty'] ?? null;
        $this->container['stream'] = $data['stream'] ?? null;
        $this->container['system_message'] = $data['system_message'] ?? null;
        $this->container['system_message_for_context_prefix'] = $data['system_message_for_context_prefix'] ?? null;
        $this->container['temperature'] = $data['temperature'] ?? null;
        $this->container['top_p'] = $data['top_p'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backend
     *
     * @return string|null
     */
    public function getBackend()
    {
        return $this->container['backend'];
    }

    /**
     * Sets backend
     *
     * @param string|null $backend backend
     *
     * @return self
     */
    public function setBackend($backend)
    {
        $this->container['backend'] = $backend;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool|null $feedback feedback
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets frequency_penalty
     *
     * @return int|null
     */
    public function getFrequencyPenalty()
    {
        return $this->container['frequency_penalty'];
    }

    /**
     * Sets frequency_penalty
     *
     * @param int|null $frequency_penalty frequency_penalty
     *
     * @return self
     */
    public function setFrequencyPenalty($frequency_penalty)
    {
        $this->container['frequency_penalty'] = $frequency_penalty;

        return $this;
    }

    /**
     * Gets instruction_mode
     *
     * @return mixed|null
     */
    public function getInstructionMode()
    {
        return $this->container['instruction_mode'];
    }

    /**
     * Sets instruction_mode
     *
     * @param mixed|null $instruction_mode instruction_mode
     *
     * @return self
     */
    public function setInstructionMode($instruction_mode)
    {
        $this->container['instruction_mode'] = $instruction_mode;

        return $this;
    }

    /**
     * Gets max_tokens
     *
     * @return int|null
     */
    public function getMaxTokens()
    {
        return $this->container['max_tokens'];
    }

    /**
     * Sets max_tokens
     *
     * @param int|null $max_tokens max_tokens
     *
     * @return self
     */
    public function setMaxTokens($max_tokens)
    {
        $this->container['max_tokens'] = $max_tokens;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets presence_penalty
     *
     * @return int|null
     */
    public function getPresencePenalty()
    {
        return $this->container['presence_penalty'];
    }

    /**
     * Sets presence_penalty
     *
     * @param int|null $presence_penalty presence_penalty
     *
     * @return self
     */
    public function setPresencePenalty($presence_penalty)
    {
        $this->container['presence_penalty'] = $presence_penalty;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return bool|null
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param bool|null $stream stream
     *
     * @return self
     */
    public function setStream($stream)
    {
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets system_message
     *
     * @return string|null
     */
    public function getSystemMessage()
    {
        return $this->container['system_message'];
    }

    /**
     * Sets system_message
     *
     * @param string|null $system_message system_message
     *
     * @return self
     */
    public function setSystemMessage($system_message)
    {
        $this->container['system_message'] = $system_message;

        return $this;
    }

    /**
     * Gets system_message_for_context_prefix
     *
     * @return string|null
     */
    public function getSystemMessageForContextPrefix()
    {
        return $this->container['system_message_for_context_prefix'];
    }

    /**
     * Sets system_message_for_context_prefix
     *
     * @param string|null $system_message_for_context_prefix system_message_for_context_prefix
     *
     * @return self
     */
    public function setSystemMessageForContextPrefix($system_message_for_context_prefix)
    {
        $this->container['system_message_for_context_prefix'] = $system_message_for_context_prefix;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature temperature
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return int|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param int|null $top_p top_p
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        $this->container['top_p'] = $top_p;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


