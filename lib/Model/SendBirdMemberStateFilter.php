<?php
/**
 * SendBirdMemberStateFilter
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdMemberStateFilter Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdMemberStateFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.MemberStateFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'all' => 'string',
        'invited' => 'string',
        'invited_by_friend' => 'string',
        'invited_by_non_friend' => 'string',
        'joined' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'all' => null,
        'invited' => null,
        'invited_by_friend' => null,
        'invited_by_non_friend' => null,
        'joined' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all' => 'ALL',
        'invited' => 'INVITED',
        'invited_by_friend' => 'INVITED_BY_FRIEND',
        'invited_by_non_friend' => 'INVITED_BY_NON_FRIEND',
        'joined' => 'JOINED'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all' => 'setAll',
        'invited' => 'setInvited',
        'invited_by_friend' => 'setInvitedByFriend',
        'invited_by_non_friend' => 'setInvitedByNonFriend',
        'joined' => 'setJoined'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all' => 'getAll',
        'invited' => 'getInvited',
        'invited_by_friend' => 'getInvitedByFriend',
        'invited_by_non_friend' => 'getInvitedByNonFriend',
        'joined' => 'getJoined'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALL_ALL = 'all';
    const INVITED_INVITED_ONLY = 'invited_only';
    const INVITED_BY_FRIEND_INVITED_BY_FRIEND = 'invited_by_friend';
    const INVITED_BY_NON_FRIEND_INVITED_BY_NON_FRIEND = 'invited_by_non_friend';
    const JOINED_JOINED_ONLY = 'joined_only';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllAllowableValues()
    {
        return [
            self::ALL_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvitedAllowableValues()
    {
        return [
            self::INVITED_INVITED_ONLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvitedByFriendAllowableValues()
    {
        return [
            self::INVITED_BY_FRIEND_INVITED_BY_FRIEND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvitedByNonFriendAllowableValues()
    {
        return [
            self::INVITED_BY_NON_FRIEND_INVITED_BY_NON_FRIEND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJoinedAllowableValues()
    {
        return [
            self::JOINED_JOINED_ONLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all'] = $data['all'] ?? null;
        $this->container['invited'] = $data['invited'] ?? null;
        $this->container['invited_by_friend'] = $data['invited_by_friend'] ?? null;
        $this->container['invited_by_non_friend'] = $data['invited_by_non_friend'] ?? null;
        $this->container['joined'] = $data['joined'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAllAllowableValues();
        if (!is_null($this->container['all']) && !in_array($this->container['all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'all', must be one of '%s'",
                $this->container['all'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvitedAllowableValues();
        if (!is_null($this->container['invited']) && !in_array($this->container['invited'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invited', must be one of '%s'",
                $this->container['invited'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvitedByFriendAllowableValues();
        if (!is_null($this->container['invited_by_friend']) && !in_array($this->container['invited_by_friend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invited_by_friend', must be one of '%s'",
                $this->container['invited_by_friend'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvitedByNonFriendAllowableValues();
        if (!is_null($this->container['invited_by_non_friend']) && !in_array($this->container['invited_by_non_friend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invited_by_non_friend', must be one of '%s'",
                $this->container['invited_by_non_friend'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJoinedAllowableValues();
        if (!is_null($this->container['joined']) && !in_array($this->container['joined'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'joined', must be one of '%s'",
                $this->container['joined'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all
     *
     * @return string|null
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     *
     * @param string|null $all all
     *
     * @return self
     */
    public function setAll($all)
    {
        $allowedValues = $this->getAllAllowableValues();
        if (!is_null($all) && !in_array($all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'all', must be one of '%s'",
                    $all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['all'] = $all;

        return $this;
    }

    /**
     * Gets invited
     *
     * @return string|null
     */
    public function getInvited()
    {
        return $this->container['invited'];
    }

    /**
     * Sets invited
     *
     * @param string|null $invited invited
     *
     * @return self
     */
    public function setInvited($invited)
    {
        $allowedValues = $this->getInvitedAllowableValues();
        if (!is_null($invited) && !in_array($invited, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invited', must be one of '%s'",
                    $invited,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invited'] = $invited;

        return $this;
    }

    /**
     * Gets invited_by_friend
     *
     * @return string|null
     */
    public function getInvitedByFriend()
    {
        return $this->container['invited_by_friend'];
    }

    /**
     * Sets invited_by_friend
     *
     * @param string|null $invited_by_friend invited_by_friend
     *
     * @return self
     */
    public function setInvitedByFriend($invited_by_friend)
    {
        $allowedValues = $this->getInvitedByFriendAllowableValues();
        if (!is_null($invited_by_friend) && !in_array($invited_by_friend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invited_by_friend', must be one of '%s'",
                    $invited_by_friend,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invited_by_friend'] = $invited_by_friend;

        return $this;
    }

    /**
     * Gets invited_by_non_friend
     *
     * @return string|null
     */
    public function getInvitedByNonFriend()
    {
        return $this->container['invited_by_non_friend'];
    }

    /**
     * Sets invited_by_non_friend
     *
     * @param string|null $invited_by_non_friend invited_by_non_friend
     *
     * @return self
     */
    public function setInvitedByNonFriend($invited_by_non_friend)
    {
        $allowedValues = $this->getInvitedByNonFriendAllowableValues();
        if (!is_null($invited_by_non_friend) && !in_array($invited_by_non_friend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invited_by_non_friend', must be one of '%s'",
                    $invited_by_non_friend,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invited_by_non_friend'] = $invited_by_non_friend;

        return $this;
    }

    /**
     * Gets joined
     *
     * @return string|null
     */
    public function getJoined()
    {
        return $this->container['joined'];
    }

    /**
     * Sets joined
     *
     * @param string|null $joined joined
     *
     * @return self
     */
    public function setJoined($joined)
    {
        $allowedValues = $this->getJoinedAllowableValues();
        if (!is_null($joined) && !in_array($joined, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'joined', must be one of '%s'",
                    $joined,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['joined'] = $joined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


