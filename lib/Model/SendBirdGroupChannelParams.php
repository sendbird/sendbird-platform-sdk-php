<?php
/**
 * SendBirdGroupChannelParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdGroupChannelParams Class Doc Comment
 *
 * @category Class
 * @description GroupChannel
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdGroupChannelParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.GroupChannelParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_code' => 'string',
        'channel_url' => 'string',
        'cover_image' => '\OpenAPI\Client\Model\File',
        'cover_url' => 'string',
        'custom_type' => 'string',
        'data' => 'string',
        'is_broadcast' => 'bool',
        'is_discoverable' => 'bool',
        'is_distinct' => 'bool',
        'is_ephemeral' => 'bool',
        'is_public' => 'bool',
        'is_strict' => 'bool',
        'is_super' => 'bool',
        'message_survival_seconds' => 'float',
        'name' => 'string',
        'operator_user_ids' => 'string[]',
        'operators' => '\OpenAPI\Client\Model\SendBirdUser[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_code' => null,
        'channel_url' => null,
        'cover_image' => null,
        'cover_url' => null,
        'custom_type' => null,
        'data' => null,
        'is_broadcast' => null,
        'is_discoverable' => null,
        'is_distinct' => null,
        'is_ephemeral' => null,
        'is_public' => null,
        'is_strict' => null,
        'is_super' => null,
        'message_survival_seconds' => null,
        'name' => null,
        'operator_user_ids' => null,
        'operators' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_code' => 'accessCode',
        'channel_url' => 'channelUrl',
        'cover_image' => 'coverImage',
        'cover_url' => 'coverUrl',
        'custom_type' => 'customType',
        'data' => 'data',
        'is_broadcast' => 'isBroadcast',
        'is_discoverable' => 'isDiscoverable',
        'is_distinct' => 'isDistinct',
        'is_ephemeral' => 'isEphemeral',
        'is_public' => 'isPublic',
        'is_strict' => 'isStrict',
        'is_super' => 'isSuper',
        'message_survival_seconds' => 'messageSurvivalSeconds',
        'name' => 'name',
        'operator_user_ids' => 'operatorUserIds',
        'operators' => 'operators'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_code' => 'setAccessCode',
        'channel_url' => 'setChannelUrl',
        'cover_image' => 'setCoverImage',
        'cover_url' => 'setCoverUrl',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'is_broadcast' => 'setIsBroadcast',
        'is_discoverable' => 'setIsDiscoverable',
        'is_distinct' => 'setIsDistinct',
        'is_ephemeral' => 'setIsEphemeral',
        'is_public' => 'setIsPublic',
        'is_strict' => 'setIsStrict',
        'is_super' => 'setIsSuper',
        'message_survival_seconds' => 'setMessageSurvivalSeconds',
        'name' => 'setName',
        'operator_user_ids' => 'setOperatorUserIds',
        'operators' => 'setOperators'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_code' => 'getAccessCode',
        'channel_url' => 'getChannelUrl',
        'cover_image' => 'getCoverImage',
        'cover_url' => 'getCoverUrl',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'is_broadcast' => 'getIsBroadcast',
        'is_discoverable' => 'getIsDiscoverable',
        'is_distinct' => 'getIsDistinct',
        'is_ephemeral' => 'getIsEphemeral',
        'is_public' => 'getIsPublic',
        'is_strict' => 'getIsStrict',
        'is_super' => 'getIsSuper',
        'message_survival_seconds' => 'getMessageSurvivalSeconds',
        'name' => 'getName',
        'operator_user_ids' => 'getOperatorUserIds',
        'operators' => 'getOperators'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_code'] = $data['access_code'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['cover_image'] = $data['cover_image'] ?? null;
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['is_broadcast'] = $data['is_broadcast'] ?? null;
        $this->container['is_discoverable'] = $data['is_discoverable'] ?? null;
        $this->container['is_distinct'] = $data['is_distinct'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['is_strict'] = $data['is_strict'] ?? null;
        $this->container['is_super'] = $data['is_super'] ?? null;
        $this->container['message_survival_seconds'] = $data['message_survival_seconds'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['operator_user_ids'] = $data['operator_user_ids'] ?? null;
        $this->container['operators'] = $data['operators'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_code
     *
     * @return string|null
     */
    public function getAccessCode()
    {
        return $this->container['access_code'];
    }

    /**
     * Sets access_code
     *
     * @param string|null $access_code access_code
     *
     * @return self
     */
    public function setAccessCode($access_code)
    {
        $this->container['access_code'] = $access_code;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string|null
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string|null $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets cover_image
     *
     * @return \OpenAPI\Client\Model\File|null
     */
    public function getCoverImage()
    {
        return $this->container['cover_image'];
    }

    /**
     * Sets cover_image
     *
     * @param \OpenAPI\Client\Model\File|null $cover_image cover_image
     *
     * @return self
     */
    public function setCoverImage($cover_image)
    {
        $this->container['cover_image'] = $cover_image;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets is_broadcast
     *
     * @return bool|null
     */
    public function getIsBroadcast()
    {
        return $this->container['is_broadcast'];
    }

    /**
     * Sets is_broadcast
     *
     * @param bool|null $is_broadcast is_broadcast
     *
     * @return self
     */
    public function setIsBroadcast($is_broadcast)
    {
        $this->container['is_broadcast'] = $is_broadcast;

        return $this;
    }

    /**
     * Gets is_discoverable
     *
     * @return bool|null
     */
    public function getIsDiscoverable()
    {
        return $this->container['is_discoverable'];
    }

    /**
     * Sets is_discoverable
     *
     * @param bool|null $is_discoverable is_discoverable
     *
     * @return self
     */
    public function setIsDiscoverable($is_discoverable)
    {
        $this->container['is_discoverable'] = $is_discoverable;

        return $this;
    }

    /**
     * Gets is_distinct
     *
     * @return bool|null
     */
    public function getIsDistinct()
    {
        return $this->container['is_distinct'];
    }

    /**
     * Sets is_distinct
     *
     * @param bool|null $is_distinct is_distinct
     *
     * @return self
     */
    public function setIsDistinct($is_distinct)
    {
        $this->container['is_distinct'] = $is_distinct;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_strict
     *
     * @return bool|null
     */
    public function getIsStrict()
    {
        return $this->container['is_strict'];
    }

    /**
     * Sets is_strict
     *
     * @param bool|null $is_strict is_strict
     *
     * @return self
     */
    public function setIsStrict($is_strict)
    {
        $this->container['is_strict'] = $is_strict;

        return $this;
    }

    /**
     * Gets is_super
     *
     * @return bool|null
     */
    public function getIsSuper()
    {
        return $this->container['is_super'];
    }

    /**
     * Sets is_super
     *
     * @param bool|null $is_super is_super
     *
     * @return self
     */
    public function setIsSuper($is_super)
    {
        $this->container['is_super'] = $is_super;

        return $this;
    }

    /**
     * Gets message_survival_seconds
     *
     * @return float|null
     */
    public function getMessageSurvivalSeconds()
    {
        return $this->container['message_survival_seconds'];
    }

    /**
     * Sets message_survival_seconds
     *
     * @param float|null $message_survival_seconds message_survival_seconds
     *
     * @return self
     */
    public function setMessageSurvivalSeconds($message_survival_seconds)
    {
        $this->container['message_survival_seconds'] = $message_survival_seconds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operator_user_ids
     *
     * @return string[]|null
     */
    public function getOperatorUserIds()
    {
        return $this->container['operator_user_ids'];
    }

    /**
     * Sets operator_user_ids
     *
     * @param string[]|null $operator_user_ids operator_user_ids
     *
     * @return self
     */
    public function setOperatorUserIds($operator_user_ids)
    {
        $this->container['operator_user_ids'] = $operator_user_ids;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \OpenAPI\Client\Model\SendBirdUser[]|null
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \OpenAPI\Client\Model\SendBirdUser[]|null $operators operators
     *
     * @return self
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


