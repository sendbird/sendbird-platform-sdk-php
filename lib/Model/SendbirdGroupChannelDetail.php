<?php
/**
 * SendbirdGroupChannelDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendbirdGroupChannelDetail Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendbirdGroupChannelDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sendbird.GroupChannelDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => '\Sendbird\Model\SendbirdGroupChannelDetailChannel',
        'channel_url' => 'string',
        'cover_url' => 'string',
        'created_at' => 'int',
        'created_by' => '\Sendbird\Model\SendbirdBasicUserInfo',
        'custom_type' => 'string',
        'data' => 'string',
        'delivery_receipt' => 'array<string,int>',
        'disappearing_message' => '\Sendbird\Model\SendbirdDisappearingMessage',
        'freeze' => 'bool',
        'has_ai_bot' => 'bool',
        'has_bot' => 'bool',
        'id' => 'int',
        'ignore_profanity_filter' => 'bool',
        'is_access_code_required' => 'bool',
        'is_broadcast' => 'bool',
        'is_discoverable' => 'bool',
        'is_distinct' => 'bool',
        'is_ephemeral' => 'bool',
        'is_public' => 'bool',
        'is_super' => 'bool',
        'joined_member_count' => 'int',
        'last_message' => '\Sendbird\Model\SendbirdMessageResponse',
        'max_length_message' => 'int',
        'member_count' => 'int',
        'members' => '\Sendbird\Model\SendbirdMember[]',
        'message_survival_seconds' => 'int',
        'name' => 'string',
        'operators' => '\Sendbird\Model\SendbirdUser[]',
        'read_receipt' => 'array<string,int>',
        'sms_fallback' => '\Sendbird\Model\SendbirdSmsFallback',
        'unread_mention_count' => 'int',
        'unread_message_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'channel_url' => null,
        'cover_url' => null,
        'created_at' => 'int64',
        'created_by' => null,
        'custom_type' => null,
        'data' => null,
        'delivery_receipt' => 'int64',
        'disappearing_message' => null,
        'freeze' => null,
        'has_ai_bot' => null,
        'has_bot' => null,
        'id' => null,
        'ignore_profanity_filter' => null,
        'is_access_code_required' => null,
        'is_broadcast' => null,
        'is_discoverable' => null,
        'is_distinct' => null,
        'is_ephemeral' => null,
        'is_public' => null,
        'is_super' => null,
        'joined_member_count' => null,
        'last_message' => null,
        'max_length_message' => null,
        'member_count' => null,
        'members' => null,
        'message_survival_seconds' => null,
        'name' => null,
        'operators' => null,
        'read_receipt' => 'int64',
        'sms_fallback' => null,
        'unread_mention_count' => null,
        'unread_message_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'channel_url' => 'channel_url',
        'cover_url' => 'cover_url',
        'created_at' => 'created_at',
        'created_by' => 'created_by',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'delivery_receipt' => 'delivery_receipt',
        'disappearing_message' => 'disappearing_message',
        'freeze' => 'freeze',
        'has_ai_bot' => 'has_ai_bot',
        'has_bot' => 'has_bot',
        'id' => 'id',
        'ignore_profanity_filter' => 'ignore_profanity_filter',
        'is_access_code_required' => 'is_access_code_required',
        'is_broadcast' => 'is_broadcast',
        'is_discoverable' => 'is_discoverable',
        'is_distinct' => 'is_distinct',
        'is_ephemeral' => 'is_ephemeral',
        'is_public' => 'is_public',
        'is_super' => 'is_super',
        'joined_member_count' => 'joined_member_count',
        'last_message' => 'last_message',
        'max_length_message' => 'max_length_message',
        'member_count' => 'member_count',
        'members' => 'members',
        'message_survival_seconds' => 'message_survival_seconds',
        'name' => 'name',
        'operators' => 'operators',
        'read_receipt' => 'read_receipt',
        'sms_fallback' => 'sms_fallback',
        'unread_mention_count' => 'unread_mention_count',
        'unread_message_count' => 'unread_message_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'channel_url' => 'setChannelUrl',
        'cover_url' => 'setCoverUrl',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'delivery_receipt' => 'setDeliveryReceipt',
        'disappearing_message' => 'setDisappearingMessage',
        'freeze' => 'setFreeze',
        'has_ai_bot' => 'setHasAiBot',
        'has_bot' => 'setHasBot',
        'id' => 'setId',
        'ignore_profanity_filter' => 'setIgnoreProfanityFilter',
        'is_access_code_required' => 'setIsAccessCodeRequired',
        'is_broadcast' => 'setIsBroadcast',
        'is_discoverable' => 'setIsDiscoverable',
        'is_distinct' => 'setIsDistinct',
        'is_ephemeral' => 'setIsEphemeral',
        'is_public' => 'setIsPublic',
        'is_super' => 'setIsSuper',
        'joined_member_count' => 'setJoinedMemberCount',
        'last_message' => 'setLastMessage',
        'max_length_message' => 'setMaxLengthMessage',
        'member_count' => 'setMemberCount',
        'members' => 'setMembers',
        'message_survival_seconds' => 'setMessageSurvivalSeconds',
        'name' => 'setName',
        'operators' => 'setOperators',
        'read_receipt' => 'setReadReceipt',
        'sms_fallback' => 'setSmsFallback',
        'unread_mention_count' => 'setUnreadMentionCount',
        'unread_message_count' => 'setUnreadMessageCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'channel_url' => 'getChannelUrl',
        'cover_url' => 'getCoverUrl',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'delivery_receipt' => 'getDeliveryReceipt',
        'disappearing_message' => 'getDisappearingMessage',
        'freeze' => 'getFreeze',
        'has_ai_bot' => 'getHasAiBot',
        'has_bot' => 'getHasBot',
        'id' => 'getId',
        'ignore_profanity_filter' => 'getIgnoreProfanityFilter',
        'is_access_code_required' => 'getIsAccessCodeRequired',
        'is_broadcast' => 'getIsBroadcast',
        'is_discoverable' => 'getIsDiscoverable',
        'is_distinct' => 'getIsDistinct',
        'is_ephemeral' => 'getIsEphemeral',
        'is_public' => 'getIsPublic',
        'is_super' => 'getIsSuper',
        'joined_member_count' => 'getJoinedMemberCount',
        'last_message' => 'getLastMessage',
        'max_length_message' => 'getMaxLengthMessage',
        'member_count' => 'getMemberCount',
        'members' => 'getMembers',
        'message_survival_seconds' => 'getMessageSurvivalSeconds',
        'name' => 'getName',
        'operators' => 'getOperators',
        'read_receipt' => 'getReadReceipt',
        'sms_fallback' => 'getSmsFallback',
        'unread_mention_count' => 'getUnreadMentionCount',
        'unread_message_count' => 'getUnreadMessageCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['channel_url'] = $data['channel_url'] ?? null;
        $this->container['cover_url'] = $data['cover_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['delivery_receipt'] = $data['delivery_receipt'] ?? null;
        $this->container['disappearing_message'] = $data['disappearing_message'] ?? null;
        $this->container['freeze'] = $data['freeze'] ?? null;
        $this->container['has_ai_bot'] = $data['has_ai_bot'] ?? null;
        $this->container['has_bot'] = $data['has_bot'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ignore_profanity_filter'] = $data['ignore_profanity_filter'] ?? null;
        $this->container['is_access_code_required'] = $data['is_access_code_required'] ?? null;
        $this->container['is_broadcast'] = $data['is_broadcast'] ?? null;
        $this->container['is_discoverable'] = $data['is_discoverable'] ?? null;
        $this->container['is_distinct'] = $data['is_distinct'] ?? null;
        $this->container['is_ephemeral'] = $data['is_ephemeral'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['is_super'] = $data['is_super'] ?? null;
        $this->container['joined_member_count'] = $data['joined_member_count'] ?? null;
        $this->container['last_message'] = $data['last_message'] ?? null;
        $this->container['max_length_message'] = $data['max_length_message'] ?? null;
        $this->container['member_count'] = $data['member_count'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['message_survival_seconds'] = $data['message_survival_seconds'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['operators'] = $data['operators'] ?? null;
        $this->container['read_receipt'] = $data['read_receipt'] ?? null;
        $this->container['sms_fallback'] = $data['sms_fallback'] ?? null;
        $this->container['unread_mention_count'] = $data['unread_mention_count'] ?? null;
        $this->container['unread_message_count'] = $data['unread_message_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel_url'] === null) {
            $invalidProperties[] = "'channel_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \Sendbird\Model\SendbirdGroupChannelDetailChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Sendbird\Model\SendbirdGroupChannelDetailChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_url
     *
     * @return string
     */
    public function getChannelUrl()
    {
        return $this->container['channel_url'];
    }

    /**
     * Sets channel_url
     *
     * @param string $channel_url channel_url
     *
     * @return self
     */
    public function setChannelUrl($channel_url)
    {
        $this->container['channel_url'] = $channel_url;

        return $this;
    }

    /**
     * Gets cover_url
     *
     * @return string|null
     */
    public function getCoverUrl()
    {
        return $this->container['cover_url'];
    }

    /**
     * Sets cover_url
     *
     * @param string|null $cover_url cover_url
     *
     * @return self
     */
    public function setCoverUrl($cover_url)
    {
        $this->container['cover_url'] = $cover_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Sendbird\Model\SendbirdBasicUserInfo|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Sendbird\Model\SendbirdBasicUserInfo|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets delivery_receipt
     *
     * @return array<string,int>|null
     */
    public function getDeliveryReceipt()
    {
        return $this->container['delivery_receipt'];
    }

    /**
     * Sets delivery_receipt
     *
     * @param array<string,int>|null $delivery_receipt delivery_receipt
     *
     * @return self
     */
    public function setDeliveryReceipt($delivery_receipt)
    {
        $this->container['delivery_receipt'] = $delivery_receipt;

        return $this;
    }

    /**
     * Gets disappearing_message
     *
     * @return \Sendbird\Model\SendbirdDisappearingMessage|null
     */
    public function getDisappearingMessage()
    {
        return $this->container['disappearing_message'];
    }

    /**
     * Sets disappearing_message
     *
     * @param \Sendbird\Model\SendbirdDisappearingMessage|null $disappearing_message disappearing_message
     *
     * @return self
     */
    public function setDisappearingMessage($disappearing_message)
    {
        $this->container['disappearing_message'] = $disappearing_message;

        return $this;
    }

    /**
     * Gets freeze
     *
     * @return bool|null
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze
     *
     * @param bool|null $freeze freeze
     *
     * @return self
     */
    public function setFreeze($freeze)
    {
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets has_ai_bot
     *
     * @return bool|null
     */
    public function getHasAiBot()
    {
        return $this->container['has_ai_bot'];
    }

    /**
     * Sets has_ai_bot
     *
     * @param bool|null $has_ai_bot has_ai_bot
     *
     * @return self
     */
    public function setHasAiBot($has_ai_bot)
    {
        $this->container['has_ai_bot'] = $has_ai_bot;

        return $this;
    }

    /**
     * Gets has_bot
     *
     * @return bool|null
     */
    public function getHasBot()
    {
        return $this->container['has_bot'];
    }

    /**
     * Sets has_bot
     *
     * @param bool|null $has_bot has_bot
     *
     * @return self
     */
    public function setHasBot($has_bot)
    {
        $this->container['has_bot'] = $has_bot;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignore_profanity_filter
     *
     * @return bool|null
     */
    public function getIgnoreProfanityFilter()
    {
        return $this->container['ignore_profanity_filter'];
    }

    /**
     * Sets ignore_profanity_filter
     *
     * @param bool|null $ignore_profanity_filter ignore_profanity_filter
     *
     * @return self
     */
    public function setIgnoreProfanityFilter($ignore_profanity_filter)
    {
        $this->container['ignore_profanity_filter'] = $ignore_profanity_filter;

        return $this;
    }

    /**
     * Gets is_access_code_required
     *
     * @return bool|null
     */
    public function getIsAccessCodeRequired()
    {
        return $this->container['is_access_code_required'];
    }

    /**
     * Sets is_access_code_required
     *
     * @param bool|null $is_access_code_required is_access_code_required
     *
     * @return self
     */
    public function setIsAccessCodeRequired($is_access_code_required)
    {
        $this->container['is_access_code_required'] = $is_access_code_required;

        return $this;
    }

    /**
     * Gets is_broadcast
     *
     * @return bool|null
     */
    public function getIsBroadcast()
    {
        return $this->container['is_broadcast'];
    }

    /**
     * Sets is_broadcast
     *
     * @param bool|null $is_broadcast is_broadcast
     *
     * @return self
     */
    public function setIsBroadcast($is_broadcast)
    {
        $this->container['is_broadcast'] = $is_broadcast;

        return $this;
    }

    /**
     * Gets is_discoverable
     *
     * @return bool|null
     */
    public function getIsDiscoverable()
    {
        return $this->container['is_discoverable'];
    }

    /**
     * Sets is_discoverable
     *
     * @param bool|null $is_discoverable is_discoverable
     *
     * @return self
     */
    public function setIsDiscoverable($is_discoverable)
    {
        $this->container['is_discoverable'] = $is_discoverable;

        return $this;
    }

    /**
     * Gets is_distinct
     *
     * @return bool|null
     */
    public function getIsDistinct()
    {
        return $this->container['is_distinct'];
    }

    /**
     * Sets is_distinct
     *
     * @param bool|null $is_distinct is_distinct
     *
     * @return self
     */
    public function setIsDistinct($is_distinct)
    {
        $this->container['is_distinct'] = $is_distinct;

        return $this;
    }

    /**
     * Gets is_ephemeral
     *
     * @return bool|null
     */
    public function getIsEphemeral()
    {
        return $this->container['is_ephemeral'];
    }

    /**
     * Sets is_ephemeral
     *
     * @param bool|null $is_ephemeral is_ephemeral
     *
     * @return self
     */
    public function setIsEphemeral($is_ephemeral)
    {
        $this->container['is_ephemeral'] = $is_ephemeral;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_super
     *
     * @return bool|null
     */
    public function getIsSuper()
    {
        return $this->container['is_super'];
    }

    /**
     * Sets is_super
     *
     * @param bool|null $is_super is_super
     *
     * @return self
     */
    public function setIsSuper($is_super)
    {
        $this->container['is_super'] = $is_super;

        return $this;
    }

    /**
     * Gets joined_member_count
     *
     * @return int|null
     */
    public function getJoinedMemberCount()
    {
        return $this->container['joined_member_count'];
    }

    /**
     * Sets joined_member_count
     *
     * @param int|null $joined_member_count joined_member_count
     *
     * @return self
     */
    public function setJoinedMemberCount($joined_member_count)
    {
        $this->container['joined_member_count'] = $joined_member_count;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return \Sendbird\Model\SendbirdMessageResponse|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param \Sendbird\Model\SendbirdMessageResponse|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets max_length_message
     *
     * @return int|null
     */
    public function getMaxLengthMessage()
    {
        return $this->container['max_length_message'];
    }

    /**
     * Sets max_length_message
     *
     * @param int|null $max_length_message max_length_message
     *
     * @return self
     */
    public function setMaxLengthMessage($max_length_message)
    {
        $this->container['max_length_message'] = $max_length_message;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int|null
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int|null $member_count member_count
     *
     * @return self
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Sendbird\Model\SendbirdMember[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Sendbird\Model\SendbirdMember[]|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets message_survival_seconds
     *
     * @return int|null
     */
    public function getMessageSurvivalSeconds()
    {
        return $this->container['message_survival_seconds'];
    }

    /**
     * Sets message_survival_seconds
     *
     * @param int|null $message_survival_seconds message_survival_seconds
     *
     * @return self
     */
    public function setMessageSurvivalSeconds($message_survival_seconds)
    {
        $this->container['message_survival_seconds'] = $message_survival_seconds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \Sendbird\Model\SendbirdUser[]|null
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \Sendbird\Model\SendbirdUser[]|null $operators operators
     *
     * @return self
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets read_receipt
     *
     * @return array<string,int>|null
     */
    public function getReadReceipt()
    {
        return $this->container['read_receipt'];
    }

    /**
     * Sets read_receipt
     *
     * @param array<string,int>|null $read_receipt read_receipt
     *
     * @return self
     */
    public function setReadReceipt($read_receipt)
    {
        $this->container['read_receipt'] = $read_receipt;

        return $this;
    }

    /**
     * Gets sms_fallback
     *
     * @return \Sendbird\Model\SendbirdSmsFallback|null
     */
    public function getSmsFallback()
    {
        return $this->container['sms_fallback'];
    }

    /**
     * Sets sms_fallback
     *
     * @param \Sendbird\Model\SendbirdSmsFallback|null $sms_fallback sms_fallback
     *
     * @return self
     */
    public function setSmsFallback($sms_fallback)
    {
        $this->container['sms_fallback'] = $sms_fallback;

        return $this;
    }

    /**
     * Gets unread_mention_count
     *
     * @return int|null
     */
    public function getUnreadMentionCount()
    {
        return $this->container['unread_mention_count'];
    }

    /**
     * Sets unread_mention_count
     *
     * @param int|null $unread_mention_count unread_mention_count
     *
     * @return self
     */
    public function setUnreadMentionCount($unread_mention_count)
    {
        $this->container['unread_mention_count'] = $unread_mention_count;

        return $this;
    }

    /**
     * Gets unread_message_count
     *
     * @return int|null
     */
    public function getUnreadMessageCount()
    {
        return $this->container['unread_message_count'];
    }

    /**
     * Sets unread_message_count
     *
     * @param int|null $unread_message_count unread_message_count
     *
     * @return self
     */
    public function setUnreadMessageCount($unread_message_count)
    {
        $this->container['unread_message_count'] = $unread_message_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


