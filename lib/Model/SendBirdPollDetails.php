<?php
/**
 * SendBirdPollDetails
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendBirdPollDetails Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdPollDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.PollDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_multiple_votes' => 'bool',
        'allow_user_suggestion' => 'bool',
        'close_at' => 'float',
        'created_at' => 'float',
        'created_by' => 'string',
        'is_anonymous' => 'bool',
        'options' => '\Sendbird\Model\SendBirdPollOption[]',
        'status' => 'string',
        'updated_at' => 'float',
        'voter_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_multiple_votes' => null,
        'allow_user_suggestion' => null,
        'close_at' => null,
        'created_at' => null,
        'created_by' => null,
        'is_anonymous' => null,
        'options' => null,
        'status' => null,
        'updated_at' => null,
        'voter_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_multiple_votes' => 'allow_multiple_votes',
        'allow_user_suggestion' => 'allow_user_suggestion',
        'close_at' => 'close_at',
        'created_at' => 'created_at',
        'created_by' => 'created_by',
        'is_anonymous' => 'is_anonymous',
        'options' => 'options',
        'status' => 'status',
        'updated_at' => 'updated_at',
        'voter_count' => 'voter_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_multiple_votes' => 'setAllowMultipleVotes',
        'allow_user_suggestion' => 'setAllowUserSuggestion',
        'close_at' => 'setCloseAt',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'is_anonymous' => 'setIsAnonymous',
        'options' => 'setOptions',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt',
        'voter_count' => 'setVoterCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_multiple_votes' => 'getAllowMultipleVotes',
        'allow_user_suggestion' => 'getAllowUserSuggestion',
        'close_at' => 'getCloseAt',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'is_anonymous' => 'getIsAnonymous',
        'options' => 'getOptions',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt',
        'voter_count' => 'getVoterCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_CLOSED = 'closed';
    const STATUS_OPEN = 'open';
    const STATUS_REMOVED = 'removed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CLOSED,
            self::STATUS_OPEN,
            self::STATUS_REMOVED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_multiple_votes'] = $data['allow_multiple_votes'] ?? null;
        $this->container['allow_user_suggestion'] = $data['allow_user_suggestion'] ?? null;
        $this->container['close_at'] = $data['close_at'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['is_anonymous'] = $data['is_anonymous'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['voter_count'] = $data['voter_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_multiple_votes
     *
     * @return bool|null
     */
    public function getAllowMultipleVotes()
    {
        return $this->container['allow_multiple_votes'];
    }

    /**
     * Sets allow_multiple_votes
     *
     * @param bool|null $allow_multiple_votes allow_multiple_votes
     *
     * @return self
     */
    public function setAllowMultipleVotes($allow_multiple_votes)
    {
        $this->container['allow_multiple_votes'] = $allow_multiple_votes;

        return $this;
    }

    /**
     * Gets allow_user_suggestion
     *
     * @return bool|null
     */
    public function getAllowUserSuggestion()
    {
        return $this->container['allow_user_suggestion'];
    }

    /**
     * Sets allow_user_suggestion
     *
     * @param bool|null $allow_user_suggestion allow_user_suggestion
     *
     * @return self
     */
    public function setAllowUserSuggestion($allow_user_suggestion)
    {
        $this->container['allow_user_suggestion'] = $allow_user_suggestion;

        return $this;
    }

    /**
     * Gets close_at
     *
     * @return float|null
     */
    public function getCloseAt()
    {
        return $this->container['close_at'];
    }

    /**
     * Sets close_at
     *
     * @param float|null $close_at close_at
     *
     * @return self
     */
    public function setCloseAt($close_at)
    {
        $this->container['close_at'] = $close_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets is_anonymous
     *
     * @return bool|null
     */
    public function getIsAnonymous()
    {
        return $this->container['is_anonymous'];
    }

    /**
     * Sets is_anonymous
     *
     * @param bool|null $is_anonymous is_anonymous
     *
     * @return self
     */
    public function setIsAnonymous($is_anonymous)
    {
        $this->container['is_anonymous'] = $is_anonymous;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Sendbird\Model\SendBirdPollOption[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Sendbird\Model\SendBirdPollOption[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return float|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param float|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets voter_count
     *
     * @return float|null
     */
    public function getVoterCount()
    {
        return $this->container['voter_count'];
    }

    /**
     * Sets voter_count
     *
     * @param float|null $voter_count voter_count
     *
     * @return self
     */
    public function setVoterCount($voter_count)
    {
        $this->container['voter_count'] = $voter_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


