<?php
/**
 * SendFileMessageRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendFileMessageRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendFileMessageRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sendFileMessageRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apns_bundle_id' => 'string',
        'apple_critical_alert_options' => 'object',
        'created_at' => 'int',
        'custom_type' => 'string',
        'data' => 'string',
        'dedup_id' => 'string',
        'files' => '\Sendbird\Model\SendbirdFile',
        'is_silent' => 'bool',
        'mark_as_read' => 'bool',
        'mention_type' => 'string',
        'mentioned_user_ids' => 'string[]',
        'message_type' => 'string',
        'require_auth' => 'bool',
        'send_push' => 'bool',
        'sorted_metaarray' => '\Sendbird\Model\SendbirdSortedMetaarrayInner[]',
        'sound' => 'string',
        'thumbnail1' => 'string',
        'thumbnail2' => 'string',
        'thumbnail3' => 'string',
        'thumbnails' => 'string[]',
        'volume' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apns_bundle_id' => null,
        'apple_critical_alert_options' => null,
        'created_at' => 'int64',
        'custom_type' => null,
        'data' => null,
        'dedup_id' => null,
        'files' => null,
        'is_silent' => null,
        'mark_as_read' => null,
        'mention_type' => null,
        'mentioned_user_ids' => null,
        'message_type' => null,
        'require_auth' => null,
        'send_push' => null,
        'sorted_metaarray' => null,
        'sound' => null,
        'thumbnail1' => null,
        'thumbnail2' => null,
        'thumbnail3' => null,
        'thumbnails' => null,
        'volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apns_bundle_id' => 'apns_bundle_id',
        'apple_critical_alert_options' => 'apple_critical_alert_options',
        'created_at' => 'created_at',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'dedup_id' => 'dedup_id',
        'files' => 'files',
        'is_silent' => 'is_silent',
        'mark_as_read' => 'mark_as_read',
        'mention_type' => 'mention_type',
        'mentioned_user_ids' => 'mentioned_user_ids',
        'message_type' => 'message_type',
        'require_auth' => 'require_auth',
        'send_push' => 'send_push',
        'sorted_metaarray' => 'sorted_metaarray',
        'sound' => 'sound',
        'thumbnail1' => 'thumbnail1',
        'thumbnail2' => 'thumbnail2',
        'thumbnail3' => 'thumbnail3',
        'thumbnails' => 'thumbnails',
        'volume' => 'volume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apns_bundle_id' => 'setApnsBundleId',
        'apple_critical_alert_options' => 'setAppleCriticalAlertOptions',
        'created_at' => 'setCreatedAt',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'dedup_id' => 'setDedupId',
        'files' => 'setFiles',
        'is_silent' => 'setIsSilent',
        'mark_as_read' => 'setMarkAsRead',
        'mention_type' => 'setMentionType',
        'mentioned_user_ids' => 'setMentionedUserIds',
        'message_type' => 'setMessageType',
        'require_auth' => 'setRequireAuth',
        'send_push' => 'setSendPush',
        'sorted_metaarray' => 'setSortedMetaarray',
        'sound' => 'setSound',
        'thumbnail1' => 'setThumbnail1',
        'thumbnail2' => 'setThumbnail2',
        'thumbnail3' => 'setThumbnail3',
        'thumbnails' => 'setThumbnails',
        'volume' => 'setVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apns_bundle_id' => 'getApnsBundleId',
        'apple_critical_alert_options' => 'getAppleCriticalAlertOptions',
        'created_at' => 'getCreatedAt',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'dedup_id' => 'getDedupId',
        'files' => 'getFiles',
        'is_silent' => 'getIsSilent',
        'mark_as_read' => 'getMarkAsRead',
        'mention_type' => 'getMentionType',
        'mentioned_user_ids' => 'getMentionedUserIds',
        'message_type' => 'getMessageType',
        'require_auth' => 'getRequireAuth',
        'send_push' => 'getSendPush',
        'sorted_metaarray' => 'getSortedMetaarray',
        'sound' => 'getSound',
        'thumbnail1' => 'getThumbnail1',
        'thumbnail2' => 'getThumbnail2',
        'thumbnail3' => 'getThumbnail3',
        'thumbnails' => 'getThumbnails',
        'volume' => 'getVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MENTION_TYPE_USERS = 'users';
    public const MENTION_TYPE_CHANNEL = 'channel';
    public const MESSAGE_TYPE_FILE = 'FILE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMentionTypeAllowableValues()
    {
        return [
            self::MENTION_TYPE_USERS,
            self::MENTION_TYPE_CHANNEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_FILE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apns_bundle_id'] = $data['apns_bundle_id'] ?? null;
        $this->container['apple_critical_alert_options'] = $data['apple_critical_alert_options'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['dedup_id'] = $data['dedup_id'] ?? null;
        $this->container['files'] = $data['files'] ?? null;
        $this->container['is_silent'] = $data['is_silent'] ?? null;
        $this->container['mark_as_read'] = $data['mark_as_read'] ?? null;
        $this->container['mention_type'] = $data['mention_type'] ?? null;
        $this->container['mentioned_user_ids'] = $data['mentioned_user_ids'] ?? null;
        $this->container['message_type'] = $data['message_type'] ?? null;
        $this->container['require_auth'] = $data['require_auth'] ?? null;
        $this->container['send_push'] = $data['send_push'] ?? null;
        $this->container['sorted_metaarray'] = $data['sorted_metaarray'] ?? null;
        $this->container['sound'] = $data['sound'] ?? null;
        $this->container['thumbnail1'] = $data['thumbnail1'] ?? null;
        $this->container['thumbnail2'] = $data['thumbnail2'] ?? null;
        $this->container['thumbnail3'] = $data['thumbnail3'] ?? null;
        $this->container['thumbnails'] = $data['thumbnails'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['files'] === null) {
            $invalidProperties[] = "'files' can't be null";
        }
        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($this->container['mention_type']) && !in_array($this->container['mention_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mention_type', must be one of '%s'",
                $this->container['mention_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['message_type'] === null) {
            $invalidProperties[] = "'message_type' can't be null";
        }
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_type', must be one of '%s'",
                $this->container['message_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apns_bundle_id
     *
     * @return string|null
     */
    public function getApnsBundleId()
    {
        return $this->container['apns_bundle_id'];
    }

    /**
     * Sets apns_bundle_id
     *
     * @param string|null $apns_bundle_id apns_bundle_id
     *
     * @return self
     */
    public function setApnsBundleId($apns_bundle_id)
    {
        $this->container['apns_bundle_id'] = $apns_bundle_id;

        return $this;
    }

    /**
     * Gets apple_critical_alert_options
     *
     * @return object|null
     */
    public function getAppleCriticalAlertOptions()
    {
        return $this->container['apple_critical_alert_options'];
    }

    /**
     * Sets apple_critical_alert_options
     *
     * @param object|null $apple_critical_alert_options apple_critical_alert_options
     *
     * @return self
     */
    public function setAppleCriticalAlertOptions($apple_critical_alert_options)
    {
        $this->container['apple_critical_alert_options'] = $apple_critical_alert_options;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets dedup_id
     *
     * @return string|null
     */
    public function getDedupId()
    {
        return $this->container['dedup_id'];
    }

    /**
     * Sets dedup_id
     *
     * @param string|null $dedup_id dedup_id
     *
     * @return self
     */
    public function setDedupId($dedup_id)
    {
        $this->container['dedup_id'] = $dedup_id;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Sendbird\Model\SendbirdFile
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Sendbird\Model\SendbirdFile $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets is_silent
     *
     * @return bool|null
     */
    public function getIsSilent()
    {
        return $this->container['is_silent'];
    }

    /**
     * Sets is_silent
     *
     * @param bool|null $is_silent is_silent
     *
     * @return self
     */
    public function setIsSilent($is_silent)
    {
        $this->container['is_silent'] = $is_silent;

        return $this;
    }

    /**
     * Gets mark_as_read
     *
     * @return bool|null
     */
    public function getMarkAsRead()
    {
        return $this->container['mark_as_read'];
    }

    /**
     * Sets mark_as_read
     *
     * @param bool|null $mark_as_read mark_as_read
     *
     * @return self
     */
    public function setMarkAsRead($mark_as_read)
    {
        $this->container['mark_as_read'] = $mark_as_read;

        return $this;
    }

    /**
     * Gets mention_type
     *
     * @return string|null
     */
    public function getMentionType()
    {
        return $this->container['mention_type'];
    }

    /**
     * Sets mention_type
     *
     * @param string|null $mention_type mention_type
     *
     * @return self
     */
    public function setMentionType($mention_type)
    {
        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($mention_type) && !in_array($mention_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mention_type', must be one of '%s'",
                    $mention_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mention_type'] = $mention_type;

        return $this;
    }

    /**
     * Gets mentioned_user_ids
     *
     * @return string[]|null
     */
    public function getMentionedUserIds()
    {
        return $this->container['mentioned_user_ids'];
    }

    /**
     * Sets mentioned_user_ids
     *
     * @param string[]|null $mentioned_user_ids mentioned_user_ids
     *
     * @return self
     */
    public function setMentionedUserIds($mentioned_user_ids)
    {
        $this->container['mentioned_user_ids'] = $mentioned_user_ids;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type Specifies the type of the message. The value of FILE represents a file message.
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_type', must be one of '%s'",
                    $message_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets require_auth
     *
     * @return bool|null
     */
    public function getRequireAuth()
    {
        return $this->container['require_auth'];
    }

    /**
     * Sets require_auth
     *
     * @param bool|null $require_auth Determines whether to require an authentication key to verify if the file is being properly accessed. Only the user who uploaded the file or users who are in the channel where the file was uploaded should have access. The authentication key managed internally by the Sendbird system is generated every time a user logs in to the Sendbird server and is valid for three days starting from the last login. If set to false, Sendbird tries to access a file without any key. To access encrypted files, such as the files in the Sendbird server which are by default encrypted, the property must be set to true. (Default: false) The require_auth parameter only works if the file or URL is managed by Sendbird, which means that when you upload files using multipart format or provide URLs that point to the files hosted on the Sendbird server. However, if the file is hosted on a server or service that is not managed by Sendbird, access control and authentication for the file should be handled by the respective server or service hosting the file.
     *
     * @return self
     */
    public function setRequireAuth($require_auth)
    {
        $this->container['require_auth'] = $require_auth;

        return $this;
    }

    /**
     * Gets send_push
     *
     * @return bool|null
     */
    public function getSendPush()
    {
        return $this->container['send_push'];
    }

    /**
     * Sets send_push
     *
     * @param bool|null $send_push send_push
     *
     * @return self
     */
    public function setSendPush($send_push)
    {
        $this->container['send_push'] = $send_push;

        return $this;
    }

    /**
     * Gets sorted_metaarray
     *
     * @return \Sendbird\Model\SendbirdSortedMetaarrayInner[]|null
     */
    public function getSortedMetaarray()
    {
        return $this->container['sorted_metaarray'];
    }

    /**
     * Sets sorted_metaarray
     *
     * @param \Sendbird\Model\SendbirdSortedMetaarrayInner[]|null $sorted_metaarray sorted_metaarray
     *
     * @return self
     */
    public function setSortedMetaarray($sorted_metaarray)
    {
        $this->container['sorted_metaarray'] = $sorted_metaarray;

        return $this;
    }

    /**
     * Gets sound
     *
     * @return string|null
     */
    public function getSound()
    {
        return $this->container['sound'];
    }

    /**
     * Sets sound
     *
     * @param string|null $sound sound
     *
     * @return self
     */
    public function setSound($sound)
    {
        $this->container['sound'] = $sound;

        return $this;
    }

    /**
     * Gets thumbnail1
     *
     * @return string|null
     */
    public function getThumbnail1()
    {
        return $this->container['thumbnail1'];
    }

    /**
     * Sets thumbnail1
     *
     * @param string|null $thumbnail1 thumbnail1
     *
     * @return self
     */
    public function setThumbnail1($thumbnail1)
    {
        $this->container['thumbnail1'] = $thumbnail1;

        return $this;
    }

    /**
     * Gets thumbnail2
     *
     * @return string|null
     */
    public function getThumbnail2()
    {
        return $this->container['thumbnail2'];
    }

    /**
     * Sets thumbnail2
     *
     * @param string|null $thumbnail2 thumbnail2
     *
     * @return self
     */
    public function setThumbnail2($thumbnail2)
    {
        $this->container['thumbnail2'] = $thumbnail2;

        return $this;
    }

    /**
     * Gets thumbnail3
     *
     * @return string|null
     */
    public function getThumbnail3()
    {
        return $this->container['thumbnail3'];
    }

    /**
     * Sets thumbnail3
     *
     * @param string|null $thumbnail3 thumbnail3
     *
     * @return self
     */
    public function setThumbnail3($thumbnail3)
    {
        $this->container['thumbnail3'] = $thumbnail3;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return string[]|null
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param string[]|null $thumbnails thumbnails
     *
     * @return self
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


