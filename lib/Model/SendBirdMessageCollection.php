<?php
/**
 * SendBirdMessageCollection
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdMessageCollection Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdMessageCollection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.MessageCollection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => '\OpenAPI\Client\Model\SendBirdBaseChannel',
        'failed_messages' => '\OpenAPI\Client\Model\SendBirdBaseMessageInstance[]',
        'has_next' => 'bool',
        'has_previous' => 'bool',
        'pending_messages' => '\OpenAPI\Client\Model\SendBirdBaseMessageInstance[]',
        'starting_point' => 'float',
        'succeeded_messages' => '\OpenAPI\Client\Model\SendBirdBaseMessageInstance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'failed_messages' => null,
        'has_next' => null,
        'has_previous' => null,
        'pending_messages' => null,
        'starting_point' => null,
        'succeeded_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'failed_messages' => 'failedMessages',
        'has_next' => 'hasNext',
        'has_previous' => 'hasPrevious',
        'pending_messages' => 'pendingMessages',
        'starting_point' => 'startingPoint',
        'succeeded_messages' => 'succeededMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'failed_messages' => 'setFailedMessages',
        'has_next' => 'setHasNext',
        'has_previous' => 'setHasPrevious',
        'pending_messages' => 'setPendingMessages',
        'starting_point' => 'setStartingPoint',
        'succeeded_messages' => 'setSucceededMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'failed_messages' => 'getFailedMessages',
        'has_next' => 'getHasNext',
        'has_previous' => 'getHasPrevious',
        'pending_messages' => 'getPendingMessages',
        'starting_point' => 'getStartingPoint',
        'succeeded_messages' => 'getSucceededMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['failed_messages'] = $data['failed_messages'] ?? null;
        $this->container['has_next'] = $data['has_next'] ?? null;
        $this->container['has_previous'] = $data['has_previous'] ?? null;
        $this->container['pending_messages'] = $data['pending_messages'] ?? null;
        $this->container['starting_point'] = $data['starting_point'] ?? null;
        $this->container['succeeded_messages'] = $data['succeeded_messages'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\SendBirdBaseChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\SendBirdBaseChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets failed_messages
     *
     * @return \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null
     */
    public function getFailedMessages()
    {
        return $this->container['failed_messages'];
    }

    /**
     * Sets failed_messages
     *
     * @param \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null $failed_messages failed_messages
     *
     * @return self
     */
    public function setFailedMessages($failed_messages)
    {
        $this->container['failed_messages'] = $failed_messages;

        return $this;
    }

    /**
     * Gets has_next
     *
     * @return bool|null
     */
    public function getHasNext()
    {
        return $this->container['has_next'];
    }

    /**
     * Sets has_next
     *
     * @param bool|null $has_next has_next
     *
     * @return self
     */
    public function setHasNext($has_next)
    {
        $this->container['has_next'] = $has_next;

        return $this;
    }

    /**
     * Gets has_previous
     *
     * @return bool|null
     */
    public function getHasPrevious()
    {
        return $this->container['has_previous'];
    }

    /**
     * Sets has_previous
     *
     * @param bool|null $has_previous has_previous
     *
     * @return self
     */
    public function setHasPrevious($has_previous)
    {
        $this->container['has_previous'] = $has_previous;

        return $this;
    }

    /**
     * Gets pending_messages
     *
     * @return \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null
     */
    public function getPendingMessages()
    {
        return $this->container['pending_messages'];
    }

    /**
     * Sets pending_messages
     *
     * @param \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null $pending_messages pending_messages
     *
     * @return self
     */
    public function setPendingMessages($pending_messages)
    {
        $this->container['pending_messages'] = $pending_messages;

        return $this;
    }

    /**
     * Gets starting_point
     *
     * @return float|null
     */
    public function getStartingPoint()
    {
        return $this->container['starting_point'];
    }

    /**
     * Sets starting_point
     *
     * @param float|null $starting_point starting_point
     *
     * @return self
     */
    public function setStartingPoint($starting_point)
    {
        $this->container['starting_point'] = $starting_point;

        return $this;
    }

    /**
     * Gets succeeded_messages
     *
     * @return \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null
     */
    public function getSucceededMessages()
    {
        return $this->container['succeeded_messages'];
    }

    /**
     * Sets succeeded_messages
     *
     * @param \OpenAPI\Client\Model\SendBirdBaseMessageInstance[]|null $succeeded_messages succeeded_messages
     *
     * @return self
     */
    public function setSucceededMessages($succeeded_messages)
    {
        $this->container['succeeded_messages'] = $succeeded_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


