<?php
/**
 * SendBirdMember
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendBirdMember Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SendBirdMember implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.Member';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connection_status' => 'string',
        'friend_discovery_key' => 'string',
        'friend_name' => 'string',
        'is_active' => 'bool',
        'is_muted' => 'bool',
        'last_seen_at' => 'int',
        'nickname' => 'string',
        'plain_profile_url' => 'string',
        'preferred_languages' => 'string[]',
        'profile_url' => 'string',
        'require_auth' => 'bool',
        'require_auth_for_profile_image' => 'bool',
        'metadata' => 'object',
        'is_online' => 'bool',
        'muted_end_at' => 'float',
        'muted_description' => 'string',
        'restriction_info' => '\Sendbird\Model\SendBirdRestrictionInfo',
        'role' => 'string',
        'state' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connection_status' => null,
        'friend_discovery_key' => null,
        'friend_name' => null,
        'is_active' => null,
        'is_muted' => null,
        'last_seen_at' => null,
        'nickname' => null,
        'plain_profile_url' => null,
        'preferred_languages' => null,
        'profile_url' => null,
        'require_auth' => null,
        'require_auth_for_profile_image' => null,
        'metadata' => null,
        'is_online' => null,
        'muted_end_at' => null,
        'muted_description' => null,
        'restriction_info' => null,
        'role' => null,
        'state' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_status' => 'connection_status',
        'friend_discovery_key' => 'friend_discovery_key',
        'friend_name' => 'friend_name',
        'is_active' => 'is_active',
        'is_muted' => 'is_muted',
        'last_seen_at' => 'last_seen_at',
        'nickname' => 'nickname',
        'plain_profile_url' => 'plain_profile_url',
        'preferred_languages' => 'preferred_languages',
        'profile_url' => 'profile_url',
        'require_auth' => 'require_auth',
        'require_auth_for_profile_image' => 'require_auth_for_profile_image',
        'metadata' => 'metadata',
        'is_online' => 'is_online',
        'muted_end_at' => 'muted_end_at',
        'muted_description' => 'muted_description',
        'restriction_info' => 'restriction_info',
        'role' => 'role',
        'state' => 'state',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_status' => 'setConnectionStatus',
        'friend_discovery_key' => 'setFriendDiscoveryKey',
        'friend_name' => 'setFriendName',
        'is_active' => 'setIsActive',
        'is_muted' => 'setIsMuted',
        'last_seen_at' => 'setLastSeenAt',
        'nickname' => 'setNickname',
        'plain_profile_url' => 'setPlainProfileUrl',
        'preferred_languages' => 'setPreferredLanguages',
        'profile_url' => 'setProfileUrl',
        'require_auth' => 'setRequireAuth',
        'require_auth_for_profile_image' => 'setRequireAuthForProfileImage',
        'metadata' => 'setMetadata',
        'is_online' => 'setIsOnline',
        'muted_end_at' => 'setMutedEndAt',
        'muted_description' => 'setMutedDescription',
        'restriction_info' => 'setRestrictionInfo',
        'role' => 'setRole',
        'state' => 'setState',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_status' => 'getConnectionStatus',
        'friend_discovery_key' => 'getFriendDiscoveryKey',
        'friend_name' => 'getFriendName',
        'is_active' => 'getIsActive',
        'is_muted' => 'getIsMuted',
        'last_seen_at' => 'getLastSeenAt',
        'nickname' => 'getNickname',
        'plain_profile_url' => 'getPlainProfileUrl',
        'preferred_languages' => 'getPreferredLanguages',
        'profile_url' => 'getProfileUrl',
        'require_auth' => 'getRequireAuth',
        'require_auth_for_profile_image' => 'getRequireAuthForProfileImage',
        'metadata' => 'getMetadata',
        'is_online' => 'getIsOnline',
        'muted_end_at' => 'getMutedEndAt',
        'muted_description' => 'getMutedDescription',
        'restriction_info' => 'getRestrictionInfo',
        'role' => 'getRole',
        'state' => 'getState',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROLE_NONE = 'none';
    public const ROLE_OPERATOR = 'operator';
    public const STATE_INVITED = 'invited';
    public const STATE_JOINED = 'joined';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_NONE,
            self::ROLE_OPERATOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INVITED,
            self::STATE_JOINED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection_status'] = $data['connection_status'] ?? null;
        $this->container['friend_discovery_key'] = $data['friend_discovery_key'] ?? null;
        $this->container['friend_name'] = $data['friend_name'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['is_muted'] = $data['is_muted'] ?? null;
        $this->container['last_seen_at'] = $data['last_seen_at'] ?? null;
        $this->container['nickname'] = $data['nickname'] ?? null;
        $this->container['plain_profile_url'] = $data['plain_profile_url'] ?? null;
        $this->container['preferred_languages'] = $data['preferred_languages'] ?? null;
        $this->container['profile_url'] = $data['profile_url'] ?? null;
        $this->container['require_auth'] = $data['require_auth'] ?? null;
        $this->container['require_auth_for_profile_image'] = $data['require_auth_for_profile_image'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['is_online'] = $data['is_online'] ?? null;
        $this->container['muted_end_at'] = $data['muted_end_at'] ?? null;
        $this->container['muted_description'] = $data['muted_description'] ?? null;
        $this->container['restriction_info'] = $data['restriction_info'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_status
     *
     * @return string|null
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string|null $connection_status connection_status
     *
     * @return self
     */
    public function setConnectionStatus($connection_status)
    {
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets friend_discovery_key
     *
     * @return string|null
     */
    public function getFriendDiscoveryKey()
    {
        return $this->container['friend_discovery_key'];
    }

    /**
     * Sets friend_discovery_key
     *
     * @param string|null $friend_discovery_key friend_discovery_key
     *
     * @return self
     */
    public function setFriendDiscoveryKey($friend_discovery_key)
    {
        $this->container['friend_discovery_key'] = $friend_discovery_key;

        return $this;
    }

    /**
     * Gets friend_name
     *
     * @return string|null
     */
    public function getFriendName()
    {
        return $this->container['friend_name'];
    }

    /**
     * Sets friend_name
     *
     * @param string|null $friend_name friend_name
     *
     * @return self
     */
    public function setFriendName($friend_name)
    {
        $this->container['friend_name'] = $friend_name;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_muted
     *
     * @return bool|null
     */
    public function getIsMuted()
    {
        return $this->container['is_muted'];
    }

    /**
     * Sets is_muted
     *
     * @param bool|null $is_muted is_muted
     *
     * @return self
     */
    public function setIsMuted($is_muted)
    {
        $this->container['is_muted'] = $is_muted;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return int|null
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param int|null $last_seen_at last_seen_at
     *
     * @return self
     */
    public function setLastSeenAt($last_seen_at)
    {
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets plain_profile_url
     *
     * @return string|null
     */
    public function getPlainProfileUrl()
    {
        return $this->container['plain_profile_url'];
    }

    /**
     * Sets plain_profile_url
     *
     * @param string|null $plain_profile_url plain_profile_url
     *
     * @return self
     */
    public function setPlainProfileUrl($plain_profile_url)
    {
        $this->container['plain_profile_url'] = $plain_profile_url;

        return $this;
    }

    /**
     * Gets preferred_languages
     *
     * @return string[]|null
     */
    public function getPreferredLanguages()
    {
        return $this->container['preferred_languages'];
    }

    /**
     * Sets preferred_languages
     *
     * @param string[]|null $preferred_languages preferred_languages
     *
     * @return self
     */
    public function setPreferredLanguages($preferred_languages)
    {
        $this->container['preferred_languages'] = $preferred_languages;

        return $this;
    }

    /**
     * Gets profile_url
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profile_url'];
    }

    /**
     * Sets profile_url
     *
     * @param string|null $profile_url profile_url
     *
     * @return self
     */
    public function setProfileUrl($profile_url)
    {
        $this->container['profile_url'] = $profile_url;

        return $this;
    }

    /**
     * Gets require_auth
     *
     * @return bool|null
     */
    public function getRequireAuth()
    {
        return $this->container['require_auth'];
    }

    /**
     * Sets require_auth
     *
     * @param bool|null $require_auth require_auth
     *
     * @return self
     */
    public function setRequireAuth($require_auth)
    {
        $this->container['require_auth'] = $require_auth;

        return $this;
    }

    /**
     * Gets require_auth_for_profile_image
     *
     * @return bool|null
     */
    public function getRequireAuthForProfileImage()
    {
        return $this->container['require_auth_for_profile_image'];
    }

    /**
     * Sets require_auth_for_profile_image
     *
     * @param bool|null $require_auth_for_profile_image require_auth_for_profile_image
     *
     * @return self
     */
    public function setRequireAuthForProfileImage($require_auth_for_profile_image)
    {
        $this->container['require_auth_for_profile_image'] = $require_auth_for_profile_image;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool|null
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool|null $is_online is_online
     *
     * @return self
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets muted_end_at
     *
     * @return float|null
     */
    public function getMutedEndAt()
    {
        return $this->container['muted_end_at'];
    }

    /**
     * Sets muted_end_at
     *
     * @param float|null $muted_end_at muted_end_at
     *
     * @return self
     */
    public function setMutedEndAt($muted_end_at)
    {
        $this->container['muted_end_at'] = $muted_end_at;

        return $this;
    }

    /**
     * Gets muted_description
     *
     * @return string|null
     */
    public function getMutedDescription()
    {
        return $this->container['muted_description'];
    }

    /**
     * Sets muted_description
     *
     * @param string|null $muted_description muted_description
     *
     * @return self
     */
    public function setMutedDescription($muted_description)
    {
        $this->container['muted_description'] = $muted_description;

        return $this;
    }

    /**
     * Gets restriction_info
     *
     * @return \Sendbird\Model\SendBirdRestrictionInfo|null
     */
    public function getRestrictionInfo()
    {
        return $this->container['restriction_info'];
    }

    /**
     * Sets restriction_info
     *
     * @param \Sendbird\Model\SendBirdRestrictionInfo|null $restriction_info restriction_info
     *
     * @return self
     */
    public function setRestrictionInfo($restriction_info)
    {
        $this->container['restriction_info'] = $restriction_info;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


