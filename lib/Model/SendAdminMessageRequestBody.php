<?php
/**
 * SendAdminMessageRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * SendAdminMessageRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendAdminMessageRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sendAdminMessageRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apns_bundle_id' => 'string',
        'custom_type' => 'string',
        'data' => 'string',
        'dedup_id' => 'string',
        'is_silent' => 'bool',
        'mention_type' => 'string',
        'mentioned_user_ids' => 'string[]',
        'message' => 'string',
        'message_type' => 'string',
        'push_message_template' => '\Sendbird\Model\SendTextMessageRequestBodyPushMessageTemplate',
        'send_push' => 'bool',
        'sorted_metaarray' => '\Sendbird\Model\SendbirdSortedMetaarrayInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apns_bundle_id' => null,
        'custom_type' => null,
        'data' => null,
        'dedup_id' => null,
        'is_silent' => null,
        'mention_type' => null,
        'mentioned_user_ids' => null,
        'message' => null,
        'message_type' => null,
        'push_message_template' => null,
        'send_push' => null,
        'sorted_metaarray' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apns_bundle_id' => 'apns_bundle_id',
        'custom_type' => 'custom_type',
        'data' => 'data',
        'dedup_id' => 'dedup_id',
        'is_silent' => 'is_silent',
        'mention_type' => 'mention_type',
        'mentioned_user_ids' => 'mentioned_user_ids',
        'message' => 'message',
        'message_type' => 'message_type',
        'push_message_template' => 'push_message_template',
        'send_push' => 'send_push',
        'sorted_metaarray' => 'sorted_metaarray'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apns_bundle_id' => 'setApnsBundleId',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'dedup_id' => 'setDedupId',
        'is_silent' => 'setIsSilent',
        'mention_type' => 'setMentionType',
        'mentioned_user_ids' => 'setMentionedUserIds',
        'message' => 'setMessage',
        'message_type' => 'setMessageType',
        'push_message_template' => 'setPushMessageTemplate',
        'send_push' => 'setSendPush',
        'sorted_metaarray' => 'setSortedMetaarray'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apns_bundle_id' => 'getApnsBundleId',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'dedup_id' => 'getDedupId',
        'is_silent' => 'getIsSilent',
        'mention_type' => 'getMentionType',
        'mentioned_user_ids' => 'getMentionedUserIds',
        'message' => 'getMessage',
        'message_type' => 'getMessageType',
        'push_message_template' => 'getPushMessageTemplate',
        'send_push' => 'getSendPush',
        'sorted_metaarray' => 'getSortedMetaarray'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MENTION_TYPE_USERS = 'users';
    public const MENTION_TYPE_CHANNEL = 'channel';
    public const MESSAGE_TYPE_ADMM = 'ADMM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMentionTypeAllowableValues()
    {
        return [
            self::MENTION_TYPE_USERS,
            self::MENTION_TYPE_CHANNEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_ADMM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apns_bundle_id'] = $data['apns_bundle_id'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['dedup_id'] = $data['dedup_id'] ?? null;
        $this->container['is_silent'] = $data['is_silent'] ?? null;
        $this->container['mention_type'] = $data['mention_type'] ?? null;
        $this->container['mentioned_user_ids'] = $data['mentioned_user_ids'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['message_type'] = $data['message_type'] ?? null;
        $this->container['push_message_template'] = $data['push_message_template'] ?? null;
        $this->container['send_push'] = $data['send_push'] ?? null;
        $this->container['sorted_metaarray'] = $data['sorted_metaarray'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($this->container['mention_type']) && !in_array($this->container['mention_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mention_type', must be one of '%s'",
                $this->container['mention_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['message_type'] === null) {
            $invalidProperties[] = "'message_type' can't be null";
        }
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_type', must be one of '%s'",
                $this->container['message_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apns_bundle_id
     *
     * @return string|null
     */
    public function getApnsBundleId()
    {
        return $this->container['apns_bundle_id'];
    }

    /**
     * Sets apns_bundle_id
     *
     * @param string|null $apns_bundle_id apns_bundle_id
     *
     * @return self
     */
    public function setApnsBundleId($apns_bundle_id)
    {
        $this->container['apns_bundle_id'] = $apns_bundle_id;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets dedup_id
     *
     * @return string|null
     */
    public function getDedupId()
    {
        return $this->container['dedup_id'];
    }

    /**
     * Sets dedup_id
     *
     * @param string|null $dedup_id dedup_id
     *
     * @return self
     */
    public function setDedupId($dedup_id)
    {
        $this->container['dedup_id'] = $dedup_id;

        return $this;
    }

    /**
     * Gets is_silent
     *
     * @return bool|null
     */
    public function getIsSilent()
    {
        return $this->container['is_silent'];
    }

    /**
     * Sets is_silent
     *
     * @param bool|null $is_silent is_silent
     *
     * @return self
     */
    public function setIsSilent($is_silent)
    {
        $this->container['is_silent'] = $is_silent;

        return $this;
    }

    /**
     * Gets mention_type
     *
     * @return string|null
     */
    public function getMentionType()
    {
        return $this->container['mention_type'];
    }

    /**
     * Sets mention_type
     *
     * @param string|null $mention_type mention_type
     *
     * @return self
     */
    public function setMentionType($mention_type)
    {
        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($mention_type) && !in_array($mention_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mention_type', must be one of '%s'",
                    $mention_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mention_type'] = $mention_type;

        return $this;
    }

    /**
     * Gets mentioned_user_ids
     *
     * @return string[]|null
     */
    public function getMentionedUserIds()
    {
        return $this->container['mentioned_user_ids'];
    }

    /**
     * Sets mentioned_user_ids
     *
     * @param string[]|null $mentioned_user_ids mentioned_user_ids
     *
     * @return self
     */
    public function setMentionedUserIds($mentioned_user_ids)
    {
        $this->container['mentioned_user_ids'] = $mentioned_user_ids;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type Specifies the type of the message. The value of ADMM represents an admin message.
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_type', must be one of '%s'",
                    $message_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets push_message_template
     *
     * @return \Sendbird\Model\SendTextMessageRequestBodyPushMessageTemplate|null
     */
    public function getPushMessageTemplate()
    {
        return $this->container['push_message_template'];
    }

    /**
     * Sets push_message_template
     *
     * @param \Sendbird\Model\SendTextMessageRequestBodyPushMessageTemplate|null $push_message_template push_message_template
     *
     * @return self
     */
    public function setPushMessageTemplate($push_message_template)
    {
        $this->container['push_message_template'] = $push_message_template;

        return $this;
    }

    /**
     * Gets send_push
     *
     * @return bool|null
     */
    public function getSendPush()
    {
        return $this->container['send_push'];
    }

    /**
     * Sets send_push
     *
     * @param bool|null $send_push send_push
     *
     * @return self
     */
    public function setSendPush($send_push)
    {
        $this->container['send_push'] = $send_push;

        return $this;
    }

    /**
     * Gets sorted_metaarray
     *
     * @return \Sendbird\Model\SendbirdSortedMetaarrayInner[]|null
     */
    public function getSortedMetaarray()
    {
        return $this->container['sorted_metaarray'];
    }

    /**
     * Sets sorted_metaarray
     *
     * @param \Sendbird\Model\SendbirdSortedMetaarrayInner[]|null $sorted_metaarray sorted_metaarray
     *
     * @return self
     */
    public function setSortedMetaarray($sorted_metaarray)
    {
        $this->container['sorted_metaarray'] = $sorted_metaarray;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


