<?php
/**
 * SendBirdScheduledUserMessageParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendBirdScheduledUserMessageParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendBirdScheduledUserMessageParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendBird.ScheduledUserMessageParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apple_critical_alert_options' => '\OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions',
        'custom_type' => 'string',
        'data' => 'string',
        'day' => 'float',
        'hour' => 'float',
        'mention_type' => 'string',
        'mentioned_user_ids' => 'string[]',
        'mentioned_users' => '\OpenAPI\Client\Model\SendBirdUser[]',
        'message' => 'string',
        'meta_array_keys' => 'string[]',
        'min' => 'float',
        'month' => 'float',
        'push_notification_delivery_option' => 'string',
        'scheduled_date_time_string' => 'string',
        'timezone' => 'string',
        'translation_target_languages' => 'string[]',
        'year' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apple_critical_alert_options' => null,
        'custom_type' => null,
        'data' => null,
        'day' => null,
        'hour' => null,
        'mention_type' => null,
        'mentioned_user_ids' => null,
        'mentioned_users' => null,
        'message' => null,
        'meta_array_keys' => null,
        'min' => null,
        'month' => null,
        'push_notification_delivery_option' => null,
        'scheduled_date_time_string' => null,
        'timezone' => null,
        'translation_target_languages' => null,
        'year' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apple_critical_alert_options' => 'appleCriticalAlertOptions',
        'custom_type' => 'customType',
        'data' => 'data',
        'day' => 'day',
        'hour' => 'hour',
        'mention_type' => 'mentionType',
        'mentioned_user_ids' => 'mentionedUserIds',
        'mentioned_users' => 'mentionedUsers',
        'message' => 'message',
        'meta_array_keys' => 'metaArrayKeys',
        'min' => 'min',
        'month' => 'month',
        'push_notification_delivery_option' => 'pushNotificationDeliveryOption',
        'scheduled_date_time_string' => 'scheduledDateTimeString',
        'timezone' => 'timezone',
        'translation_target_languages' => 'translationTargetLanguages',
        'year' => 'year'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apple_critical_alert_options' => 'setAppleCriticalAlertOptions',
        'custom_type' => 'setCustomType',
        'data' => 'setData',
        'day' => 'setDay',
        'hour' => 'setHour',
        'mention_type' => 'setMentionType',
        'mentioned_user_ids' => 'setMentionedUserIds',
        'mentioned_users' => 'setMentionedUsers',
        'message' => 'setMessage',
        'meta_array_keys' => 'setMetaArrayKeys',
        'min' => 'setMin',
        'month' => 'setMonth',
        'push_notification_delivery_option' => 'setPushNotificationDeliveryOption',
        'scheduled_date_time_string' => 'setScheduledDateTimeString',
        'timezone' => 'setTimezone',
        'translation_target_languages' => 'setTranslationTargetLanguages',
        'year' => 'setYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apple_critical_alert_options' => 'getAppleCriticalAlertOptions',
        'custom_type' => 'getCustomType',
        'data' => 'getData',
        'day' => 'getDay',
        'hour' => 'getHour',
        'mention_type' => 'getMentionType',
        'mentioned_user_ids' => 'getMentionedUserIds',
        'mentioned_users' => 'getMentionedUsers',
        'message' => 'getMessage',
        'meta_array_keys' => 'getMetaArrayKeys',
        'min' => 'getMin',
        'month' => 'getMonth',
        'push_notification_delivery_option' => 'getPushNotificationDeliveryOption',
        'scheduled_date_time_string' => 'getScheduledDateTimeString',
        'timezone' => 'getTimezone',
        'translation_target_languages' => 'getTranslationTargetLanguages',
        'year' => 'getYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MENTION_TYPE_CHANNEL = 'channel';
    const MENTION_TYPE_USERS = 'users';
    const PUSH_NOTIFICATION_DELIVERY_OPTION__DEFAULT = 'default';
    const PUSH_NOTIFICATION_DELIVERY_OPTION_SUPPRESS = 'suppress';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMentionTypeAllowableValues()
    {
        return [
            self::MENTION_TYPE_CHANNEL,
            self::MENTION_TYPE_USERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPushNotificationDeliveryOptionAllowableValues()
    {
        return [
            self::PUSH_NOTIFICATION_DELIVERY_OPTION__DEFAULT,
            self::PUSH_NOTIFICATION_DELIVERY_OPTION_SUPPRESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apple_critical_alert_options'] = $data['apple_critical_alert_options'] ?? null;
        $this->container['custom_type'] = $data['custom_type'] ?? null;
        $this->container['data'] = $data['data'] ?? null;
        $this->container['day'] = $data['day'] ?? null;
        $this->container['hour'] = $data['hour'] ?? null;
        $this->container['mention_type'] = $data['mention_type'] ?? null;
        $this->container['mentioned_user_ids'] = $data['mentioned_user_ids'] ?? null;
        $this->container['mentioned_users'] = $data['mentioned_users'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['meta_array_keys'] = $data['meta_array_keys'] ?? null;
        $this->container['min'] = $data['min'] ?? null;
        $this->container['month'] = $data['month'] ?? null;
        $this->container['push_notification_delivery_option'] = $data['push_notification_delivery_option'] ?? null;
        $this->container['scheduled_date_time_string'] = $data['scheduled_date_time_string'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['translation_target_languages'] = $data['translation_target_languages'] ?? null;
        $this->container['year'] = $data['year'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($this->container['mention_type']) && !in_array($this->container['mention_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mention_type', must be one of '%s'",
                $this->container['mention_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPushNotificationDeliveryOptionAllowableValues();
        if (!is_null($this->container['push_notification_delivery_option']) && !in_array($this->container['push_notification_delivery_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'push_notification_delivery_option', must be one of '%s'",
                $this->container['push_notification_delivery_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apple_critical_alert_options
     *
     * @return \OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions|null
     */
    public function getAppleCriticalAlertOptions()
    {
        return $this->container['apple_critical_alert_options'];
    }

    /**
     * Sets apple_critical_alert_options
     *
     * @param \OpenAPI\Client\Model\SendBirdAppleCriticalAlertOptions|null $apple_critical_alert_options apple_critical_alert_options
     *
     * @return self
     */
    public function setAppleCriticalAlertOptions($apple_critical_alert_options)
    {
        $this->container['apple_critical_alert_options'] = $apple_critical_alert_options;

        return $this;
    }

    /**
     * Gets custom_type
     *
     * @return string|null
     */
    public function getCustomType()
    {
        return $this->container['custom_type'];
    }

    /**
     * Sets custom_type
     *
     * @param string|null $custom_type custom_type
     *
     * @return self
     */
    public function setCustomType($custom_type)
    {
        $this->container['custom_type'] = $custom_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets day
     *
     * @return float|null
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param float|null $day day
     *
     * @return self
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets hour
     *
     * @return float|null
     */
    public function getHour()
    {
        return $this->container['hour'];
    }

    /**
     * Sets hour
     *
     * @param float|null $hour hour
     *
     * @return self
     */
    public function setHour($hour)
    {
        $this->container['hour'] = $hour;

        return $this;
    }

    /**
     * Gets mention_type
     *
     * @return string|null
     */
    public function getMentionType()
    {
        return $this->container['mention_type'];
    }

    /**
     * Sets mention_type
     *
     * @param string|null $mention_type mention_type
     *
     * @return self
     */
    public function setMentionType($mention_type)
    {
        $allowedValues = $this->getMentionTypeAllowableValues();
        if (!is_null($mention_type) && !in_array($mention_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mention_type', must be one of '%s'",
                    $mention_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mention_type'] = $mention_type;

        return $this;
    }

    /**
     * Gets mentioned_user_ids
     *
     * @return string[]|null
     */
    public function getMentionedUserIds()
    {
        return $this->container['mentioned_user_ids'];
    }

    /**
     * Sets mentioned_user_ids
     *
     * @param string[]|null $mentioned_user_ids mentioned_user_ids
     *
     * @return self
     */
    public function setMentionedUserIds($mentioned_user_ids)
    {
        $this->container['mentioned_user_ids'] = $mentioned_user_ids;

        return $this;
    }

    /**
     * Gets mentioned_users
     *
     * @return \OpenAPI\Client\Model\SendBirdUser[]|null
     */
    public function getMentionedUsers()
    {
        return $this->container['mentioned_users'];
    }

    /**
     * Sets mentioned_users
     *
     * @param \OpenAPI\Client\Model\SendBirdUser[]|null $mentioned_users mentioned_users
     *
     * @return self
     */
    public function setMentionedUsers($mentioned_users)
    {
        $this->container['mentioned_users'] = $mentioned_users;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets meta_array_keys
     *
     * @return string[]|null
     */
    public function getMetaArrayKeys()
    {
        return $this->container['meta_array_keys'];
    }

    /**
     * Sets meta_array_keys
     *
     * @param string[]|null $meta_array_keys meta_array_keys
     *
     * @return self
     */
    public function setMetaArrayKeys($meta_array_keys)
    {
        $this->container['meta_array_keys'] = $meta_array_keys;

        return $this;
    }

    /**
     * Gets min
     *
     * @return float|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param float|null $min min
     *
     * @return self
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets month
     *
     * @return float|null
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param float|null $month month
     *
     * @return self
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets push_notification_delivery_option
     *
     * @return string|null
     */
    public function getPushNotificationDeliveryOption()
    {
        return $this->container['push_notification_delivery_option'];
    }

    /**
     * Sets push_notification_delivery_option
     *
     * @param string|null $push_notification_delivery_option push_notification_delivery_option
     *
     * @return self
     */
    public function setPushNotificationDeliveryOption($push_notification_delivery_option)
    {
        $allowedValues = $this->getPushNotificationDeliveryOptionAllowableValues();
        if (!is_null($push_notification_delivery_option) && !in_array($push_notification_delivery_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'push_notification_delivery_option', must be one of '%s'",
                    $push_notification_delivery_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['push_notification_delivery_option'] = $push_notification_delivery_option;

        return $this;
    }

    /**
     * Gets scheduled_date_time_string
     *
     * @return string|null
     */
    public function getScheduledDateTimeString()
    {
        return $this->container['scheduled_date_time_string'];
    }

    /**
     * Sets scheduled_date_time_string
     *
     * @param string|null $scheduled_date_time_string scheduled_date_time_string
     *
     * @return self
     */
    public function setScheduledDateTimeString($scheduled_date_time_string)
    {
        $this->container['scheduled_date_time_string'] = $scheduled_date_time_string;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets translation_target_languages
     *
     * @return string[]|null
     */
    public function getTranslationTargetLanguages()
    {
        return $this->container['translation_target_languages'];
    }

    /**
     * Sets translation_target_languages
     *
     * @param string[]|null $translation_target_languages translation_target_languages
     *
     * @return self
     */
    public function setTranslationTargetLanguages($translation_target_languages)
    {
        $this->container['translation_target_languages'] = $translation_target_languages;

        return $this;
    }

    /**
     * Gets year
     *
     * @return float|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param float|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


