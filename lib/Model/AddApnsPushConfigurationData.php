<?php
/**
 * AddApnsPushConfigurationData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sendbird\Model;

use \ArrayAccess;
use \Sendbird\ObjectSerializer;

/**
 * AddApnsPushConfigurationData Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AddApnsPushConfigurationData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addApnsPushConfigurationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apns_cert' => '\SplFileObject',
        'apns_cert_env_type' => 'string',
        'apns_cert_password' => 'string',
        'has_unread_count_badge' => 'bool',
        'content_available' => 'bool',
        'mutable_content' => 'bool',
        'push_sound' => 'string',
        'apns_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apns_cert' => 'binary',
        'apns_cert_env_type' => null,
        'apns_cert_password' => null,
        'has_unread_count_badge' => null,
        'content_available' => null,
        'mutable_content' => null,
        'push_sound' => null,
        'apns_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apns_cert' => 'apns_cert',
        'apns_cert_env_type' => 'apns_cert_env_type',
        'apns_cert_password' => 'apns_cert_password',
        'has_unread_count_badge' => 'has_unread_count_badge',
        'content_available' => 'content_available',
        'mutable_content' => 'mutable_content',
        'push_sound' => 'push_sound',
        'apns_type' => 'apns_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apns_cert' => 'setApnsCert',
        'apns_cert_env_type' => 'setApnsCertEnvType',
        'apns_cert_password' => 'setApnsCertPassword',
        'has_unread_count_badge' => 'setHasUnreadCountBadge',
        'content_available' => 'setContentAvailable',
        'mutable_content' => 'setMutableContent',
        'push_sound' => 'setPushSound',
        'apns_type' => 'setApnsType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apns_cert' => 'getApnsCert',
        'apns_cert_env_type' => 'getApnsCertEnvType',
        'apns_cert_password' => 'getApnsCertPassword',
        'has_unread_count_badge' => 'getHasUnreadCountBadge',
        'content_available' => 'getContentAvailable',
        'mutable_content' => 'getMutableContent',
        'push_sound' => 'getPushSound',
        'apns_type' => 'getApnsType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apns_cert'] = $data['apns_cert'] ?? null;
        $this->container['apns_cert_env_type'] = $data['apns_cert_env_type'] ?? null;
        $this->container['apns_cert_password'] = $data['apns_cert_password'] ?? null;
        $this->container['has_unread_count_badge'] = $data['has_unread_count_badge'] ?? null;
        $this->container['content_available'] = $data['content_available'] ?? null;
        $this->container['mutable_content'] = $data['mutable_content'] ?? null;
        $this->container['push_sound'] = $data['push_sound'] ?? null;
        $this->container['apns_type'] = $data['apns_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apns_cert'] === null) {
            $invalidProperties[] = "'apns_cert' can't be null";
        }
        if ($this->container['apns_cert_env_type'] === null) {
            $invalidProperties[] = "'apns_cert_env_type' can't be null";
        }
        if ($this->container['apns_cert_password'] === null) {
            $invalidProperties[] = "'apns_cert_password' can't be null";
        }
        if ($this->container['has_unread_count_badge'] === null) {
            $invalidProperties[] = "'has_unread_count_badge' can't be null";
        }
        if ($this->container['content_available'] === null) {
            $invalidProperties[] = "'content_available' can't be null";
        }
        if ($this->container['mutable_content'] === null) {
            $invalidProperties[] = "'mutable_content' can't be null";
        }
        if ($this->container['push_sound'] === null) {
            $invalidProperties[] = "'push_sound' can't be null";
        }
        if ($this->container['apns_type'] === null) {
            $invalidProperties[] = "'apns_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apns_cert
     *
     * @return \SplFileObject
     */
    public function getApnsCert()
    {
        return $this->container['apns_cert'];
    }

    /**
     * Sets apns_cert
     *
     * @param \SplFileObject $apns_cert In a form of the `multipart/form-data` content type, specifies a [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file of which type is either development or production. Sendbird server scans the content of the file, finds out the certificate type, and then registers the file as the corresponding type. If you upload a wrong file, you will receive an error.
     *
     * @return self
     */
    public function setApnsCert($apns_cert)
    {
        $this->container['apns_cert'] = $apns_cert;

        return $this;
    }

    /**
     * Gets apns_cert_env_type
     *
     * @return string
     */
    public function getApnsCertEnvType()
    {
        return $this->container['apns_cert_env_type'];
    }

    /**
     * Sets apns_cert_env_type
     *
     * @param string $apns_cert_env_type Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. There is no need to specify this property when the apns_cert above is specified.
     *
     * @return self
     */
    public function setApnsCertEnvType($apns_cert_env_type)
    {
        $this->container['apns_cert_env_type'] = $apns_cert_env_type;

        return $this;
    }

    /**
     * Gets apns_cert_password
     *
     * @return string
     */
    public function getApnsCertPassword()
    {
        return $this->container['apns_cert_password'];
    }

    /**
     * Sets apns_cert_password
     *
     * @param string $apns_cert_password Specifies the password of the cerfificate file which has been set during the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) export.
     *
     * @return self
     */
    public function setApnsCertPassword($apns_cert_password)
    {
        $this->container['apns_cert_password'] = $apns_cert_password;

        return $this;
    }

    /**
     * Gets has_unread_count_badge
     *
     * @return bool
     */
    public function getHasUnreadCountBadge()
    {
        return $this->container['has_unread_count_badge'];
    }

    /**
     * Sets has_unread_count_badge
     *
     * @param bool $has_unread_count_badge Determines whether to badge your client app's icon with the number of a user's unread messages. (Default: true)
     *
     * @return self
     */
    public function setHasUnreadCountBadge($has_unread_count_badge)
    {
        $this->container['has_unread_count_badge'] = $has_unread_count_badge;

        return $this;
    }

    /**
     * Gets content_available
     *
     * @return bool
     */
    public function getContentAvailable()
    {
        return $this->container['content_available'];
    }

    /**
     * Sets content_available
     *
     * @param bool $content_available Determines for your client app whether to perform a silent background update on a user's device. For more information, see the Apple Developer Documentation's [Pushing Updates to Your App Silently](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/pushing_updates_to_your_app_silently). (Default: false)
     *
     * @return self
     */
    public function setContentAvailable($content_available)
    {
        $this->container['content_available'] = $content_available;

        return $this;
    }

    /**
     * Gets mutable_content
     *
     * @return bool
     */
    public function getMutableContent()
    {
        return $this->container['mutable_content'];
    }

    /**
     * Sets mutable_content
     *
     * @param bool $mutable_content Determines for your client app whether or not to modify the payload of a push notification before it is displayed on a user's device. For more information, see the Apple Developer Documentation's [Modifying Content in Newly Delivered Notifications](https://developer.apple.com/documentation/usernotifications/modifying_content_in_newly_delivered_notifications). (Default: false)
     *
     * @return self
     */
    public function setMutableContent($mutable_content)
    {
        $this->container['mutable_content'] = $mutable_content;

        return $this;
    }

    /**
     * Gets push_sound
     *
     * @return string
     */
    public function getPushSound()
    {
        return $this->container['push_sound'];
    }

    /**
     * Sets push_sound
     *
     * @param string $push_sound Specifies the name of a sound file to be played when a push notification is delivered to your client app. The file can be in the app's main bundle or in the `Library/Sounds` folder of the app's data container.
     *
     * @return self
     */
    public function setPushSound($push_sound)
    {
        $this->container['push_sound'] = $push_sound;

        return $this;
    }

    /**
     * Gets apns_type
     *
     * @return string
     */
    public function getApnsType()
    {
        return $this->container['apns_type'];
    }

    /**
     * Sets apns_type
     *
     * @param string $apns_type (Deprecated)  Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. You should specify either this property or the apns_cert above to inform the server of which certificate type to update.
     *
     * @return self
     */
    public function setApnsType($apns_type)
    {
        $this->container['apns_type'] = $apns_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


