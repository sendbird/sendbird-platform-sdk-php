<?php
/**
 * SendBirdGroupChannelContextSourceTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * SendBirdGroupChannelContextSourceTest Class Doc Comment
 *
 * @category    Class
 * @description SendBirdGroupChannelContextSource
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class SendBirdGroupChannelContextSourceTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "SendBirdGroupChannelContextSource"
     */
    public function testSendBirdGroupChannelContextSource()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "channel_background"
     */
    public function testPropertyChannelBackground()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "channel_changelog"
     */
    public function testPropertyChannelChangelog()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_changed"
     */
    public function testPropertyEventChannelChanged()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_deleted"
     */
    public function testPropertyEventChannelDeleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_enter"
     */
    public function testPropertyEventChannelEnter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_exit"
     */
    public function testPropertyEventChannelExit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_frozen"
     */
    public function testPropertyEventChannelFrozen()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_hidden"
     */
    public function testPropertyEventChannelHidden()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_metacounter_deleted"
     */
    public function testPropertyEventChannelMetacounterDeleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_metacounter_updated"
     */
    public function testPropertyEventChannelMetacounterUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_metadata_deleted"
     */
    public function testPropertyEventChannelMetadataDeleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_metadata_updated"
     */
    public function testPropertyEventChannelMetadataUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_unfrozen"
     */
    public function testPropertyEventChannelUnfrozen()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_channel_unhidden"
     */
    public function testPropertyEventChannelUnhidden()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_delivery_receipt_updated"
     */
    public function testPropertyEventDeliveryReceiptUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_mention"
     */
    public function testPropertyEventMention()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_message_deleted"
     */
    public function testPropertyEventMessageDeleted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_message_received"
     */
    public function testPropertyEventMessageReceived()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_message_sent"
     */
    public function testPropertyEventMessageSent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_message_updated"
     */
    public function testPropertyEventMessageUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_operator_updated"
     */
    public function testPropertyEventOperatorUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_reaction_updated"
     */
    public function testPropertyEventReactionUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_read_receipt_updated"
     */
    public function testPropertyEventReadReceiptUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_thread_info_updated"
     */
    public function testPropertyEventThreadInfoUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_typing_status_updated"
     */
    public function testPropertyEventTypingStatusUpdated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_banned"
     */
    public function testPropertyEventUserBanned()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_declined_invitation"
     */
    public function testPropertyEventUserDeclinedInvitation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_joined"
     */
    public function testPropertyEventUserJoined()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_left"
     */
    public function testPropertyEventUserLeft()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_muted"
     */
    public function testPropertyEventUserMuted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_received_invitation"
     */
    public function testPropertyEventUserReceivedInvitation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_unbanned"
     */
    public function testPropertyEventUserUnbanned()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "event_user_unmuted"
     */
    public function testPropertyEventUserUnmuted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_message_canceled"
     */
    public function testPropertyLocalMessageCanceled()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_message_failed"
     */
    public function testPropertyLocalMessageFailed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_message_pending_created"
     */
    public function testPropertyLocalMessagePendingCreated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_message_resend_started"
     */
    public function testPropertyLocalMessageResendStarted()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "message_background"
     */
    public function testPropertyMessageBackground()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "message_changelog"
     */
    public function testPropertyMessageChangelog()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "message_collection_filter_mismatch"
     */
    public function testPropertyMessageCollectionFilterMismatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "message_fill"
     */
    public function testPropertyMessageFill()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
