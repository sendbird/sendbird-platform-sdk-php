<?php
/**
 * MetadataApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Sendbird\Test\Api;

use \Sendbird\Configuration;
use \Sendbird\ApiException;
use \Sendbird\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * MetadataApiTest Class Doc Comment
 *
 * @category Class
 * @package  Sendbird
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MetadataApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createChannelMetacounter
     *
     * Create a channel metacounter.
     *
     */
    public function testCreateChannelMetacounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createChannelMetadata
     *
     * Create a channel metadata.
     *
     */
    public function testCreateChannelMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserMetadata
     *
     * Create a user metadata.
     *
     */
    public function testCreateUserMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteChannelMetacounter
     *
     * Delete a channel metacounter - When deleting all items of a channel metacounter.
     *
     */
    public function testDeleteChannelMetacounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteChannelMetacounterByKey
     *
     * Delete a channel metacounter - When deleting a specific item of a channel metacounter by its key.
     *
     */
    public function testDeleteChannelMetacounterByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteChannelMetadata
     *
     * Delete a channel metadata - When deleting all items of a channel metadata.
     *
     */
    public function testDeleteChannelMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteChannelMetadataByKey
     *
     * Delete a channel metadata - When deleting a specific item of a channel metadata by its key.
     *
     */
    public function testDeleteChannelMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserMetadata
     *
     * Delete a user metadata - When deleting all items of a user metadata.
     *
     */
    public function testDeleteUserMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserMetadataByKey
     *
     * Delete a user metadata - When deleting a specific item of a user metadata by its key.
     *
     */
    public function testDeleteUserMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateChannelMetacounter
     *
     * Update a channel metacounter - When updating existing items of a channel metacounter by their keys or adding new items to the metacounter.
     *
     */
    public function testUpdateChannelMetacounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateChannelMetacounterByKey
     *
     * Update a channel metacounter - When updating a specific item of a channel metacounter by its key.
     *
     */
    public function testUpdateChannelMetacounterByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateChannelMetadata
     *
     * Update a channel metadata - When updating existing items of a channel metadata by their keys or adding new items to the metadata.
     *
     */
    public function testUpdateChannelMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateChannelMetadataByKey
     *
     * Update a channel metadata - When updating a specific item of a channel metadata by its key.
     *
     */
    public function testUpdateChannelMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserMetadata
     *
     * Update a user metadata - When updating existing items of a user metadata by their keys or adding new items to the metadata.
     *
     */
    public function testUpdateUserMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserMetadataByKey
     *
     * Update a user metadata - When updating a specific item of a user metadata by its key.
     *
     */
    public function testUpdateUserMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewChannelMetacounter
     *
     * View a channel metacounter - When retrieving all items of a channel metacounter.
     *
     */
    public function testViewChannelMetacounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewChannelMetacounterByKey
     *
     * View a channel metacounter - When retrieving a specific item of a channel metacounter by its key.
     *
     */
    public function testViewChannelMetacounterByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewChannelMetadata
     *
     * View a channel metadata - When retrieving all items of a channel metadata.
     *
     */
    public function testViewChannelMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewChannelMetadataByKey
     *
     * View a channel metadata - When retrieving a specific item of a channel metadata by its key.
     *
     */
    public function testViewChannelMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewUserMetadata
     *
     * View a user metadata - When retrieving all items of a user metadata.
     *
     */
    public function testViewUserMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewUserMetadataByKey
     *
     * View a user metadata - When retrieving a specific item of a user metadata by its key.
     *
     */
    public function testViewUserMetadataByKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
